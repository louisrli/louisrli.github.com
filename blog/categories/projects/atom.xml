<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2018-06-21T15:10:21+05:30</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bboy Practices]]></title>
    <link href="http://louisrli.github.io/blog/2015/12/07/bboy-practices/"/>
    <updated>2015-12-07 09:38:13 +0530</updated>
    <id>http://louisrli.github.io/blog/2015/12/07/bboy-practices</id>
    <content type="html"><![CDATA[<p><a href="http://bboypractices.com">bboypractices</a> is live: a site for traveling bboys to find bboy practices. </p>

<p>I’ll let the site speak for itself – a good site shouldn’t require a long blog post as an
explanation.</p>

<!-- more -->
<p>The motivation behind the site can be found under the <em>About</em> page at 
<a href="http://bboypractices.com">http://bboypractices.com</a>. Briefly, there was a lot of manual labor
involved in finding practices while I was traveling – reaching out to friends of friends of
friends. I’d like to keep the human element of finding bboy practices while enabling people to find
practice spots.</p>

<p>In related news, this is my first major release of a personal project. This was my first time
hooking up a domain and setting up a site via EC2 (running on my student credits). Thanks to everybody who
tested the site beforehand: Harvard Breakers and Weirdside. Particular thanks to my brother for his
constant testing and feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Senior Thesis: Security Analysis of Java Web Applications Using String Constraint Analysis]]></title>
    <link href="http://louisrli.github.io/blog/2015/05/03/senior-thesis/"/>
    <updated>2015-05-03 00:00:00 +0530</updated>
    <id>http://louisrli.github.io/blog/2015/05/03/senior-thesis</id>
    <content type="html"><![CDATA[<p>I submitted my undergraduate thesis at the beginning of April, titled “Security Analysis of Java Web
Applications Using String Constraint Analysis.” I was advised by Professor Stephen Chong.</p>

<!-- more -->

<p>Here’s the abstract:</p>

<blockquote>

  <p>Web applications are exposed to myriad security vulnerabilities related to malicious user string
input. In order to detect such vulnerabilities in Java web applications, this project employs string
constraint analysis, which approximates the values that a string variable in a program can take on.
In string constraint analysis, program analysis generates string constraints – assertions about the
relationships between string variables. We design and implement a dataflow analysis for Java
programs that generates string constraints and passes those constraints to the CVC4 SMT solver to
find a satisfying assignment of string variables. Using example programs, we illustrate the
feasibility of the system in detecting certain types of web application vulnerabilities, such as SQL
injection and cross-site scripting.</p>
</blockquote>

<p><a href="/downloads/louisli-thesis.pdf">Download the PDF</a> or view it below. </p>

<embed src="/downloads/louisli-thesis.pdf" type="application/pdf" width="100%" height="600" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erasable Code Contracts]]></title>
    <link href="http://louisrli.github.io/blog/2014/01/09/erasable-contracts/"/>
    <updated>2014-01-09 00:00:00 +0530</updated>
    <id>http://louisrli.github.io/blog/2014/01/09/erasable-contracts</id>
    <content type="html"><![CDATA[<p>This semester, I took a course on the science of cybersecurity, targeted toward an audience with some programming languages background. </p>

<p>A classmate and I had a semester long research project on “erasable” <a href="http://en.wikipedia.org/wiki/Code_contract">code contracts</a>. More details are below.</p>

<p>This was a valuable experience, giving me an opportunity to work on two things that I hadn’t done before:</p>

<ol>
  <li>Proof-based research</li>
  <li>Basic proofs of a calculus. While type soundness proofs and their associated lemmas are core to many calculi, many introductory programming language courses, including the one that I took, skip the details of the proofs.</li>
</ol>

<!-- more -->

<p>Here’s the abstract:</p>

<blockquote>
  <p>Contract programming is a design approach that allows programmers to design formal specifications for software, known as “contracts”. These contracts, executed at runtime, allow programmers to make assertions about the behavior of their software and ensure program correctness. In a language with side-effects, however, it is possible for these contracts to modify memory and consequently change the behavior of the program. While contracts provide the specifications, these specifications clearly should not change the behavior of the program that they enforce. Instead, if the contracts were removed (“erased”), then the behavior of the program should be the same as if the contracts remained. This notion is captured by the idea of erasability. We present a calculus for erasable contracts, establish properties such as type soundness, and prove a formal definition of erasability for the language.</p>
</blockquote>

<p><a href="/downloads/erasable-final.pdf">Download the PDF</a> or view it below. Note that it’s missing some of the grittier nuances of the eta-reductions.</p>

<embed src="/downloads/erasable-final.pdf" type="application/pdf" width="100%" height="600" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hungrier: Harvard Dining Menu, Re-released]]></title>
    <link href="http://louisrli.github.io/blog/2013/08/22/hungry-revamped/"/>
    <updated>2013-08-22 00:00:00 +0530</updated>
    <id>http://louisrli.github.io/blog/2013/08/22/hungry-revamped</id>
    <content type="html"><![CDATA[<p>I’ve rewritten and redesigned <a href="http://louisrli.github.io/hungry/">Hungry</a>, a site that filters the noisy Harvard dining menu for relevant entries. If you’re reading this during the school year, there probably won’t be anything, since student dining isn’t open.</p>

<p>This version was written in <a href="http://marionettejs.com">Marionette.js</a>, which has been my client-side framework of choice for the past few months (I’ve been using Meteor for things that require a more involved database). It still retains an obnoxious minimalism, but this time with lowercase text instead of uppercase text.</p>

<p><a href="https://github.com/louisrli/hungry">Source code here</a>, contributions welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 in Sideprojects]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/12/sideprojects-2012/"/>
    <updated>2013-01-12 00:00:00 +0530</updated>
    <id>http://louisrli.github.io/blog/2013/01/12/sideprojects-2012</id>
    <content type="html"><![CDATA[<p>It always surprises me how long a year is. It’s hard for me to believe that some of these projects were a year ago, but I’m happy to see my progress. Here’s a walk down memory lane for my projects in 2012, not including course projects and research.</p>

<p><a id="exploits" style="visibility:hidden;"> </a></p>

<h3 id="exploit-exercises-protostar-nebula">Exploit Exercises: Protostar, Nebula</h3>

<dl>
  <dt>Description</dt>
  <dd>A series of security wargames from <a href="http://exploit-exercises.com">Exploit Exercises</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>shell, C, assembly and shellcode, command line tools, compilation and libraries</dd>
  <dt>Other</dt>
  <dd>These were both fun and educational. These problems required a good deal of persistence. Topics ranged from: buffer overflows, shell code, stack layout, library linking, race conditions, format strings, command line tools, networking. I’ve posted the solutions on this site for the format string, stack, and shell exploit sections.</dd>
  <dt>Links</dt>
  <dd><a href="http://louisrli.github.com/sideprojects/2012/06/22/nebula0">Nebula shell solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/18/protostar-stack0">Protostar stack solutions: part 1</a>, <a href="http://louisrli.github.com/sideprojects/2012/08/29/protostar-format0">Protostar format solutions</a></dd>
</dl>

<!-- more -->
<p><a id="euler" style="visibility:hidden;"> </a></p>

<h3 id="project-euler">Project Euler</h3>
<dl>
  <dt>Description</dt>
  <dd>A series of mathematical programming problems from <a href="http://projecteuler.net/">Project Euler</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>C++, Scala</dd>
  <dt>Other</dt>
  <dd>Over the winter break of my freshman year (January 2012), I worked on these in C++. I’ll admit that I’m a bit embarrassed of the code I wrote – C++ isn’t the greatest language to use to work on these problems. However, Project Euler is a great way to become familiar with a language. The problems become significantly harder, and I continued with Scala (June 2012 - August 2012).</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/project-euler">code solutions</a></dd>
</dl>

<p><a id="grabrc" style="visibility:hidden;"> </a></p>

<h3 id="grabrc">.grabrc</h3>
<dl>
  <dt>Description</dt>
  <dd>A command-line client for downloading dotfiles from Github, giving a comfortable editing environment from any terminal. It can be installed via <a href="http://www.pip-installer.org/en/latest/">pip</a> (<code>pip install grabrc-client</code>).</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Python (client), Scala Play Framework (server)</dd>
  <dt>Other</dt>
  <dd>This was a pretty significant endeavor over the summer. The idea was motivated by my work with Amazon EC2 machines, virtual machines, and random in-house servers. Many times, I had to do work while ssh’d to those machines, but it was less productive without my comfortable shell and emacs environment at hand. sftp’ing files is a bit tedious, so I wrote a client (command-line Python) and a server (RESTful API) for accessing my dotfiles. The server is currently hosted on Heroku. I do, in fact, eat my own dog food, and it’s very handy when setting up new computers.</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/grabrc-server">server source code</a>, <a href="https://github.com/louisrli/grabrc-client">client source code</a>, <a href="http://pypi.python.org/pypi/grabrc-client/">PyPI index</a></dd>
</dl>

<p><a id="shuttleboy" style="visibility:hidden;"> </a></p>

<h3 id="shuttleboy-ios">Shuttleboy iOS</h3>
<dl>
  <dt>Description</dt>
  <dd>A native iOS version of the Harvard shuttle tracker, <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Objective-C, Cocoa Touch</dd>
  <dt>Other</dt>
  <dd>I worked on this for a few weeks during the winter break of my freshman year (January 2012). I didn’t want to pay for Apple Developer membership on my own, but after a long wait, I’m planning to release it through Rover soon.</dd>
  <dt>Links</dt>
  <dd><a href="/images/shuttleboy-preview.png">screenshots</a></dd>
</dl>

<p><a id="shuttlebaby" style="visibility:hidden;"> </a></p>

<h3 id="shuttlebabyhttpwwwhcsharvardedulouisshuttlebaby"><a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">Shuttlebaby</a></h3>
<dl>
  <dt>Description</dt>
  <dd>A website with the next few times between two particular stops on <a href="http://shuttleboy.cs50.net/">Shuttleboy</a>. Can be forked and customized.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>PHP, HTML, CSS</dd>
  <dt>Links</dt>
  <dd><a href="http://www.hcs.harvard.edu/~louis/shuttlebaby/">site</a>, <a href="https://github.com/louisrli/shuttlebaby">source code</a></dd>
</dl>

<p><a id="hungry" style="visibility:hidden;"> </a></p>

<h3 id="hungryhttpwwwhcsharvardedulouishungry"><a href="http://www.hcs.harvard.edu/~louis/hungry/">Hungry</a></h3>
<dl>
  <dt>Description</dt>
  <dd>A website with an obnoxiously concise version of the Harvard dining menu, showing only entrees. Includes an option to sign up and receive daily emails.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>PHP, HTML, CSS</dd>
  <dt>Links</dt>
  <dd><a href="http://www.hcs.harvard.edu/~louis/hungry/">site</a>, <a href="https://github.com/louisrli/hungry">source code</a></dd>
</dl>

<h3 id="jenkins-arbitrary-parameters-plugin">Jenkins Arbitrary Parameters Plugin</h3>
<dl>
  <dt>Description</dt>
  <dd>A plugin for the open-source continuous integration tool [Jenkins] that allows an arbitrary number of string parameters to be passed in as key-value pairs in properties file format.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Java, Jenkins</dd>
  <dt>Other</dt>
  <dd>Over the summer, one of my first intern projects was constructing a parameterized test framework in Jenkins that would run jobs along a matrix of parameters: operating system, MySQL version, log4cpp version, Java version, etc. Along with some work on the ec2-plugin, this was my first time looking at such a huge codebase. After poking around the Javadocs and Confluence wiki for a substantial amount of time, I wrote this plugin.</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/arbitrary-parameters-plugin">source code</a></dd>
</dl>

<p><a id="louisrligithub" style="visibility:hidden;"> </a></p>

<h3 id="louisrligithubcomhttplouisrligithubcom"><a href="http://louisrli.github.com">louisrli.github.com</a></h3>
<dl>
  <dt>Description</dt>
  <dd>This site.</dd>
  <dt>Languages &amp; Tools</dt>
  <dd>Customized Twitter Bootstrap (HTML/CSS/Javascript), Jekyll, Markdown</dd>
  <dt>Links</dt>
  <dd><a href="https://github.com/louisrli/louisrli.github.com">source code</a>, <a href="http://louisrli.github.com/">site</a></dd>
</dl>
]]></content>
  </entry>
  
</feed>
