<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: math | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/math/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2015-05-07T08:38:44-04:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    <email><![CDATA[louisrli@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Topological Proof of Bolzano-Weierstrass Without Constructing Sequences]]></title>
    <link href="http://louisrli.github.io/blog/2014/11/07/bolzano-weierstrass-without-sequences/"/>
    <updated>2014-11-07 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2014/11/07/bolzano-weierstrass-without-sequences</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/Bolzano%E2%80%93Weierstrass_theorem">Bolzano-Weierstrass theorem</a>
is a common theorem taught in introductory real analysis and topology courses. </p>

<p>All of the proofs that I’ve read for the Bolzano-Weierstrass theorem involve constructing sequences.
In my introductory topology course, I wanted to see if I could write a simple proof of the theorem
<em>without</em> having to explicitly construct any sequences.</p>

<p>(It’s worth noting that the proof for compact <script type="math/tex">\implies</script> sequentially compact requires constructing
sequences. If we take this as given, then we get to avoid sequences.)</p>

<h2 id="theorem-bolzano-weierstrass">Theorem (Bolzano-Weierstrass)</h2>
<blockquote>
  <p>Any bounded sequence in <script type="math/tex">\mathbb{R}^n</script> has a convergent subsequence.</p>
</blockquote>

<!-- more -->

<h2 id="proof">Proof</h2>

<p>We will make use of the following propositions, which I will assume to be previously proved. The
proofs of these are in a standard topology textbook (I’m reading from Munkres, 2nd edition). </p>

<p>I’ll redefine various notions of compactness below, since there exists some ambiguity in the
different forms of compactness.</p>

<blockquote>
  <p><strong>Definition.</strong> A topological space is <strong>sequentially compact</strong> if every
infinite sequence has a convergent subsequence.</p>
</blockquote>

<blockquote>
  <p><strong>Proposition 1.</strong> The interval <script type="math/tex"> [a, b] \subset \mathbb{R} </script> is compact.</p>
</blockquote>

<blockquote>
  <p><strong>Proposition 2.</strong> The product of compact spaces is compact.</p>
</blockquote>

<p>In fact, this proposition true in both the infinite case (<a href="http://en.wikipedia.org/wiki/Tychonoff's_theorem">Tychonoff’s
theorem</a>) and the finite case.</p>

<blockquote>
  <p><strong>Proposition 3.</strong> (Munkres, Theorem 28.2) <script type="math/tex"> X </script> is compact <script type="math/tex"> \implies </script> <script type="math/tex"> X </script> is
sequentially compact.</p>
</blockquote>

<p>We now prove Bolzano-Weierstrass.</p>

<p>Let <script type="math/tex"> \{ x_i \} </script> be a bounded sequence in <script type="math/tex"> \mathbb{R}^n </script>. We need to show that <script type="math/tex"> \{ x_i \}
</script> has a convergent subsequence.</p>

<p>Since the sequence is bounded in <script type="math/tex"> \mathbb{R}^n </script>, by definition of bounded, every element of
the sequence is contained in some closed interval of <script type="math/tex"> \mathbb{R}^n </script>:</p>

<script type="math/tex; mode=display"> A = [m, M]^n </script>

<p>where <script type="math/tex"> m, M </script> denote the “minimum” and “maximum” of our bounded interval. </p>

<p>Note that <script type="math/tex">[m, M] </script> is compact (Proposition 1). </p>

<p>It follows that <script type="math/tex"> A </script> is compact – it is the product of compact spaces (Proposition 2). </p>

<p>Because <script type="math/tex"> A </script> is compact, <script type="math/tex"> A </script> is sequentially compact (Proposition 3). </p>

<p>In a sequentially compact space, any sequence of points has a convergent subsequence. Note that <script type="math/tex">
\{ x_i \} </script> is one such sequence contained in the sequentially compact space <script type="math/tex"> A </script>, and it
follows that <script type="math/tex"> \{ x_i \} </script> must have a convergent subsequence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[det(-A) = -det(A) for Odd Square Matrix]]></title>
    <link href="http://louisrli.github.io/blog/2014/11/06/negative-determinant-odd-even-matrix/"/>
    <updated>2014-11-06 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2014/11/06/negative-determinant-odd-even-matrix</id>
    <content type="html"><![CDATA[<p>The proof for this is straightforward, but I didn’t find it explicitly stated elsewhere on the web
– it may just be one of those propositions that’s hard to phrase as a search query. In words:
the negative determinant of an odd square matrix is the determinant of the negative matrix.</p>

<h2 id="proposition">Proposition</h2>
<blockquote>
  <p>If <script type="math/tex">A</script> is an <script type="math/tex"> n \times n </script> square matrix and <script type="math/tex"> n </script> is odd, then <script type="math/tex"> \det(-A) =
-\det(A) </script>.</p>
</blockquote>

<!-- more -->

<h2 id="proof">Proof</h2>

<p>Negating all elements of a row of the matrix <script type="math/tex">A</script> negates the determinant of the matrix
(<a href="https://proofwiki.org/wiki/Effect_of_Sequence_of_Elementary_Row_Operations_on_Determinant">proof</a>
– think about it as multiplying a row by the scalar <script type="math/tex">-1</script>). </p>

<p><script type="math/tex">-A</script> is equivalent to <script type="math/tex"> A </script> with each of its rows negated. Because <script type="math/tex"> n </script> is
odd:</p>

<script type="math/tex; mode=display"> \det(-A) = (-1)^n \det(A) = -\det(A) </script>

<h2 id="context">Context</h2>
<p>This fact was needed to prove that if <script type="math/tex"> A </script> is a <a href="http://en.wikipedia.org/wiki/Orthogonal_group">special orthogonal
matrix</a> and <script type="math/tex"> n </script>
is odd, then <script type="math/tex"> A </script> has at least one eigenvector with eigenvalue <script type="math/tex"> 1 </script>.</p>

<p>Note that if <script type="math/tex">n</script> is even, we can prove that <script type="math/tex">\det(A) = \det(-A)</script> using the same technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Rational Approximation of Pi Using the Pigeonhole Principle]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/31/approximating-pi-pigeonhole-principle/"/>
    <updated>2013-01-31 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2013/01/31/approximating-pi-pigeonhole-principle</id>
    <content type="html"><![CDATA[<p>Below is a short Python script that finds a fractional approximation of \(\pi\) using the first 1001 multiples of \(\pi\) (the case with 11 multiples of \(\pi\) can easily be done by hand). It makes use of the <em>pigeonhole principle</em>. The 11-multiple version of the problem has been used in the module teaching the pigeonhole principle in various classes that I have taken or taught.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Pigeonhole_principle">pigeonhole principle</a> states that:</p>

<blockquote>
  <p>If \(n &gt; m\) and \(n\) pigeons are placed in \(m \) pigeonholes, then one pigeonhole must contain more than one pigeon.</p>
</blockquote>

<!-- more -->

<h2 id="problem-and-solution">Problem and Solution</h2>

<blockquote>
  <p>Given the following multiples of \(\pi\), each truncated to four decimal places:</p>

  <p>\(0\pi = 0.0000, 1\pi = 3.1415, 2\pi = 6.2831, … 1001\pi = 3144.7342 \)</p>

  <p>Use the pigeonhole principle to find a good rational approximation to \(\pi\).</p>
</blockquote>

<p>If we are given the multiples \(0 \pi \) through \( 1000 \pi \), we have 1001 multiples of \(0 \pi \). Consider the first three digits to the right of the decimal place of a number (in 123.456, the digits 456).</p>

<p>There are only 1000 possibilities for the first three digits to the right of the decimal place. Given 1001 multiples of \(\pi \), we can conclude from the pigeonhole principle that two such multiples must have the same three digits. This means that the difference to the right of the decimal point them is less than 0.001 in absolute value (for example, \(0.1235 - 0.1230 = 0.005\)).</p>

<p>Let \(m \pi, n \pi, m &gt; n \) be two multiples sharing the three numbers to the right of the decimal place. Then:</p>

<script type="math/tex; mode=display"> m\pi - n\pi = (m - n) \pi \implies \pi = \frac{m \pi - n \pi}{m - n} </script>

<p>Because \( m\pi - n\pi \) has a difference to the right of the decimal place that is less than 0.001, it approximates some integer. Therefore, we can use \( \frac{m \pi - n \pi}{m - n} \) as a rational approximation of \pi.</p>

<h2 id="code">Code</h2>

<p>For 11 multiples of \( \pi \), the problem is trivial to do by hand. For 1001 multiples, I’ve written a Python script to solve the problem. You can play around with the code <a href="http://codepad.org/HCmovMEd">here</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">“””</span>
</span><span class='line'><span class="n">pi</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Calculates</span> <span class="n">an</span> <span class="n">approximation</span> <span class="n">of</span> <span class="n">pi</span> <span class="n">given</span> <span class="n">the</span> <span class="n">multiples</span> <span class="mi">0</span><span class="n">pi</span> <span class="o">-</span> <span class="mi">1000</span><span class="n">pi</span> <span class="n">using</span>
</span><span class='line'><span class="n">the</span> <span class="n">Pigeonhole</span> <span class="n">Principle</span><span class="o">.</span> <span class="n">Outputs</span> <span class="n">the</span> <span class="n">first</span> <span class="n">approximation</span> <span class="n">found</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Author</span><span class="p">:</span> <span class="n">Louis</span> <span class="n">Li</span>
</span><span class='line'><span class="err">“””</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">math</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># Store the decimals we’ve found in a dictionary with its multiple of pi</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1001</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n_pi</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">first_three_dec</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">floor</span><span class="p">((</span><span class="n">n_pi</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">%</span> <span class="mi">1000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">first_three_dec</span> <span class="ow">in</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>        <span class="n">d</span><span class="p">[</span><span class="n">first_three_dec</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Calculate an approximation, having found two numbers</span>
</span><span class='line'>        <span class="c"># with the same first three decimal places</span>
</span><span class='line'>        <span class="n">m</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="n">first_three_dec</span><span class="p">]</span>
</span><span class='line'>        <span class="n">m_pi</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="n">n_pi</span> <span class="o">-</span> <span class="n">m_pi</span><span class="p">))</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;----- = &quot;</span><span class="p">,</span> <span class="p">((</span><span class="n">n_pi</span> <span class="o">-</span> <span class="n">m_pi</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">)),</span> \
</span><span class='line'>            <span class="s">&quot;(m = </span><span class="si">%d</span><span class="s">, n = </span><span class="si">%d</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Actual value, pi: &quot;</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="err">‘</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">’</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This will output the first solution found:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>355
</span><span class='line'>—– =  3.14159265359 (m = 1, n = 114)
</span><span class='line'>113&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Actual value, pi:  3.14159265359</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Forward to Discrete Mathematics]]></title>
    <link href="http://louisrli.github.io/blog/2012/12/22/discrete-math-paper/"/>
    <updated>2012-12-22 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2012/12/22/discrete-math-paper</id>
    <content type="html"><![CDATA[<p>For one of my math classes this semester (Sets and Topology), we had a short project: a three-to-five page paper on some area in mathematics. I opted for discrete mathematics, which is a topic on the broad side; five pages, of course.</p>

<!-- more -->

<p>The target audience was supposed to be other students in the course, and the paper should help students decide whether they would pursue the given area of mathematics.</p>

<p>I found this project surprisingly pleasant. Here’s <a href="https://www.dropbox.com/s/o1dalrrvstz0u7g/math101-final-paper.pdf">a link to the paper</a>.</p>

<h2 id="course-assisting">Course assisting</h2>

<p>I’m going to be a course assistant for a one-week winter break course on discrete math. I’m very excited to return this year to teach, having been a student of the course last year.It’s a fast-paced, active learning course that covers 10 modules (topics), two per day. I’ll be preparing and presenting the logic module. I’ve recently been converted into a believer for active learning.</p>

<p>Discrete math!</p>
]]></content>
  </entry>
  
</feed>
