<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: teaching | Louis Li]]></title>
  <link href="https://louisrli.github.io/blog/categories/teaching/atom.xml" rel="self"/>
  <link href="https://louisrli.github.io/"/>
  <updated>2023-03-29T12:22:58+02:00</updated>
  <id>https://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advice for Coding Bootcamp Students]]></title>
    <link href="https://louisrli.github.io/blog/2020/11/22/advice-for-students/"/>
    <updated>2020-11-22 00:00:00 +0100</updated>
    <id>https://louisrli.github.io/blog/2020/11/22/advice-for-students</id>
    <content type="html"><![CDATA[<p>As an instructor, I find myself giving the same advice frequently to many
students. In this article, I’ve distilled my most common recommendations into
one place, especially since I worry that students might be missing out on advice
if I don’t say it in front of the class.</p>

<p>This article contains advice for students in different stages of their
programming career, from entering the bootcamp to landing their first
development job. It describes some keys to success:</p>

<ul>
  <li>As a bootcamp student</li>
  <li>As a programmer</li>
  <li>As a job applicant</li>
  <li>As an employee</li>
</ul>

<p>My hope is that this will be a resource for all students of the Re:Coded
bootcamps (and possibly other bootcamps, but it’s catered to my
experience).</p>

<p>For the students: as with all improvement, simply hearing or reading it once
isn’t enough to build good habits.</p>

<!-- more -->

<h1 id="table-of-contents">Table of Contents</h1>

<ul>
  <li><a href="#as-a-bootcamp-student">As a bootcamp student</a>
    <ul>
      <li><a href="#learn-to-read-technical-writing">Learn to read technical writing</a></li>
      <li><a href="#stop-watching-so-many-videos">Stop watching so many videos</a></li>
      <li><a href="#be-emotionally-aware">Be emotionally aware</a></li>
      <li><a href="#dont-compare-yourself-to-others">Don’t compare yourself to others</a></li>
    </ul>
  </li>
  <li><a href="#as-a-programmer">As a programmer</a>
    <ul>
      <li><a href="#be-able-to-explain-every-variable">Be able to explain every variable</a></li>
      <li><a href="#stop-assuming">Stop assuming</a></li>
      <li><a href="#learn-to-spot-the-difference">Learn to spot the difference</a></li>
      <li><a href="#focus-on-debugging-skills">Focus on debugging skills</a></li>
    </ul>
  </li>
  <li><a href="#as-a-capstone-project-member">As a capstone project member</a></li>
  <li><a href="#as-an-employee">As an employee</a>
    <ul>
      <li><a href="#do-a-good-job">Do a good job</a></li>
      <li><a href="#seek-new-things">Seek new things</a></li>
      <li><a href="#dont-be-overly-eager-for-the-first-opportunity">Don’t be overly eager for the first opportunity</a></li>
    </ul>
  </li>
</ul>

<h1 id="as-a-bootcamp-student">As a bootcamp student</h1>

<h2 id="learn-to-read-technical-writing">Learn to read technical writing</h2>
<p>From the first day, students should focus on their technical reading skills.</p>

<p>In programming, videos will bring learners 30% of the way there on basic
concepts. But after a certain point in the journey, videos won’t even be present
for topics one has to research. <strong>Software development is a heavily reading
focused process:</strong> when leveraging a new library, working in a 
framework, understanding an application with private code, and so on.</p>

<p>I’m not saying that videos shouldn’t be used at all; they are excellent at
teaching the foundational concepts (see the next section for caveats).
However, many students skimp on improving reading skills, thinking that the dream of
learning from videos will carry on forever. Reading skills must be developed
in parallel.</p>

<p>There’s a reason that programmers want people to
<a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a>, not WTFV.</p>

<h2 id="stop-watching-so-many-videos">Stop watching so many videos</h2>

<p>To learn football or piano, can this be achieved
by mostly watching videos?  Coding is no different.</p>

<p>Videos are good for introducing basic concepts. They are also good for building
familiarity when typing alongside the video. But after a certain point,
improving isn’t about watching more videos: it’s about doing the activity
(coding) and identifying mistakes (see the debugging skills section). This is
the general loop in all skills, not just coding.</p>

<p>It’s no coincidence that the students that plateau the most are the ones that
are adamant about watching videos, repeatedly reaffirming that they learn better by
watching videos (a statement true for most of the
population). In the finite time available in the bootcamp,
it takes away from the time to practice application.</p>

<p>Students frequently tell me this: <em>“I understand the concepts but I’m having
trouble when I actually write code.”</em> At this stage, the solution is not to
watch another video to reinforce the concepts; it’s to practice writing the code
(though arguably the first step could be done by following step-by-step from a
video). There is no substitute for writing code.</p>

<p>Even though most students seem to understand that piano and football can’t be
learned by watching videos, I believe that, because coding happens on a
computer, some get stuck in the video mindset,
making it feel different from other “tangible”
skills such as instruments. Hey, we do <em>real</em> things with our keyboards.</p>

<h2 id="be-emotionally-aware">Be emotionally aware</h2>
<p>I encourage all students to think carefully about the best ways they can support
their peers’ experiences. The bootcamp can be a stressful experience for a lot of students. Students
grapple with their own self-image and ability to learn, and each student plays a
role in impacting the experiences of others through their actions.</p>

<p>Let’s take, for example, the phrase: “this was easy.” In my opinion, even if the
activity was <em>actually</em> easy for the student, an emotionally aware but advanced
student would focus on the hard parts nonetheless – showing even the struggling
students that each person has difficulty with something.</p>

<p>This is simply one example, and it doesn’t imply that students
shouldn’t present advanced work or express their opinion, but often there is a
clear separation between students who are aware of how their behavior affects
the mentalities of the rest of the class and those who are not aware.
<strong>Students should consider how their words may affect other students’
mentalities.</strong> The goal is to create a better learning experience for all
students.</p>

<h2 id="dont-compare-yourself-to-others">Don’t compare yourself to others</h2>

<p>Comparing yourself to others is usually unproductive. While it’s a natural
reaction, try not to do it.</p>

<p>Everybody can compare themselves to another person. When you start
programming, there’s already somebody who will learn faster. When you get your
first job, there’s another entry level developer out there with a higher salary.
Simply focus on improving yourself.</p>

<p>As a caveat, comparisons can be productive, but this depends on your personality and mindset.
In my experience, the comparisons that my students make are mostly not
productive.</p>

<p><strong>Productive</strong>: “This person is doing well. I’m inspired. I’m also going to strive to reach that
level of skill.”</p>

<p><strong>Not so productive</strong>: “This person is doing well. I feel really behind and unsure,
I’m not sure if I’ll be able to do this. Everybody else does it better.”</p>

<p>As the CS50 course says on one of their very first slides: it’s not about where
you end up relative to your peers, it’s about where you end up relative to where
you started.</p>

<h1 id="as-a-programmer">As a programmer</h1>

<h2 id="be-able-to-explain-every-variable">Be able to explain every variable</h2>

<p>When code isn’t working, I advise students to strive for this state: if I point to some
part of the code, <strong>the student should be able to correctly explain the type and
the approximate contents of every variable</strong>.</p>

<p>One of my most common questions to students is this: “What does this variable
contain? Is it a string, a number, an array, an object?” Especially in the early
parts of the bootcamp, I usually receive the wrong answer.</p>

<p>Take it slowly: students should build an understanding of each variable’s
contents, double-checking that understanding with logging.
For students that feel they are plateauing, I advise them to achieve a more
intimate understanding of their own code: make sure that every variable’s value
is understood. See the next section about assumptions.</p>

<h2 id="stop-assuming">Stop assuming</h2>

<p>Don’t assume that the code or variables do what they should be
doing, and use the console liberally.</p>

<p>All programmers are familiar with this sequence of events: after a long period
of debugging everything else, even though you were so, so, so sure that this
variable contained some value….well, it didn’t. It had something else.</p>

<p>When I help students with activities, one of my most common actions is to simply
tell them to log a certain variable, and that generally sets them on
the right path. But there’s nothing magic about this; it’s simply that I don’t
assume the variable is working as intended. Often, the student chose not to
log it because they <strong>assumed</strong> that a variable contained something
without checking it themselves. The instructor simply went “to double check.”</p>

<p>I often say that programming is a humbling art: when we debug, we have to assume
that we are wrong, revisiting our own mental image of the code.. One of the most
poisonous thoughts can be being overly sure in yourself: “I’m sure this variable
contains X, nah…no need to check it,”</p>

<h2 id="learn-to-spot-the-difference">Learn to spot the difference</h2>

<p>In coding, where we often work with example code or existing code,
“understanding the difference” between two pieces of code is a crucial skill.</p>

<p>I explicitly draw
attention to this skill because developers leverage this frequently. For
example, when reading the documentation for a library, looking at code on
StackOverflow, using teammates’ code as a guideline, etc. All of these will
ultimately involve “spotting differences” in code, whether to fix or adapt.</p>

<h3 id="examples">Examples</h3>
<ul>
  <li>My function is giving a syntax error, but the function in the demo works.
  What’s the difference?</li>
  <li>One of my pages is working, but the other is not. But they have the same
  structure. What’s the difference?</li>
  <li>This example code works, but my code doesn’t. What’s the difference?</li>
</ul>

<p>Sometimes spotting the difference can be as small as a single character.
Sometimes we can’t be sure if the difference is the cause of an issue. But the
mentality here is to be suspicious of everything; any perceived difference
<em>could</em> be the cause. I often hear this: “I saw this
this difference but I didn’t bother to investigate it, it couldn’t have been
that!” From the last section, we know how this turns out. Don’t assume.</p>

<h2 id="focus-on-debugging-skills">Focus on debugging skills</h2>

<p>Debugging skills – finding mistakes in code – are extremely
important in programming. Many students begin with the misconception that the majority of
programming is about writing code and later fixing a few small mistakes here and
there. The truth is usually the opposite: most of the time is spent fixing
mistakes in the code!</p>

<p>Debugging is a methodical, iterative process in which we learn from our
mistakes. <strong>I encourage all students to put in an active focus in improving
their debugging.</strong> I write this because it’s often something that students
passively develop, but I want to highlight an explicit focus on debugging skills
here. Take every bug fix, and try not to repeat the same mistake.</p>

<p>This is related to why videos are limited in their helpfulness. Videos usually
teach how to write code for a certain concept, but they don’t focus on the
correction of mistakes. See this <a href="https://softwareengineering.stackexchange.com/questions/10735/how-to-most-effectively-debug-code">StackExchange question on effectively debugging
code</a>.</p>

<h1 id="as-a-capstone-project-member">As a capstone project member</h1>

<p>After the first three months, students
participate in a “capstone project” with sprints and code reviews, managed by a
lead engineer from Re:Coded. This is meant to mirror the real development
process.</p>

<p>I will simply share the mental checklist I go
through when I evaluate a student on the capstone projects, <strong>in order of most
important to least important</strong> (though all of them are important).</p>

<ol>
  <li>Did they learn from their mistakes in code review and pull request
preparation, infrequently making the same mistakes?</li>
  <li>Did they review their peers’ code thoroughly and in detail, applying
principles from their own code reviews?
    <ul>
      <li>Or are most reviews simply one small comment followed by LGTM?</li>
    </ul>
  </li>
  <li>Did they respond in a timely manner as both a reviewer and reviewee?</li>
  <li>Do they habitually proofread their code reviews after asking for a review?
    <ul>
      <li>Or are log statements, wrong newlines, failing tests, typos, etc.
frequently present?</li>
    </ul>
  </li>
</ol>

<p>Answering no to any of the main four questions above indicates an area of
improvement. In my eyes, how well a student did in this project
essentially maps to “how much yes” or “how much no” for the answers above
(nobody is perfect).</p>

<p>All of these are <strong>less about technical knowledge and more about the care one
takes in their work.</strong> This type of quality and attention is noted in the
workplace.</p>

<h1 id="as-an-employee">As an employee</h1>

<h2 id="do-a-good-job">Do a good job</h2>

<p>There is no substitute for doing good work and achieving results at a workplace.
Focus on excelling in work – writing clean code, being a good
communicator, being a good teammate – and it will open up more opportunities.</p>

<p>Somebody who does good work is valued. And somebody who is valued generally has
more agency in their life – agency to choose a team, a company, a project, and to
some extent, a salary.</p>

<h2 id="seek-new-things">Seek new things</h2>
<p>Say yes to new projects, new technologies, new
teams. This will pave the way for being a well-rounded developer.</p>

<p>After “learning to learn”, one should embrace the challenge of learning a new
technology or framework. <strong>Over-comfort should be 
discomfort</strong>; it’s a sign that it’s time to go seek new knowledge. Nobody wants
to be doing the exact same thing for 25 years.</p>

<p>Of course, there are a few caveats, such as a draconian boss that wants to milk
18 hours a day from you, career risks from moving to new teams, and so on – but
to have a fulfilling career, one should keep the general principle in mind.</p>

<h2 id="dont-be-overly-eager-for-the-first-opportunity">Don’t be overly eager for the first opportunity</h2>

<p>Know your value. A lot of my students, even the ones that excel highly in the
course, have the mindset that they’d love if someone offered them a job. When I
hear this, I worry that they might simply snap up the first job that they’re
offered, consequnetly giving up on comparisons with other opportunities on
culture fit, learning opportunities, or salaries.</p>

<p>Keeping this mind, I encourage students to understand their worth and make their
best effort to explore options, rather than immediately settling for the first.
While we should all be grateful for the opportunity for employment, my graduated
students are often surprised by the level of demand for developers. In short:
<strong>you’re probably more valuable than you think you are</strong>
(economically speaking).</p>

<p>As a disclaimer, this is completely dependent on the person’s financial and life
situation. In this particular case, most of my students spent four months in a
coding bootcamp and generally aren’t in financially urgent situations,
consequently having the luxury of spending time for a job search.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a Better Teaching Assistant: Five Concrete Tips]]></title>
    <link href="https://louisrli.github.io/blog/2015/01/28/five-tips-for-being-an-effective-teaching-fellow/"/>
    <updated>2015-01-28 05:13:28 +0100</updated>
    <id>https://louisrli.github.io/blog/2015/01/28/five-tips-for-being-an-effective-teaching-fellow</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to provide concrete pointers to becoming a better undergraduate teaching
fellow (Harvard lingo for student instructor, course assistant, etc.).</p>

<p>Being an undergraduate instructor can be tricky. First, the students are the same age as you. Second, it can be hard to know how to improve. In my experience as both a student writing feedback and an instructor receiving feedback, students usually won’t write more than two sentences of feedback.</p>

<p>The word “teaching” usually evokes an image of an instructor at a whiteboard. While effective
communication skills are important, the environment and perceptions that an instructor
fosters among students is equally important. For that reason, I’m choosing to focus on aspects outside of
teaching classroom material.</p>

<!-- more -->

<h2 id="disclaimer">Disclaimer</h2>

<p>I’m still an undergraduate with a fraction of the teaching experience of a
professor – but the advantage of youth is that I can still remember the most basic and glaring
mistakes that student instructors make.</p>

<p>These tips are derived from three sources:</p>

<ol>
  <li>My own mistakes as a teaching fellow</li>
  <li>My own experience as a student</li>
  <li>My observations of other student instructors</li>
</ol>

<h1 id="1-explicitly-emphasize-your-accessibility">1. Explicitly emphasize your accessibility.</h1>
<p><strong>Concrete action</strong>: At the beginning of every section (or every section for the first half of the
semester), tell the students to email you any questions that they have about the course or problem
sets – no matter how trivial.</p>

<p><strong>Phrasing is important.</strong> As an instructor, I particularly emphasized my willingness to look at the
rigor of proofs,
a common concern in introductory mathematics courses – telling students that I would avoid saying
whether their answer was correct but would instead give feedback on the rigor of their proofs.</p>

<p>Consider the result of being passively open to questions. In the back of their heads, students
know that they <em>can</em> approach you for questions, but they may be worried about looking “dumb” or
coming off as annoying. Explicitly emphasizing your accessibility fosters an environment that allows
you to help struggling students.</p>

<h1 id="2-avoid-saying-that-things-are-easy">2. Avoid saying that things are easy.</h1>
<p><strong>Concrete action</strong>: Try to catch yourself before using any of these phrases or their variants:
“this problem is easy”, “this problem is really simple”, “this is not too hard”, etc.</p>

<p>Here’s a real story (identifying details omitted). A student in a course (that I was teaching) told
me that another instructor thought that the course was easy when the
instructor, who had a strong mathematics background, had taken it. The student, who was struggling
in the course, was clearly bothered by this.</p>

<p>Ultimately, telling a student that the course was “supposed to be” easy
achieved nothing positive. It only served to foster the student’s apprehension about the course.</p>

<p>Many people would find it obvious that an instructor shouldn’t tell a struggling student that a task
is easy. However, note that it’s also a bad <em>preface</em> to an example problem – before anybody
mentions confusion. Deeming the problem “easy” beforehand will make potentially confused
students feel worse.</p>

<h1 id="3-admit-when-you-dont-know-the-answer--then-find-it">3. Admit when you don’t know the answer – then find it.</h1>
<p><strong>Concrete action</strong>: If a student puts you on the spot with a question, and you can’t figure out the
answer, admit it, but <em>make sure</em> to follow up with the student later.</p>

<p>An appropriate response – one I’ve used many times – is along the lines of: “I’m sorry, I don’t
know off the top of my head. I’ll find out and send you an email.” (Of course, you should always first <em>try</em> to answer the question)</p>

<p>Most of the time, the student doesn’t urgently need the answer. As much as it might ring the ego,
it’s better to send the student a well thought-out answer than stalling (wasting everyone’s time) or
giving a copout answer (hurting the student’s learning).</p>

<h1 id="4-dont-rely-on-the-solutions-key">4. Don’t rely on the solutions key.</h1>
<p><strong>Concrete action</strong>: Fully solve any solution that you’re responsible for explaining
(example problem in section, homework problem, etc.).</p>

<p>In my experience, failing to do this will, with nontrivial probability, result in trying to parse
the solutions under high pressure. <strong>Having the solutions key is not the same as having the
ability to explain the steps of a solution</strong> (I know of a few other instructors that were capable of
procuring explanations quickly – I am not one of them). Working through the solutions beforehand
ensures that you can maximize your helpfulness to students.</p>

<h1 id="5-follow-the-course-materials-with-the-students">5. Follow the course materials with the students.</h1>
<p><strong>Concrete action</strong>: Read any potential source of questions – textbook
chapters, slides, notes – in step with the timeline of the course.</p>

<p>Familiarize yourself with the students’ readings. Even if you know the course concepts, students often have fairly specific
questions about certain examples in the readings. The ideal response is to explain
an example after rereading it once, having already reviewed the students’
readings.</p>

<p>The wrong response to a question – which, I guiltily admit, has happened to me on occasion –
is to ask the student to wait, spending substantially longer to read, parse, and understand the
example in question.</p>

<h1 id="conclusion">Conclusion</h1>
<p>A good way to improve as an instructor is to consider the qualities that you appreciate in
instructors (or more saliently, the qualities that you dislike).</p>

<p>If you haven’t considered teaching as an undergraduate, I strongly encourage you to think about it. Teaching as an
undergrad is a unique (and sometimes
<a href="http://harvardpolitics.com/harvard/harvard-undergraduates-teaching-harvard-doesnt-want-talk/">controversial</a>)
opportunity.</p>

<p><em>Thank you to Ruth Fong for contributing to this article.</em></p>

<p><em>Thank you to Paul Bamberg, Stephen Chong, Harry Lewis, Emily Riehl, and Salil Vadhan for providing me valuable
opportunities to teach during my college years. I am especially indebted to Paul for propelling me into
teaching as an undergraduate.</em></p>

]]></content>
  </entry>
  
</feed>
