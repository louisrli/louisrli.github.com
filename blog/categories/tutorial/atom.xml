<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2013-07-29T21:12:27-04:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    <email><![CDATA[louisrli@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Use Meteor.js Routing with Disqus]]></title>
    <link href="http://louisrli.github.io/blog/2013/07/29/using-meteor-js-with-disqus/"/>
    <updated>2013-07-29 00:00:00 -0400</updated>
    <id>http://louisrli.github.io/blog/2013/07/29/using-meteor-js-with-disqus</id>
    <content type="html"><![CDATA[<p>On most sites, using Disqus as the commenting system is as simple as copying the <a href="http://disqus.com/admin/universalcode/">Universal Code</a> (also known as <code>embed.js</code>) into a web page. In single-page JavaScript applications, however, much of the rendering is on the client-side. This means that <code>embed.js</code> might lead to stale Disqus threads or function incorrectly as pages are re-rendered.</p>

<p>This article explains how to integrate Disqus with <a href="http://meteor.com">Meteor.js</a> (version 0.6.4.1 at the time of writing). If you want one Disqus thread for each route, copying the Universal Code won&rsquo;t ensure that Disqus loads the correct thread for each page. Instead, the comments will either fail to load or retrieve a stale thread.</p>

<p>When <code>embed.js</code> is loaded multiple times (when pages rerender and run the script multiple times), the following error will appear in the console:</p>

<pre><code>DISQUS assertion failed: Unsafe attempt to redefine existing module &lt;name&gt;
</code></pre>

<p><em>Note</em>: I&rsquo;m using <a href="https://github.com/tmeasday/meteor-router">Meteor Router</a> to create URL paths in my application, although this method should work with any routing system.</p>

<!-- more -->


<h2>Disqus Single Sign-on</h2>

<p>As a bonus, I&rsquo;ve added the optional code snippet in <code>Deps.autorun()</code> for using <a href="http://help.disqus.com/customer/portal/articles/236206-integrating-single-sign-on">Disqus Single Sign-on</a> with Meteor. If you want to see the server-side code in JavaScript, take a look at <a href="https://github.com/disqus/DISQUS-API-Recipes/blob/master/sso/javascript/main.js">the examples that I added</a> to the Disqus API Recipes.</p>

<h2>Annotated Code</h2>

<p>The code is written in <a href="http://coffeescript.org/">CoffeeScript</a>. If you want to take a look at the JavaScript version, you can use the <a href="http://coffeescript.org/#try:">CoffeeScript translator</a>. Meteor automatically compiles <code>.coffee</code> files to <code>.js</code>.</p>

<p>With the code below, all you have to do is add the following to your Meteor Handlebars template to include Disqus comments:</p>

<p><code>
 {{disqus}} 
</code></p>

<p>Easy, right?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Meteor Disqus template manager  (disqus.coffee)</span> <a href='/downloads/code/disqus.coffee'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Template.disqus.rendered = </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  # We don&#39;t want to load Disqus until the first time the template is</span>
</span><span class='line'><span class="cm">  # rendered, since it requires the #disqus_thread div</span>
</span><span class='line'><span class="cm">  # Triggers Deps.autorun (below)</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>  <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s">&quot;loadDisqus&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  # Whenever the template is rendered, trigger a Disqus reset.</span>
</span><span class='line'><span class="cm">  # This will find the correct thread for the current page URL.</span>
</span><span class='line'><span class="cm">  # See http://help.disqus.com/customer/portal/articles/472107-using-disqus-on-ajax-sites</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>  <span class="nx">DISQUS</span><span class="o">?</span><span class="p">.</span><span class="nx">reset</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">reload: </span><span class="kc">true</span>
</span><span class='line'>      <span class="nv">config: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">###</span>
</span><span class='line'><span class="cm">  # OPTIONAL: Only include the part below if you&#39;re using</span>
</span><span class='line'><span class="cm">  # Disqus single-sign on</span>
</span><span class='line'><span class="cm">  # Generate the disqusSignon variable appropriately from your server</span>
</span><span class='line'><span class="cm">  ###</span>
</span><span class='line'>  <span class="nv">disqusSignon = </span><span class="nx">Session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;disqusSignon&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">user</span><span class="p">()</span> <span class="o">and</span> <span class="nx">disqusSignon</span>
</span><span class='line'>    <span class="nv">el2 = </span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s">&quot;script&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">el2.type = </span><span class="s">&#39;text/javascript&#39;</span>
</span><span class='line'>    <span class="nv">el2.innerHTML = </span><span class="s">&quot;var disqus_config = function() {</span>
</span><span class='line'><span class="s">      this.page.remote_auth_s3 = \&quot;</span><span class="si">#{</span><span class="nx">disqusSignon</span><span class="p">.</span><span class="nx">auth</span><span class="si">}</span><span class="s">\&quot;;</span>
</span><span class='line'><span class="s">      this.page.api_key = \&quot;</span><span class="si">#{</span><span class="nx">disqusSignon</span><span class="p">.</span><span class="nx">pubKey</span><span class="si">}</span><span class="s">\&quot;;</span>
</span><span class='line'><span class="s">    }&quot;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s">&quot;</span><span class="err">#</span><span class="s">my-disqus&quot;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">el2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Deps</span><span class="p">.</span><span class="nx">autorun</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1"># Load the Disqus embed.js the first time the `disqus` template is rendered</span>
</span><span class='line'>  <span class="c1"># but never more than once</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">Session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;loadDisqus&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">DISQUS</span>
</span><span class='line'>    <span class="c1"># Below is the Disqus Universal Code</span>
</span><span class='line'>    <span class="c1"># (in Coffeescript, backticks escape Javascript code)</span>
</span><span class='line'>    <span class="o">`</span>
</span><span class='line'>    <span class="sr">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */</span>
</span><span class='line'>    <span class="nx">var</span> <span class="nv">disqus_shortname = </span><span class="s">&#39;YOUR_SHORTNAME&#39;</span><span class="p">;</span> <span class="o">//</span> <span class="nv">required: </span><span class="nx">replace</span> <span class="nx">example</span> <span class="nx">with</span> <span class="nx">your</span> <span class="nx">forum</span> <span class="nx">shortname</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">/* * * DON&#39;T EDIT BELOW THIS LINE * * */</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">var</span> <span class="nv">dsq = </span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s">&#39;script&#39;</span><span class="p">);</span> <span class="nv">dsq.type = </span><span class="s">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nv">dsq.async = </span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'>     <span class="nv">dsq.src = </span><span class="s">&#39;//&#39;</span> <span class="o">+</span> <span class="nx">disqus_shortname</span> <span class="o">+</span> <span class="s">&#39;.disqus.com/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">dsq</span><span class="p">);</span>
</span><span class='line'>     <span class="p">})();</span>
</span><span class='line'>     <span class="o">`</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Meteor Disqus template (disqus.html)</span> <a href='/downloads/code/disqus.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template</span> <span class="na">name=</span><span class="s">&quot;disqus&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{{#isolate}}
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;my-disqus&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Begin Disqus universal code --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;noscript&gt;</span>Please enable JavaScript to view the
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com/?ref_noscript&quot;</span><span class="nt">&gt;</span>comments powered by Disqus.<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/noscript&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://disqus.com&quot;</span> <span class="na">class=</span><span class="s">&quot;dsq-brlink&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    comments powered by <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;logo-disqus&quot;</span><span class="nt">&gt;</span>Disqus<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- End Disqus universal code --&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{{/isolate}}
</span><span class='line'><span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Disqus in Other Single-page JavaScript Frameworks</h2>

<p>If you&rsquo;re using another single-page JavaScript framework like Ember.js, Angular.js, etc., here&rsquo;s a general strategy for using Disqus:</p>

<ol>
<li>Wait until the first time a Disqus thread needs to be loaded.<br/>
When <code>div #disqus_thread</code> has been rendered, load <code>embed.js</code> into the page.</li>
<li>Set a global flag to ensure that <code>embed.js</code> is not loaded again.</li>
<li>Each time a new Disqus thread is needed, trigger a <code>DISQUS.reset()</code>, including
the first time <code>embed.js</code> is loaded. Again,
make sure that <code>div #disqus_thread</code> is rendered in the DOM, or there may be an error
about appending an element to <code>null</code>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up-to-date Guide on How to Delete All Posts on Your Tumblr]]></title>
    <link href="http://louisrli.github.io/blog/2013/05/11/how-to-delete-all-tumblr-posts/"/>
    <updated>2013-05-11 00:00:00 -0400</updated>
    <id>http://louisrli.github.io/blog/2013/05/11/how-to-delete-all-tumblr-posts</id>
    <content type="html"><![CDATA[<p>One of my friends asked me how to batch delete all of the posts on a <a href="http://tumblr.com">Tumblr</a>. There are some PHP and Ruby scripts on the internet that claim to achieve this, but they seem to be outdated in regards to the Tumblr API, or they require installing some packages.</p>

<!-- more -->


<h2>Instructions</h2>

<p>This will allow you to delete 100 posts at a time. Unfortunately, if you try more, Tumblr will give you a warning that only 100 posts can be edited at one time.</p>

<ol>
<li>On the right side of the Tumblr dashboard, click <strong>Posts</strong> underneath the name of your blog.</li>
<li>This should bring up a link called <strong>Mass Post Editor</strong>. Click on <strong>Mass Post Editor</strong>.</li>
<li>You&rsquo;ll be presented with your posts as tiles. <strong>Keep scrolling down</strong> until at least 100 posts (eyeball it) appear on the screen.</li>
<li><p>Paste the code snippet below in the URL bar. There will be no visible changes. <strong>NOTE:</strong> Some browsers will remove the <code>javascript:</code> in front of it. Double check that it&rsquo;s still there, and if not, type <code>javascript:</code> at the beginning of the pasted part.</p>

<pre><code>  javascript:if(!window.protolicious)(function(d,s){s=d.createElement('script');s.src='https://raw.github.com/kangax/protolicious/master/event.simulate.js';(d.head||d.documentElement).appendChild(s)})(document); 
</code></pre></li>
<li><p>Paste the code snippet below in the URL bar. It should select the first 100 posts with checkmarks.</p>

<pre><code>  javascript:$$('.overlay').slice(0, 100).each(function(a) { a.simulate('click'); }); 
</code></pre></li>
<li><p>Click <strong>Delete selected posts</strong>.</p></li>
<li>Refresh the page if needed, and delete another 100 posts!</li>
</ol>


<p>If for some reason this doesn&rsquo;t work, let me know in the comments. I&rsquo;ll try to keep this up-to-date.</p>

<h2>Technical Details</h2>

<p>Tumblr uses the Javascript library <a href="http://prototypejs.org/">Prototype</a>. Unlike jQuery, this doesn&rsquo;t provide a lot of support for handling and simulating events, so we load some library (I&rsquo;m not familiar with Prototype, although I briefly read the docs out of curiosity) called <a href="https://github.com/kangax/protolicious">Protolicious</a> that adds some support for this.</p>

<p>Prototype is already included on the page, since Tumblr uses it. The code loads the Protolicious library, finds the first 100 posts, and clicks on them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Extensions: Taking Screenshots with Javascript/jQuery, HTML5, Canvas]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/16/javascript-canvas-screenshot/"/>
    <updated>2013-01-16 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2013/01/16/javascript-canvas-screenshot</id>
    <content type="html"><![CDATA[<p>This post describes how to create a completely accurate image preview of a DOM element on the page by using Javascript in a Chrome extension. I stumbled upon this issue while working on a web implementation of <a href="http://www.mendeley.com/research/enhanced-area-cursors-reducing-fine-pointing-demands-people-motor-impairments/">click-and-cross (Findlater et al.)</a> for research. This process consists of two subproblems.</p>

<ol>
<li>How can we take a screenshot of the current page using Javascript?</li>
<li>Given the screenshot of part of the page, how can we crop out our element from the screenshot?</li>
</ol>


<!-- more -->


<p>If you&rsquo;re only interested in the code and not the explanation of the problem, <a href="#code">click here</a>.</p>

<h2>Overview</h2>

<h3>The screenshot problem: imperfect solutions</h3>

<p>Given only plain Javascript and a DOM, outside of the context of a Chrome extension it&rsquo;s not possible to take a completely accurate screenshot of the page. This is explained in a <a href="http://stackoverflow.com/questions/4912092/using-html5-canvas-javascript-to-take-screenshots/">Stack Overflow question</a>.</p>

<p>The top answer offers a solution that uses a script called <a href="http://html2canvas.hertzen.com/">html2canvas</a>. Another potential solution is <a href="http://www.aplweb.co.uk/blog/js/magnifying-glass/">Magnifying Glass</a>, which works by duplicating the HTML content of the body and re-rendering it in a &ldquo;magnifying glass&rdquo; (<a href="http://www.aplweb.co.uk/blog/js/magnifying-glass/demo.html">demo</a>). However, Magnifying Glass will conflict with any HTML-embedded Javascript, and html2canvas produces an imperfect replication of the page.</p>

<p>The solution in this post is dependent on the fact that the Chrome extension API provides a function, <code>chrome.tabs.captureVisibleTab()</code> <a href="http://developer.chrome.com/extensions/tabs.html#method-captureVisibleTab">(docs)</a>, for taking a screenshot of the visible part of a tab.</p>

<h3>Picking out the element from the screenshot</h3>

<p>Since the <code>captureVisibleTab()</code> function only gives us a portion of the screen, we can&rsquo;t simply use the offset (top, left) of the rendered element.</p>

<p>For example, in the figure below, let the shaded part of the screen be the part of the screen that we capture, and the <strong>Message Passing</strong> header, boxed in yellow, be the element that we want to capture. Given the position of the screenshot relative to the origin of the window (the black dots), we&rsquo;ll compute the position of our element relative to the origin of the screenshot (the blue dots), then crop out that region.</p>

<ul class="thumbnails" style="text-align: center;">
    <li class="span6" style="display:inline-block; float: none;">
    <a href="/images/chrome-screenshot-demo.png" class="thumbnail">
        <img src="/images/chrome-screenshot-demo.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    </li>
</ul>


<h2>Code</h2>

<p>Chrome extensions have two distinct parts involving Javascript: the extension (runs in the background) and the content scripts (runs on a certain page and can access the DOM). Content scripts <em>cannot</em> access most of the Chrome extension API (such as <code>captureVisibleTab()</code>), but extensions and content scripts can communicate indirectly through <a href="http://developer.chrome.com/extensions/messaging.html">message passing</a>.</p>

<p>Make sure that these permissions are included in your <code>manifest.json</code>, and add the functions to one of your content scripts.</p>

<p><div>
  <pre><code class='text'>&amp;ldquo;permissions&amp;rdquo;: [&amp;ldquo;tabs&amp;rdquo;, &amp;ldquo;&amp;lt;all_urls&gt;&amp;rdquo;],
&amp;ldquo;background&amp;rdquo;: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: [&quot;background.js&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;},</code></pre>
</div>
</p>

<p><code>background.js</code>:</p>

<p><div>
  <pre><code class='javascript'>chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (request.name == 'screenshot') {
    chrome.tabs.captureVisibleTab(null, null, function(dataUrl) {
        sendResponse({ screenshotUrl: dataUrl });
    });
}
return true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;});</code></pre>
</div>
</p>

<p><code>screenshot.js</code> (content script):
<div>
  <pre><code class='javascript'>/&lt;em&gt; Takes a screenshot and uses it in a callback as a canvas &lt;/em&gt;/
takeScreenshot: function(callback) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chrome.extension.sendMessage({name: 'screenshot'}, function(response) {
    var data = response.screenshotUrl;
    var canvas = document.createElement('canvas');
    var img = new Image();
    img.onload = function() {
        canvas.width = $(window).width();
        canvas.height = $(window).height()
        canvas.getContext(&quot;2d&quot;).drawImage(img, 0, 0, canvas.width, canvas.height);

        var $canvas = $(canvas);
        $canvas.data('scrollLeft', $(document.body).scrollLeft());
        $canvas.data('scrollTop', $(document.body).scrollTop());

        // Perform callback after image loads
        callback($canvas);
    }
    img.src = data;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}</code></pre>
</div>
</p>

<p><div>
  <pre><code class='javascript'>/&lt;em&gt; Returns a canvas containing a screenshot of $element &lt;/em&gt;/
renderPreview: function($element, $screenshotCanvas) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var previewCanvas = document.createElement('canvas');
previewCanvas.width = $element.width();
previewCanvas.height = $element.height();

// Calculate the correct position of the element on the canvas
var prevTop = $element.offset().top - $screenshotCanvas.data('scrollTop');
var prevLeft = $element.offset().left - $screenshotCanvas.data('scrollLeft');

var ctx = previewCanvas.getContext(&quot;2d&quot;);
ctx.drawImage($screenshotCanvas[0], prevLeft, prevTop,
                                    $element.width(), $element.height(),
                                    0, 0,
                                    $element.width(), $element.height());

return $(previewCanvas)
            .css({ border:'1px solid black' });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}</code></pre>
</div>
</p>

<p>We do three things:</p>

<ol>
<li>Use the extension to capture a screenshot of the open tab, receiving a <code>data://</code> URL to the image and sending it to the content script.</li>
<li>In the content script, scale down the screenshot by drawing it to a canvas. The original image may be higher resolution than the actual window, so it needs to be scaled.</li>
<li>Crop out the portion of the screenshot canvas that we need onto another canvas, now containing our element.</li>
</ol>


<p>We add a listener in the background script of the extension. When a screenshot is requested, it will take a screenshot and send back the <code>data://</code> URL.</p>

<p>Our content script will take two functions. One takes a screenshot of the page, and it accepts a callback argument after the screenshot has finished. When the screenshot is taken, we encode the current position of the window using jQuery&rsquo;s <code>scrollLeft()</code> and <code>scrollTop()</code>.</p>

<p>Our second function takes a jQuery element and returns a jQuery object referring to a canvas with the preview of that element. It computes the position of the element on the canvas. We use the version of <code>drawImage()</code> <a href="https://developer.mozilla.org/en-US/docs/HTML/Canvas/Tutorial/Using_images#Slicing">(docs)</a> with the most parameters.</p>

<p>If this helped, feel free to leave and comment and let me know.</p>

<h2>Finished product</h2>

<p>It&rsquo;s up to you what you want to use the screenshots of the elements for, but here&rsquo;s an example of what the screenshots would look like in click-and-cross:</p>

<ul class="thumbnails" style="text-align: center;">
    <li class="span3" style="display:inline-block; float: none;">
    <a href="/images/chrome-nyt-plain.png" class="thumbnail">
        <img src="/images/chrome-nyt-plain.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    <div>A page with multiple links</div>
    </li>
    <li class="span3" style="display:inline-block; float: none;">
    <a href="/images/chrome-nyt-cnx.png" class="thumbnail">
        <img src="/images/chrome-nyt-cnx.png"
    alt="Diagram of the element that we want to capture relative to the screenshot"/>
    </a>
    <div>Previews of nearby elements</div>
    </li>

</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Quicksilver Mac and AppleScript to Adjust System Volume]]></title>
    <link href="http://louisrli.github.io/blog/2013/01/15/applescript-volume/"/>
    <updated>2013-01-15 00:00:00 -0500</updated>
    <id>http://louisrli.github.io/blog/2013/01/15/applescript-volume</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="http://qsapp.com/">Quicksilver</a> for a while, and I&rsquo;d heard of how powerful but never taken advantage of it. I wanted to adjust the system volume through Quicksilver: right now, I have to use <code>fn</code> + <code>f10</code> / <code>f11</code> / <code>f12</code> to adjust volume, since I chose to have <code>f1</code>&ndash;<code>f12</code> map to the normal keys.</p>

<p>It seems that there&rsquo;s actually no Quicksilver plugin for system volume &mdash; only iTunes volume &mdash; but it&rsquo;s pretty simple to do with AppleScripts. It&rsquo;s not documented everywhere, so I thought I&rsquo;d add it here.</p>

<!-- more -->




<ul class="thumbnails" style="width: 50%; margin: 0px auto;">
<li class="span4">
<a href="/images/quicksilver-script.png" class="thumbnail">
<img alt="Quicksilver script for increasing volume" src="/images/quicksilver-script.png" height="300"/>
</a>
</li>
</ul>


<h2>Volume AppleScripts</h2>

<p>The AppleScripts below will adjust the system volume, which is measured on a scale of 0 &ndash; 100. Here&rsquo;s a <a href="https://www.dropbox.com/s/8a3rzqtiyupmny1/volume-applescripts.zip">download link</a> for these three scripts. To use them in Quicksilver, add them to the catalog, and opening them in Quicksilver should run them by default.</p>

<h5>Decrease volume</h5>

<p><div>
  <pre><code class='applescript'>&lt;/p&gt;

&lt;h1&gt;Decrease\ Volume.scpt&lt;/h1&gt;

&lt;p&gt;set currentVolume to output volume of (get volume settings)
set volume output volume (currentVolume &amp;ndash; 10)</code></pre>
</div>
</p>

<h5>Increase volume</h5>

<p><div>
  <pre><code class='applescript'>&lt;/p&gt;

&lt;h1&gt;Increase\ Volume.scpt&lt;/h1&gt;

&lt;p&gt;set currentVolume to output volume of (get volume settings)
set volume output volume (currentVolume + 10)</code></pre>
</div>
</p>

<h5>Mute volume</h5>

<p><div>
  <pre><code class='applescript'>&lt;/p&gt;

&lt;h1&gt;Mute\ Volume.scpt&lt;/h1&gt;

&lt;p&gt;set isMuted to output muted of (get volume settings)
set volume output muted not isMuted</code></pre>
</div>
</p>

<h2>Using in command line</h2>

<p>To run an AppleScript file in the command line, run:</p>

<p><div>
  <pre><code class='console'>$ osascript /path/to/file</code></pre>
</div>
</p>

<p>These files have spaces in them so that it looks cleaner in Quicksilver, but you can alias the commands appropriately.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling VirtualBox SSH on IPv6 (Linux host, Linux guest)]]></title>
    <link href="http://louisrli.github.io/blog/2012/08/30/virtualbox-ipv6-ssh/"/>
    <updated>2012-08-30 00:00:00 -0400</updated>
    <id>http://louisrli.github.io/blog/2012/08/30/virtualbox-ipv6-ssh</id>
    <content type="html"><![CDATA[<p>This is a quick article describing how to SSH to a VirtualBox machine from the host machine, written for VirtualBox 4.1.18 Fedora. The standard choice &mdash; bridged networking &mdash; doesn&rsquo;t work when the host has an IPv6 address.</p>

<!-- more -->


<p></p>

<p>According to the help page for <strong>bridged networking</strong> (the standard choice):</p>

<blockquote><p>On Linux hosts &hellip; for other protocols such as IPv6 and IPX, you must choose a wired interface.</p></blockquote>

<p>I moved into the dorms yesterday, where I was hit by an IPv6 address and found that I couldn&rsquo;t SSH to one of my VMs. After playing around and finding the solution, I thought I&rsquo;d write a guide since I hadn&rsquo;t found one immediately on the internet.</p>

<h2>0. Install OpenSSH (Guest)</h2>

<p>Make sure the SSH server is installed:
<div>
  <pre><code class='console'>$ sudo apt-get install openssh-server  # Ubuntu, Debian
$ sudo yum install openssh-server   # Fedora</code></pre>
</div>
</p>

<h2>1. Create a host-only network (Host)</h2>

<p>Navigate to <strong>File &ndash;> Preferences &ndash;> Network</strong>, and click the icon with a plus sign. By default, it will create a host network named <code>vboxnet0</code>.</p>

<p><img src="/images/vbox-ssh-hostnetwork.png" alt="File -&gt; Preferences -&gt; Network -&gt; Add Host Network" /></p>

<h2>2. Add a network adapter (Host)</h2>

<p>On the host, first shut off the guest VM. Next, right-click the VM in the library and open the settings. We&rsquo;ll create a second adapter (&ldquo;Adapter 2&rdquo;) attached to a <strong>Host-only Adapter</strong>, as shown in the picture below.</p>

<p><img src="/images/vbox-ssh-networkadapter.png" alt="Settings -&gt; Network -&gt; Adapter 2 -&gt; Host-only Adapter" /></p>

<h2>3. Add a network interface (Guest)</h2>

<p>On the Linux guest, add the following lines to <code>/etc/network/interfaces</code>:
<div>
  <pre><code class='text'>auto eth1
iface eth1 inet dhcp</code></pre>
</div>
</p>

<p>Start the network interface:
<div>
  <pre><code class='console'>$ sudo ifup eth1</code></pre>
</div>
</p>

<h2>4. Find the IP address (Guest)</h2>

<p>On the Linux guest, run the <code>ifconfig</code> command and search for the <code>inet addr</code>. In the output below, the address that we need is <strong>192.168.56.101</strong>.
<div>
  <pre><code class='console'>$ ifconfig | grep eth1 -C 5
RX packets:25 errors:0 dropped:0 overruns:0 frame:0
TX packets:33 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:3700 (3.6 KiB)  TX bytes:2867 (2.7 KiB)&lt;/p&gt;

&lt;p&gt;eth1      Link encap:Ethernet  HWaddr 08:00:27:32:ac:fd
inet addr:192.168.56.101  Bcast:192.168.56.255  Mask:255.255.255.0
inet6 addr: fe80::a00:27ff:fe32:acfd/64 Scope:Link
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
RX packets:7963 errors:0 dropped:0 overruns:0 frame:0
TX packets:4691 errors:0 dropped:0 overruns:0 carrier:0</code></pre>
</div>
</p>

<h2>5. SSH to the virtual machine (Host)</h2>

<p>Finally, we can SSH to the virtual machine.</p>

<p><div>
  <pre><code class='console'>$ ssh &lt;a href=&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x75;&amp;#115;&amp;#x65;&amp;#114;&amp;#x40;&amp;#x31;&amp;#x39;&amp;#50;&amp;#x2e;&amp;#49;&amp;#54;&amp;#x38;&amp;#46;&amp;#53;&amp;#54;&amp;#x2e;&amp;#49;&amp;#48;&amp;#49;&quot;&gt;&amp;#x75;&amp;#x73;&amp;#101;&amp;#x72;&amp;#x40;&amp;#49;&amp;#x39;&amp;#50;&amp;#x2e;&amp;#49;&amp;#54;&amp;#x38;&amp;#46;&amp;#53;&amp;#54;&amp;#46;&amp;#49;&amp;#48;&amp;#x31;&lt;/a&gt;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
</feed>
