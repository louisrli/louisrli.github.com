<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | Louis Li]]></title>
  <link href="http://louisrli.github.io/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://louisrli.github.io/"/>
  <updated>2022-11-02T21:09:11+03:00</updated>
  <id>http://louisrli.github.io/</id>
  <author>
    <name><![CDATA[Louis Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Next.js Rewrites, Amazon S3, and Trailing Slashes]]></title>
    <link href="http://louisrli.github.io/blog/2020/12/21/next-dot-js-rewrites/"/>
    <updated>2020-12-21 00:00:00 +0300</updated>
    <id>http://louisrli.github.io/blog/2020/12/21/next-dot-js-rewrites</id>
    <content type="html"><![CDATA[<p>This post talks about how to set up Next.js rewrites to point to a static site
hosted on Amazon S3, in particular how to deal with trailing slashes.</p>

<!-- more -->

<h2 id="goal">Goal</h2>
<p>The problem that I’m describing occurred in the process of creating
<a href="https://memm.io">Memm</a>, a tool for studying for the MCAT.</p>

<p>The goal: <strong>move blog.memm.io =&gt; memm.io/blog</strong> (apparently better for SEO
purposes).</p>

<ul>
  <li><strong>memm.io</strong>: runs on <a href="https://nextjs.org/">Next.js</a></li>
  <li><strong>blog.memm.io</strong>: hosted on Amazon S3, using <a href="https://www.gatsbyjs.com/">Gatsby</a></li>
</ul>

<p>I want <code class="language-plaintext highlighter-rouge">memm.io</code> to continue hosting the main site, while only paths under
<code class="language-plaintext highlighter-rouge">memm.io/blog</code> will actually point to a different underlying endpoint, e.g., 
<code class="language-plaintext highlighter-rouge">http://MY-S3-BUCKET.s3-website-us-west-2.amazonaws.com/</code>.</p>

<h2 id="problem">Problem</h2>

<p>When navigating to <code class="language-plaintext highlighter-rouge">memm.io/blog</code> and clicking on a link, everything worked
fine. However, <strong>if the page was refreshed at <code class="language-plaintext highlighter-rouge">memm.io/blog/my-slug</code>, it would
redirect to <code class="language-plaintext highlighter-rouge">memm.io/my-slug</code></strong>. This also meant that linking directly to a blog
post would not work, changing the path strangely.</p>

<p>Additionally, my Gatsby had its <code class="language-plaintext highlighter-rouge">pathPrefix</code>
<a href="https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/">config</a>
set to <code class="language-plaintext highlighter-rouge">/blog</code>, which meant there were a variety of static assets that were
supposed to be loaded (e.g., <code class="language-plaintext highlighter-rouge">http://MY-S3-BUCKET.s3-website-us-west-2.amazonaws.com/foobar.css</code>) that were
similarly 404ing due to Next.js’s strange rewriting behavior.</p>

<p>This is a problematic next.config.js (see Next.js documentation for where this
goes).</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span><span class="nx">include</span> <span class="nx">code</span><span class="o">/</span><span class="nx">next</span><span class="o">-</span><span class="nx">writes</span><span class="o">-</span><span class="nx">wrong</span><span class="o">-</span><span class="nx">config</span><span class="p">.</span><span class="nx">js</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="solution">Solution</h2>
<p>This leverages a new feature supported in Next 9.5 and above called
<a href="https://nextjs.org/docs/api-reference/next.config.js/rewrites">rewrites</a>.</p>

<p>We’ll explore more in depth why this is happening, but since most people reading
articles just want the solution, I fixed it with something like this in my
<code class="language-plaintext highlighter-rouge">next.config.js</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span><span class="nx">include</span> <span class="nx">code</span><span class="o">/</span><span class="nx">next</span><span class="o">-</span><span class="nx">writes</span><span class="o">-</span><span class="nx">right</span><span class="o">-</span><span class="nx">config</span><span class="o">-</span><span class="nx">slim</span><span class="p">.</span><span class="nx">js</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="using-withcss-withsass-withless">Using withCss, withSass, withLess</h3>

<p>It should also be noted that my <code class="language-plaintext highlighter-rouge">next.config.js</code> uses Ant Design, and therefore
it has a bit of fiddling with the CSS/Sass/Less loading. In another possible bug with the
<code class="language-plaintext highlighter-rouge">@zeit/next-css</code> package, <code class="language-plaintext highlighter-rouge">trailingSlash</code> does NOT work within the nested <code class="language-plaintext highlighter-rouge">withCss</code> call, although
strangely rewrites works. This is probably also a bug given that <code class="language-plaintext highlighter-rouge">rewrites</code>
works but <code class="language-plaintext highlighter-rouge">trailingSlash</code> doesn’t, although I didn’t file it –
<code class="language-plaintext highlighter-rouge">withCss</code> is technically a deprecated package; they shouldn’t be
expected to support newer features of Next.js to be compatible with it.</p>

<p>Note how in the code below that rewrites is within the <code class="language-plaintext highlighter-rouge">withSass</code> but the
<code class="language-plaintext highlighter-rouge">trailingSlash</code> <em>must</em> be outside of the <code class="language-plaintext highlighter-rouge">withCss</code> call in order to work.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span><span class="nx">include</span> <span class="nx">code</span><span class="o">/</span><span class="nx">next</span><span class="o">-</span><span class="nx">writes</span><span class="o">-</span><span class="nx">right</span><span class="o">-</span><span class="nx">config</span><span class="o">-</span><span class="nx">withcss</span><span class="p">.</span><span class="nx">js</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="cause">Cause</h2>

<p>I’m still not 100% confident in my explanation of the issue, but I
think it goes something like this:</p>

<ul>
  <li>Next.js by default removes a trailing slash when it doesn’t
  exist, <a href="https://nextjs.org/docs/api-reference/next.config.js/trailing-slash">according to the trailing slash
  documentation</a>. That means <code class="language-plaintext highlighter-rouge">memm.io/blog/</code> becomes <code class="language-plaintext highlighter-rouge">memm.io/blog</code> under the default settings.</li>
  <li>Amazon S3 in contrast, does a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302">302
  redirect</a> when
  there is no trailing slash. I think that Next.js rewrites doesn’t play
  nicely with 302. This is also mostly unconfigurable: <a href="https://stackoverflow.com/questions/30090254/aws-s3-forces-302-redirects-when-url-has-no-trailing-slash-need-301s">see this StackOverflow
  question</a></li>
</ul>

<p>Somehow, with the problematic config, this causes two redirects that causes
Next.js to remove the <code class="language-plaintext highlighter-rouge">/blog/</code> from <code class="language-plaintext highlighter-rouge">/blog/my-slug</code> and simply go to <code class="language-plaintext highlighter-rouge">/my-slug</code>. It’s
possible this is a bug with Next.js rewrites, but it could also be an intended
interaction given the quirks of the two opposing redirect rules.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typesafe Unit Testing of GraphQL Resolvers in TypeScript]]></title>
    <link href="http://louisrli.github.io/blog/2020/10/09/unit-testing-graphql-resolver-typescript/"/>
    <updated>2020-10-09 00:00:00 +0300</updated>
    <id>http://louisrli.github.io/blog/2020/10/09/unit-testing-graphql-resolver-typescript</id>
    <content type="html"><![CDATA[<p>This post gives a code example on how to unit test a GraphQL resolver with Jest
in TypeScript. In order to make the testing typesafe, we use <a href="https://graphql-code-generator.com/">GraphQL Code
Generator</a>.</p>

<!-- more -->

<h2 id="description">Description</h2>

<p>Unit testing GraphQL resolvers in TypeScript can be quite tricky to get right
with the correct typing. This posts illustrates some example code of setting up
calls directly to the resolvers.</p>

<p>The code below here works with <a href="https://graphql-code-generator.com/">GraphQL Code
Generator</a> to generate types for your
resolvers. This article does not cover how to set up GraphQL Code Generator; it
assumes that you have a working setup with your resolvers.</p>

<p>Instead of writing raw GraphQL queries (which can be seen in <a href="./2020-10-09-unit-testing-graphql-middleware-typescript.md">my post about
testing
middlewares</a>), we
show a typesafe way to unit test GraphQL resolvers. Much of this code is based
off what was written in <a href="https://github.com/dotansimha/graphql-code-generator/issues/1763">graphql-code-generator issue #1763</a> by <a href="https://github.com/kamilkisiela">kamilkisiela</a>.</p>

<h2 id="code">Code</h2>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">code</span><span class="o">/</span><span class="nx">mocked</span><span class="o">-</span><span class="nx">resolver</span><span class="o">-</span><span class="nx">unit</span><span class="o">-</span><span class="nx">test</span><span class="p">.</span><span class="nx">ts</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing of GraphQL Middleware in TypeScript]]></title>
    <link href="http://louisrli.github.io/blog/2020/10/09/unit-testing-graphql-middleware-typescript/"/>
    <updated>2020-10-09 00:00:00 +0300</updated>
    <id>http://louisrli.github.io/blog/2020/10/09/unit-testing-graphql-middleware-typescript</id>
    <content type="html"><![CDATA[<p>This post gives a code example on how to unit test a GraphQL middleware in
TypeScript with Jest, using the Express GraphQL middleware resolver
<a href="https://github.com/maticzav/graphql-shield">graphql-shield</a> as an example. It
should generalize to other middlewares.</p>

<!-- more -->

<h2 id="description">Description</h2>

<p>In this test, we essentially set up a new set of resolvers from scratch using
the schema by loading all GraphQL schema files from a directory. By using
<code class="language-plaintext highlighter-rouge">makeExecutableSchema</code> to create a schema and
<a href="https://www.apollographql.com/docs/apollo-server/api/graphql-tools/#addmockfunctionstoschemaoptions"><code class="language-plaintext highlighter-rouge">addMockFunctionsToSchema</code></a>,
we mock out the endpoints.</p>

<p>My application is using <a href="https://github.com/prisma-labs/graphql-yoga/">graphql-yoga</a>, although this is actually irrelevant to the test environment (you’ll notice no references to it here).</p>

<p>In this example, I use an external Express GraphQL middleware resolver:
<a href="https://github.com/maticzav/graphql-shield">graphql-shield</a>, a permissions
layer for GraphQL.</p>

<h2 id="drawbacks">Drawbacks</h2>
<p>A huge drawback of this approach is that we need to type out GraphQL queries as
strings without having them typechecked. I didn’t find a good way to have
typechecked queries here, although it may be possible somehow with <a href="https://graphql-code-generator.com/">GraphQL Code
Generator</a> (if you find a way, please
comment below).</p>

<p>Note that it’s possible to individually unit test any rules that you
use in the permissions as well (independent of GraphQL).</p>

<h2 id="code">Code</h2>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">%</span> <span class="nx">include</span> <span class="nx">code</span><span class="o">/</span><span class="nx">middleware</span><span class="o">-</span><span class="nx">unit</span><span class="o">-</span><span class="nx">test</span><span class="p">.</span><span class="nx">ts</span> <span class="o">%</span><span class="p">}</span>
</code></pre></div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MathJax with React]]></title>
    <link href="http://louisrli.github.io/blog/2020/06/04/react-mathjax/"/>
    <updated>2020-06-04 00:00:00 +0300</updated>
    <id>http://louisrli.github.io/blog/2020/06/04/react-mathjax</id>
    <content type="html"><![CDATA[<p>This post describes how to use React (Typescript) and MathJax.</p>

<!-- more -->

<p>There are a few performance optimizations:</p>

<ul>
  <li><a href="https://reactjs.org/docs/react-api.html#reactmemo">React.memo</a> makes it so
that even if the parent rerenders but the Latex does not change, the component
does not rerender
(<a href="https://stackoverflow.com/questions/54015086/how-to-prevent-child-component-from-re-rendering-when-using-react-hooks-and-memo">reference</a>).</li>
  <li>The MathJax <code class="language-plaintext highlighter-rouge">typeset()</code> is only called when <code class="language-plaintext highlighter-rouge">rawLatex</code> changes. Technically,
this is unnecessary, as the <code class="language-plaintext highlighter-rouge">React.memo</code> should mean that it only rerenders
when the prop changes.</li>
</ul>

<p>You can either load MathJax in the head or load it dynamically in other ways.
With Next.js, I was running into issues with using the <code class="language-plaintext highlighter-rouge">&lt;Head&gt;</code> tag; see <a href="./2020-06-04-react-dynamic-script-hook">how to
dynamically load scripts in React</a>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Combined with dynamic script loading, this component allows us to render
 * MathJax. Uses MathJax 3.0. It takes an approach similar to the article below:
 *
 * https://engineering.classpro.in/render-latex-in-react-using-mathjax-f9742504678
 *
 * but then adapts based on MathJax 3.0:
 *
 * http://docs.mathjax.org/en/latest/web/typeset.html#handling-asynchronous-typesetting
 */</span>

<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">getMathJax</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nb">window</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">MathJax</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">typeset</span> <span class="o">=</span> <span class="p">(</span><span class="nx">selector</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">HTMLElement</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">mathJax</span> <span class="o">=</span> <span class="nx">getMathJax</span><span class="p">();</span>
  <span class="c1">// If MathJax script hasn't been loaded yet, then do nothing.</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">mathJax</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">mathJax</span><span class="p">.</span><span class="nx">startup</span><span class="p">.</span><span class="nx">promise</span> <span class="o">=</span> <span class="nx">mathJax</span><span class="p">.</span><span class="nx">startup</span><span class="p">.</span><span class="nx">promise</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">selector</span><span class="p">();</span>
      <span class="k">return</span> <span class="nx">mathJax</span><span class="p">.</span><span class="nx">typesetPromise</span><span class="p">();</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="na">err</span><span class="p">:</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`Typeset failed: </span><span class="p">${</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
  <span class="k">return</span> <span class="nx">mathJax</span><span class="p">.</span><span class="nx">startup</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">};</span>

<span class="kr">interface</span> <span class="nx">LatexProps</span> <span class="p">{</span>
  <span class="nl">rawLatex</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Latex</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FC</span><span class="o">&lt;</span><span class="nx">LatexProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">rawLatex</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createRef</span><span class="o">&lt;</span><span class="nx">HTMLSpanElement</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">typeset</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">current</span><span class="o">!</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">rawLatex</span><span class="p">]);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">rawLatex</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/span&gt;</span><span class="err">;
</span><span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">memo</span><span class="p">(</span><span class="nx">Latex</span><span class="p">);</span>
</code></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Script Loading in React with Hooks]]></title>
    <link href="http://louisrli.github.io/blog/2020/06/04/react-dynamic-script-hook/"/>
    <updated>2020-06-04 00:00:00 +0300</updated>
    <id>http://louisrli.github.io/blog/2020/06/04/react-dynamic-script-hook</id>
    <content type="html"><![CDATA[<p>This post describes how to dynamically load a script by adding a script tag to
your document using React Hooks.</p>

<!-- more -->

<p>This is a modification on the code presented in <a href="https://cleverbeagle.com/blog/articles/tutorial-how-to-load-third-party-scripts-dynamically-in-javascript">this
article</a>.
The script adds a script tag to the page and optionally calls a callback. It
will not add the script again if it is already loaded. If a callback was
provided, then it removes the script from the page when the component unmounts
(so that the callback can be called again).</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Dynamic script loading hook.
 */</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

<span class="c1">// If no callback is provided, the script will not be removed on unmount. This</span>
<span class="c1">// kinda matters if the script loading is not idempotent (for some reason</span>
<span class="c1">// MathJax is not, which is one of the scripts I was using this for) or</span>
<span class="c1">// if you need the callback to happen again.</span>
<span class="kd">const</span> <span class="nx">useScript</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">scriptUrl</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="nx">scriptId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="nx">callback</span><span class="p">?:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">React</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">existingScript</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">scriptId</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">existingScript</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">script</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">scriptUrl</span><span class="p">;</span>
      <span class="nx">script</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">scriptId</span><span class="p">;</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>

      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">callback</span><span class="p">();</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">existingScript</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">callback</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">existingScript</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">existingScript</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">scriptUrl</span><span class="p">,</span> <span class="nx">scriptId</span><span class="p">]);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useScript</span><span class="p">;</span>

</code></pre></div></div>
]]></content>
  </entry>
  
</feed>
